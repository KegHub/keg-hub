{"version":3,"file":"transition-97bf9242.js","sources":["../../src/colors/toRgb.js","../../src/colors/hexToRgba.js","../../src/colors/opacity.js","../../src/colors/shadeHex.js","../../src/colors/transition.js"],"sourcesContent":["import { isObj } from '@keg-hub/jsutils'\n\n/**\n * Convert { r: 0, g: 0, b:0, a: 0 } object to rgba() string\n * @param {string|number|object} red - red color value or an object with r,g,b,a values\n * @param {string|number} green - green color value\n * @param {string|number} blue - blue color value\n * @param {number|float} alpha - opacity - from 0-1\n *\n * @return {string} rgba string\n */\nexport const toRgb = (red, green, blue, alpha) => {\n  const obj = isObj(red) ? red : { r: red, g: green, b: blue, a: alpha }\n  obj.a = !obj.a && obj.a !== 0 ? 1 : obj.a\n\n  return `rgba(${obj.r}, ${obj.g}, ${obj.b}, ${obj.a})`\n}\n","import { toRgb } from './toRgb'\n\n/**\n * Convert hex color to rgba\n * @param  {string} hex - color to convert\n *\n * @param {number} opacity - from 0-1\n * @return rgba as string\n */\nexport const hexToRgba = (hex, opacity, asObj) => {\n  if (!hex)\n    return (\n      console.warn('Can not convert hex to rgba', hex) || `rgba(255,255,255,0)`\n    )\n\n  hex = hex.indexOf('#') === 0 ? hex.replace('#', '') : hex\n  hex = hex.length === 3 ? `${hex}${hex}` : hex\n\n  opacity = opacity > 1 ? (opacity / 100).toFixed(4) : opacity\n\n  const rgbaObj = {\n    r: parseInt(hex.substring(0, 2), 16),\n    g: parseInt(hex.substring(2, 4), 16),\n    b: parseInt(hex.substring(4, 6), 16),\n    a: !opacity && opacity !== 0 ? 1 : opacity,\n  }\n\n  return asObj ? rgbaObj : toRgb(rgbaObj)\n}\n","import { isObj, isStr, isNum } from '@keg-hub/jsutils'\n\n\nconst mapOpacity = (opacity, color) => {\n  // Map opacity amounts by .5\n  for (let amount = 100; amount >= 0; amount -= 5)\n    opacity[`_${amount}`] = opacity((amount / 100).toFixed(2), color)\n\n  return opacity\n}\n\n\n/**\n * Convert a hex color to rgba setting the opacity to the passed in amount prop\n * @param {number} amount - Opacity amount\n * @param {string|Object} color - color to convert\n *\n * @return rgba as string\n */\nexport const opacity = mapOpacity((amount, color) => {\n  return isStr(color) && color.indexOf('#') === 0\n    ? hexToRgba(color, amount)\n    : isObj(color)\n      ? toRgb(color, amount)\n      : `rgba(${color || '0,0,0'}, ${amount})`\n})","import { hexToRgba } from './hexToRgba'\n\nconst convertToPercent = (num, percent) => {\n  return parseInt((num * (100 + percent)) / 100)\n}\n\nconst checkColorMax = num => (num < 255 ? num : 255)\n\n/**\n * Helpers to convert a passed in number and percent into a color value\n * @param {number|string} num - Number value to convert\n * @param {number} percent - percentage of the num to be converted, ( positive || negative )\n *\n * @returns {string} - Shaded hex string\n */\nconst convertToColor = (num, percent) => {\n  const asPercent = convertToPercent(num, percent)\n  const withMax = checkColorMax(asPercent)\n  const asStr = withMax.toString(16)\n\n  return asStr.length == 1 ? `0${asStr}` : asStr\n}\n\n\n/**\n * Shades a hex color based on the passed in percent\n * @param {string} color - Hex color to shade\n * @param {number} percent - amount to shared, can be positive or negitive\n *\n * @returns {string} - Shaded hex string\n */\nexport const shadeHex = (color, percent) => {\n  const rgba = hexToRgba(color, 1, true)\n\n  return (\n    '#' +\n    convertToColor(rgba.r, percent) +\n    convertToColor(rgba.g, percent) +\n    convertToColor(rgba.b, percent)\n  )\n}\n\n","import { isArr, isStr, isNum } from '@keg-hub/jsutils'\n\n/**\n * Builds a CSS transition rule\n * @param {Array} [props=[]] - CSS rules to have the transition applied to\n * @param {number} [speed=250] - Speed of the transition\n * @param {string} [timingFunc='ease'] - Type of transition animation to use\n *\n * @returns {Object} - Built CSS transition rule\n */\nexport const transition = (props = [], speed = 250, timingFunc = 'ease') => {\n  speed = isNum(speed) ? `${speed}ms` : isStr(speed) ? speed : `250ms`\n\n  return isStr(props)\n    ? { transition: `${props} ${speed} ${timingFunc}` }\n    : isArr(props)\n      ? {\n          transition: props\n            .reduce((trans, prop) => {\n              trans.push(`${prop} ${speed} ${timingFunc}`)\n              return trans\n            }, [])\n            .join(', '),\n        }\n      : null\n}\n"],"names":["toRgb","red","green","blue","alpha","obj","isObj","r","g","b","a","hexToRgba","hex","opacity","asObj","console","warn","indexOf","replace","length","toFixed","rgbaObj","parseInt","substring","mapOpacity","color","amount","isStr","convertToPercent","num","percent","checkColorMax","convertToColor","asPercent","withMax","asStr","toString","shadeHex","rgba","transition","props","speed","timingFunc","isNum","isArr","reduce","trans","prop","push","join"],"mappings":"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"}