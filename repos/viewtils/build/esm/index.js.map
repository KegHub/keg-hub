{"version":3,"file":"index.js","sources":["../../src/logger.js","../../src/url/getQueryData.js","../../src/url/listenToPopState.js","../../src/url/updateUrlQuery.js"],"sourcesContent":["/**\n * All allowed log method types\n * @type {Object}\n */\nconst logTypes = [\n  `log`,\n  `trace`,\n  `debug`,\n  `info`,\n  `dir`,\n  `warn`,\n  `error`,\n]\n\n/**\n * Helper to log messages when not in production\n * @function\n * @param {string} type - Type of log message. Must be one of log, info, dir, warn, error\n * @param {Array} toLog - Data to be logged\n *\n * @returns {Void}\n */\nexport const Logger = (type, ...toLog) => {\n  const method = logTypes.includes(type)\n    ? type === `warn` ? `info` : type\n    : toLog.unshift(type) && `log`\n\n  process.env.NODE_ENV !== 'production' &&\n    console[method] &&\n    console[method](...toLog)\n}\n\nlogTypes.map(type => Logger[type] = (...toLog) => Logger(type, ...toLog))\n\n","import { queryToObj, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Gets the query params from the current url location\n * @function\n *\n * @returns {Object} query params as an object\n */\nexport const getQueryData = () => {\n  return typeof document === 'undefined'\n    ? noOpObj\n    : queryToObj(document?.location?.search)\n}","import { noOpObj } from '@keg-hub/jsutils'\nimport { getQueryData } from './getQueryData'\n\n/**\n * The current popstate\n * @boolean\n */\nlet IN_POP_STATE = false\n\n/**\n * Handler for window.popstate events\n * Updates the redux store based on the updated url params\n * @function\n * @public\n * @export\n * @param {function} cb - Callback to call when the popstate event fires\n *\n * @return {function} - Method to remove the popstate listener\n */\nexport const listenToPopState = cb => {\n  const listener = async event => {\n    IN_POP_STATE = true\n    // Get the query params from the url and call the callback\n    isFunc(cb) && await cb(getQueryData() || noOpObj)\n\n    IN_POP_STATE = false\n  }\n\n  window.addEventListener('popstate', listener)\n\n  return () => (window.removeEventListener('popstate', listener))\n}\n\n\n/**\n * Helper to know when the updates are coming form a pop-state update\n * @function\n * @public\n * @export\n *\n * @return {boolean} - The current popstate\n */\nexport const inPopStateUpdate = () => IN_POP_STATE","import { inPopStateUpdate } from './listenToPopState'\nimport { queryToObj, objToQuery, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Wrapper around window.location and window.history\n * Encapsulates the global APIs to ensure consistency\n * @function\n * @private\n *\n * @return {Object} - Contains the location and history global objects\n */\nconst getWindowProps = () => {\n  return typeof window === \"undefined\"\n    ? noOpObj\n    : (() => ({ location: window.location, history: window.history }))()\n}\n\n/**\n * Builds the new query to be the the browser url should be update to\n * @function\n * @private\n * @param {Object} current - The current query params of the browser url\n * @param {Object} update - New query params to be added to the url\n * @param {boolean} merge - Should the update be merged with the current query params\n *\n * @return {string} - Stringified version of the query params\n */\nconst buildQuery = (current, update, merge) => {\n  const query = merge ? { ...current, ...update }: update\n  return objToQuery(query)\n}\n\n/**\n * Updates the browsers url query params without reloading the window\n * @function\n * @public\n * @export\n * @param {Object} update - New query params to be added to the url\n * @param {boolean} merge - Should the update be merged with the current query params\n *\n * @return {void}\n */\nexport const updateUrlQuery = (update=noOpObj, merge, listener) => {\n  if(inPopStateUpdate()) return\n\n  const { location, history } = getWindowProps()\n  const current = queryToObj(location.search)\n\n  history.pushState(noOpObj, '', buildQuery(current, update, merge))\n}"],"names":["logTypes","Logger","type","toLog","method","includes","unshift","undefined","console","map","getQueryData","document","noOpObj","queryToObj","location","search","IN_POP_STATE","listenToPopState","cb","listener","event","isFunc","window","addEventListener","removeEventListener","inPopStateUpdate","getWindowProps","history","buildQuery","current","update","merge","query","objToQuery","updateUrlQuery","pushState"],"mappings":";;;;;;;;AAIA,MAAMA,QAAQ,GAAG,CACd,KADc,EAEd,OAFc,EAGd,OAHc,EAId,MAJc,EAKd,KALc,EAMd,MANc,EAOd,OAPc,CAAjB;MAkBaC,MAAM,GAAG,CAACC,IAAD,EAAO,GAAGC,KAAV,KAAoB;AACxC,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,QAAT,CAAkBH,IAAlB,IACXA,IAAI,KAAM,MAAV,GAAmB,MAAnB,GAA2BA,IADhB,GAEXC,KAAK,CAACG,OAAN,CAAcJ,IAAd,KAAwB,KAF5B;AAIAK,EACEC,OAAO,CAACJ,MAAD,CADT,IAEEI,OAAO,CAACJ,MAAD,CAAP,CAAgB,GAAGD,KAAnB,CAFF;AAGD;AAEDH,QAAQ,CAACS,GAAT,CAAaP,IAAI,IAAID,MAAM,CAACC,IAAD,CAAN,GAAe,CAAC,GAAGC,KAAJ,KAAcF,MAAM,CAACC,IAAD,EAAO,GAAGC,KAAV,CAAxD;;MCxBaO,YAAY,GAAG,MAAM;AAAA;AAChC,SAAO,OAAOC,QAAP,KAAoB,WAApB,GACHC,OADG,GAEHC,UAAU,cAACF,QAAD,oEAAC,UAAUG,QAAX,uDAAC,mBAAoBC,MAArB,CAFd;AAGD;;ACLD,IAAIC,YAAY,GAAG,KAAnB;MAYaC,gBAAgB,GAAGC,EAAE,IAAI;AACpC,QAAMC,QAAQ,GAAG,MAAMC,KAAN,IAAe;AAC9BJ,IAAAA,YAAY,GAAG,IAAf,CAD8B;AAG9BK,IAAAA,MAAM,CAACH,EAAD,CAAN,KAAc,MAAMA,EAAE,CAACR,YAAY,MAAME,OAAnB,CAAtB;AAEAI,IAAAA,YAAY,GAAG,KAAf;AACD,GAND;AAQAM,EAAAA,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAoCJ,QAApC;AAEA,SAAO,MAAOG,MAAM,CAACE,mBAAP,CAA2B,UAA3B,EAAuCL,QAAvC,CAAd;AACD;MAWYM,gBAAgB,GAAG,MAAMT;;AC/BtC,MAAMU,cAAc,GAAG,MAAM;AAC3B,SAAO,OAAOJ,MAAP,KAAkB,WAAlB,GACHV,OADG,GAEH,CAAC,OAAO;AAAEE,IAAAA,QAAQ,EAAEQ,MAAM,CAACR,QAAnB;AAA6Ba,IAAAA,OAAO,EAAEL,MAAM,CAACK;AAA7C,GAAP,CAAD,GAFJ;AAGD,CAJD;AAgBA,MAAMC,UAAU,GAAG,CAACC,OAAD,EAAUC,MAAV,EAAkBC,KAAlB,KAA4B;AAC7C,QAAMC,KAAK,GAAGD,KAAK,GAAG,EAAE,GAAGF,OAAL;AAAc,OAAGC;AAAjB,GAAH,GAA8BA,MAAjD;AACA,SAAOG,UAAU,CAACD,KAAD,CAAjB;AACD,CAHD;MAeaE,cAAc,GAAG,CAACJ,MAAM,GAAClB,OAAR,EAAiBmB,KAAjB,EAAwBZ,QAAxB,KAAqC;AACjE,MAAGM,gBAAgB,EAAnB,EAAuB;AAEvB,QAAM;AAAEX,IAAAA,QAAF;AAAYa,IAAAA;AAAZ,MAAwBD,cAAc,EAA5C;AACA,QAAMG,OAAO,GAAGhB,UAAU,CAACC,QAAQ,CAACC,MAAV,CAA1B;AAEAY,EAAAA,OAAO,CAACQ,SAAR,CAAkBvB,OAAlB,EAA2B,EAA3B,EAA+BgB,UAAU,CAACC,OAAD,EAAUC,MAAV,EAAkBC,KAAlB,CAAzC;AACD;;;;"}