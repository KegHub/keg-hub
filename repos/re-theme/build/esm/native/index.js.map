{"version":3,"file":"index.js","sources":["../../../src/constants/constants.js","../../../src/context/platform.native.js","../../../src/constants/ruleHelpers.js","../../../src/theme/themeEvent.js","../../../src/theme/withTheme.js","../../../src/theme/manageTheme.js","../../../src/dimensions/sizeMap.js","../../../src/dimensions/dimensions.native.js","../../../src/dimensions/useDimensions.js","../../../src/helpers/getPlatforms.js","../../../src/theme/getDefaultPlatforms.js","../../../src/helpers/getTheme.js","../../../src/helpers/compileStyles.js","../../../src/hooks/useCompiledStyles.js","../../../src/context/reThemeProvider.js","../../../src/context/platform.js","../../../src/dimensions/dimensions.native.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/useStyle.js","../../../src/hooks/nativeThemeHook.js"],"sourcesContent":["import { deepFreeze } from '@keg-hub/jsutils'\n\nexport const Constants = deepFreeze({\n  BUILD_EVENT: 'build',\n  CHANGE_EVENT: 'change',\n  RESIZE_EVENT: 'resize',\n  ADD_EVENT: 'addEventListener',\n  REMOVE_EVENT: 'removeEventListener',\n  KEG_STYLES_TAG_ID: `keg-components-stylesheet`,\n  PLATFORM: {\n    NATIVE: '$native',\n    IOS: '$ios',\n    android: '$android',\n    WEB: '$web',\n    ALL: '$all',\n  },\n})\n","let RNPlatform\n\n/**\n * Loads the react-native platform inside a function call\n * Ensures react-native has been initialized before calling\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst loadReactNativePlatform = () => {\n  const { Platform } = require('react-native')\n  RNPlatform = Platform\n  return RNPlatform\n}\n\n/**\n * Gets the set platform object, or the default platform\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst getRNPlatform = () => {\n  return RNPlatform || loadReactNativePlatform()\n}\n\n/**\n * Sets the platform object used when building the theme\n * @function\n * @param {Object} Plat - Platform object to use\n *\n * @return {void}\n */\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","/* eslint id-length: 0 */\nexport const ruleHelpers = {\n  // Margin helpers\n  m: `margin`,\n  mT: `marginTop`,\n  mB: `marginBottom`,\n  mR: `marginRight`,\n  mL: `marginLeft`,\n  mH: `marginHorizontal`,\n  mV: `marginVertical`,\n\n  // Padding helpers\n  p: `padding`,\n  pT: `paddingTop`,\n  pB: `paddingBottom`,\n  pR: `paddingRight`,\n  pL: `paddingLeft`,\n  pH: `paddingHorizontal`,\n  pV: `paddingVertical`,\n\n  // Border helpers\n  bC: `borderColor`,\n  bW: `borderWidth`,\n  bS: `borderStyle`,\n  bC: `borderColor`,\n  bRad: `borderRadius`,\n  bTRR: 'borderTopRightRadius',\n  bTLR: 'borderTopLeftRadius',\n  bBLR: 'borderBottomLeftRadius',\n  bBRR: 'borderBottomRightRadius',\n  bTC: `borderTopColor`,\n  bTW: `borderTopWidth`,\n  bBC: `borderBottomColor`,\n  bBW: `borderBottomWidth`,\n  bRC: `borderRightColor`,\n  bRW: `borderRightWidth`,\n  bLC: `borderLeftColor`,\n  bLW: `borderLeftWidth`,\n\n  // Color helpers\n  c: `color`,\n  bg: `background`,\n  bgC: `backgroundColor`,\n\n  // Layout helpers\n  d: `display`,\n  ovf: `overflow`,\n  ovfX: `overflowX`,\n  ovfY: `overflowY`,\n  pos: `position`,\n  z: `zIndex`,\n\n  tp: `top`,\n  bt: `bottom`,\n  btm: `bottom`,\n  lt: `left`,\n  rt: `right`,\n\n  // Effect helpers\n  bxS: `boxShadow`,\n  op: `opacity`,\n  ptrE: `pointerEvents`,\n  otl: `outline`,\n\n  // Flex helpers\n  fl: `flex`,\n  flD: `flexDirection`,\n  flWr: `flexWrap`,\n  flB: `flexBasis`,\n  flG: `flexGrow`,\n  flS: `flexShrink`,\n  jtC: `justifyContent`,\n  alC: `alignContent`,\n  alS: `alignSelf`,\n  alI: `alignItems`,\n\n  // Alignment helpers\n  vrA: `verticalAlign`,\n  whS: `whiteSpace`,\n\n  // Dimension helpers\n  w: 'width',\n  h: `height`,\n  minH: `minHeight`,\n  maxH: `maxHeight`,\n  minW: `minWidth`,\n  maxW: `maxWidth`,\n\n  // Text / Font helpers\n  ftF: `fontFamily`,\n  ftSz: `fontSize`,\n  ftS: `fontStyle`,\n  ftWt: `fontWeight`,\n  lnH: `lineHeight`,\n  ltrS: `letterSpacing`,\n  txAl: `textAlign`,\n  txDc: `textDecoration`,\n  txDL: 'textDecorationLine',\n\n  // Shadow helpers\n  shC: `shadowColor`,\n  shOf: `shadowOffset`,\n  shOff: `shadowOffset`,\n  shO: `shadowOpacity`,\n  shR: `shadowRadius`,\n\n  // Transition helpers\n  trf: `transform`,\n  trD: `transitionDuration`,\n  trP: `transitionProperty`,\n}\n","/** @module theme */\n'use strict'\n\nimport { isArr, isFunc, isNum } from '@keg-hub/jsutils'\n\nconst listeners = {}\n\n/**\n * Add a function to an event type\n * <br/> Returns an index which can be used to remove the listener when needed\n * @param {string} event - Names of event to add the listener to\n * @param {function} listener - Listener function to add\n *\n * @returns {number} - Index of the listener in the events array cache\n */\nconst addThemeEvent = (event, listener) => {\n  // Ensure event and listener are passed in correctly\n  if (!event || !isFunc(listener)) return\n\n  // Create the new event event\n  listeners[event] = listeners[event] || []\n\n  // Add the listener to the event event\n  listeners[event].push(listener)\n\n  // Return the index of the added listener\n  return listeners[event].length - 1\n}\n\n/**\n * Remove a registered event listener\n * @param {string} event - Names of event to remove listeners for\n * @param {function} removeListener - Listener function to remove\n *\n * @returns {void}\n */\nconst removeThemeEvent = (event, removeListener) => {\n  // Ensure the proper params are passed in\n  if (!event || !listeners[event] || (!removeListener && removeListener !== 0))\n    return\n\n  // If an index is passed in, use that to remove the listener function\n  isNum(removeListener)\n    ? // Use splice to remove the listener at the correct index\n    listeners[event].splice(removeListener, 1)\n    : // Otherwise ensure the listener and events exists, then filter out the listener\n    isFunc(removeListener) &&\n      isArr(listeners[event]) &&\n      (listeners[event] = listeners[event].filter(\n        listener => listener !== removeListener\n      ))\n}\n\n/**\n * Calls all functions registered to the passed in event name\n * @param {*} event - Event to call listeners for\n * @param {*} params - params to pass to the registered functions\n *\n * @returns {void}\n */\nconst fireThemeEvent = (event, ...params) => {\n  isArr(listeners[event]) &&\n    listeners[event].forEach(listener => listener(...params))\n}\n\n/**\n * Clears registered listeners from the listeners object\n * If event is passed, will only clear listeners for that event\n * @param {string=} event - Name of the event to clear\n *\n * @returns {void}\n */\n// const clearThemeEvents = event => {\n//   event && listeners[event] ? (listeners[event] = []) : (listeners = {})\n// }\n\nexport { addThemeEvent, fireThemeEvent, removeThemeEvent }\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/**\n * Holds the current theme after it's built\n */\nlet currentTheme = {}\n\n/**\n * Helper to allow other methods to get the current theme used by the provider\n * @returns {Object} currentTheme - Current theme used by the provider\n */\nexport const getCurrentTheme = () => currentTheme\n\n/**\n * Helper to update the current Theme when ever the theme is built\n * Gets added as an event listener, and is called every time the theme is re-built\n * @param {Object} updatedTheme - Update built theme\n */\nexport const updateCurrentTheme = updatedTheme => (currentTheme = updatedTheme)\n","/** @module dimensions */\n'use strict'\n\nimport {\n  mapObj,\n  isObj,\n  toNum,\n  isNum,\n  softFalsy,\n  logData,\n} from '@keg-hub/jsutils'\n\n/**\n * Default sizes for a screen width\n * <br/> Can be overwritten with setSizes helper\n * @object\n */\nconst sizeMap = {\n  /**\n   * Name of the breakpoint\n   * Number for each entry defines the breakpoint\n   *  > The Breakpoint is the screen size where the entries becomes active\n   */\n  entries: [\n    [ '$xsmall', 1 ],\n    [ '$small', 320 ],\n    [ '$medium', 768 ],\n    [ '$large', 1024 ],\n    [ '$xlarge', 1366 ],\n  ],\n  hash: {},\n  indexes: {},\n}\n\n/**\n * Builds an index of the entry locations in the sizeMap entries\n * <br/>Builds the key value hash of the entries\n * <br/>Builds the keys array of the entries\n * @function\n *\n * @returns {void}\n */\nconst buildSizeMapParts = () => {\n  sizeMap.indexes = sizeMap.entries.reduce((indexes, entry, index) => {\n    // Add the entry value with the index\n    indexes[entry[0]] = index\n\n    // Add the index with entry value\n    indexes[index] = entry[0]\n\n    // Convert the sizeMap.entries into an object of key value pairs\n    sizeMap.hash[entry[0]] = entry[1]\n\n    return indexes\n  }, {})\n}\n\n/**\n * Updates the sizeMap.entries with custom values\n * <br/>Keys must already exist in the default sizeMap.indexes\n * <br/>Allowed keys are => xsmall | small | medium | large | xlarge\n * @function\n * @param {Object} dims - key value pair of custom sizeMap.entries\n *\n * @returns {Object} - Updated sizeMap object\n */\nexport const setSizes = dims => {\n  if (!isObj(dims))\n    return logData(\n      `setDimensions method requires an argument of type 'Object'.\\nReceived: `,\n      dims,\n      'error'\n    )\n\n  mapObj(dims, (key, value) => {\n    // Get the key index from the sizeMap\n    const keyIndex = sizeMap.indexes[key]\n\n    if (!softFalsy(keyIndex))\n      return logData(\n        `Invalid ${key} for theme size! Allowed keys are xsmall | small | medium | large | xlarge`,\n        'warn'\n      )\n\n    // Convert the value to an integer, just a helper incase value is a string\n    const newSize = toNum(dims[key])\n\n    // Ensure key is a valid key in the sizeMap indexes and the new size is a valid number\n    // Also ensure the entry exists based on the keyIndex\n    //  * This should never happen, but just incase\n    if (!newSize || !sizeMap.entries[keyIndex])\n      return logData(\n        `Invalid size entry. Size must be a number and the size entry must exist!`,\n        `Size: ${newSize}`,\n        `Entry: ${sizeMap.entries[keyIndex]}`,\n        'warn'\n      )\n\n    // Use the keyIndex to find the entry\n    // Set the value to be an entry with key and new size\n    sizeMap.entries[keyIndex] = [ key, newSize ]\n  })\n\n  // Rebuild the sizeMap parts after updating the dimensions\n  buildSizeMapParts()\n\n  return sizeMap\n}\n\n/**\n * Helper to get the a size from the sizeMap based on the passed in width\n * @function\n * @param {string|number} width - number to find the size from\n *\n * @returns {Array} [ currentSizeKey, hashForKey ]\n */\nexport const getSize = width => {\n  // Ensure width is a number that can be compared\n  const checkWidth = (isNum(width) && width) || toNum(width)\n\n  const name = sizeMap.entries.reduce((updateSize, [ key, value ]) => {\n    checkWidth >= value\n      ? // If it is check if there is an updateSize already sent\n      updateSize\n        ? // If an update size exists, then check if it's value is less then value\n        value > sizeMap.hash[updateSize] && (updateSize = key)\n        : // Otherwise just update the size\n          (updateSize = key)\n      : null\n\n    return updateSize\n\n    // Default to xsmall size\n  }, '$xsmall')\n\n  return [ name, sizeMap.hash[name] ]\n}\n\n/**\n * Get an array of all sizes to be merged together\n * @function\n * @param {string} key - Name of the size\n *\n * @returns {Array} - [\n *   Array of size key names,\n *   Array of unused size key names\n * ]\n *\n * @example\n * const [ keys, unused ] = getMergeSizes('$medium')\n * console.log(keys) -> [ '$medium', '$small', '$xsmall' ]\n * console.log(unused) -> [ '$large' ]\n */\nexport const getMergeSizes = key => {\n  const keys = Object.keys(sizeMap.hash)\n  const keyIndex = keys.indexOf(key)\n  return [ keys.slice(0, keyIndex + 1), keys.slice(keyIndex + 1) ]\n}\n\n// Build the default sizeMap parts\nbuildSizeMapParts()\n\n/**\n * Get the sizeMap object\n * @function\n *\n * @returns {Object} - built sizeMap object\n */\nexport const getSizeMap = () => sizeMap\n","let RNDimensions\n\nconst loadReactNativeDimensions = () => {\n  const { Dimensions } = require('react-native')\n  return Dimensions\n}\n\nconst checkDimensions = callBack => {\n  return (...props) => {\n    RNDimensions = RNDimensions || loadReactNativeDimensions()\n\n    return RNDimensions\n      ? callBack(...props)\n      : console.error(\n        `[ ReTheme ERROR ] - Missing Dimensions`,\n        `\\n   - You must initialize 'Dimensions' before using the 'ReThemeProvider'`,\n        `\\n   - Do this by calling 'setRNDimensions(Dimensions)'`,\n        `\\n   - The first argument must be the 'Dimensions' export of 'react-native'`,\n        `\\n   - Or an Object with a matching API`\n      )\n  }\n}\n\nexport const setRNDimensions = dims => (RNDimensions = dims)\n\nexport const Dimensions = {\n  get: checkDimensions((...params) => {\n    return RNDimensions ? RNDimensions.get(...params) : { width: 0, height: 0 }\n  }),\n  set: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.set(...params)\n  }),\n  update: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.update(...params)\n  }),\n  addEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.addEventListener(...params)\n  }),\n  removeEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.removeEventListener(...params)\n  }),\n}\n","/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","import { getDefaultPlatforms } from '../theme/getDefaultPlatforms'\nimport { Constants } from '../constants'\nconst PLATFORM = Constants.PLATFORM\n\n/**\n * Returns arrays of the active and inactive platforms\n * @returns {Array} [ activePlatforms, inactivePlatforms ]\n */\nexport const getPlatforms = () => {\n  const active = getDefaultPlatforms()\n  const inactive = Object.values(PLATFORM).filter(key => !active.includes(key))\n\n  return [ active, inactive ]\n}\n","/** @module theme */\n'use strict'\n\nimport { Constants } from '../constants'\nimport { getRNPlatform } from 'RePlatform'\nimport { get } from '@keg-hub/jsutils'\n\n// Default platforms to use when restructuring the theme\n// Use array, so we don't lose the order\nexport const getDefaultPlatforms = () => {\n  const Platform = getRNPlatform()\n\n  const osPlatform = get(Platform, 'OS')\n\n  // Rules for the OS platform ( web || ios || android )\n  const stylePlatforms = []\n\n  // If it's not a web platform, then add the $native platform\n  if (osPlatform !== 'web') stylePlatforms.push('$native')\n\n  // push current platform\n  stylePlatforms.push('$' + osPlatform)\n\n  // Rules for all platforms and os's\n  return [Constants.PLATFORM.ALL].concat(stylePlatforms)\n}\n","import { deepMerge, get, isArr, isObj, isStr } from '@keg-hub/jsutils'\nimport { getCurrentTheme } from '../theme/manageTheme'\n\n/**\n * Merges the styles from the passed in sources\n * @param {Array} sources - An array of strings, arrays or objects\n *                          If it's a string or array, it searches the theme using get\n *                          If it's a object, it merges it with the other found objects\n *\n * @returns {Object} - built theme styles object\n */\nexport const getTheme = function (...sources) {\n  const theme = getCurrentTheme()\n\n  // Build the styles by merging the sources together\n  // Check if each source is an id to cache or get the styles from the theme\n  return deepMerge(\n    ...sources.reduce((toMerge, source) => {\n      const styles = isObj(source)\n        ? source\n        : isStr(source) || isArr(source)\n          ? get(theme, source)\n          : null\n\n      styles && toMerge.push(styles)\n\n      return toMerge\n    }, [])\n  )\n}\n","import { isObj, deepMerge, isArr } from '@keg-hub/jsutils'\nimport { getPlatforms } from './getPlatforms'\nimport { getSize, getMergeSizes } from '../dimensions'\nimport { getTheme } from './getTheme'\nimport { ruleHelpers } from '../constants/ruleHelpers'\n\n/**\n * Helper for compileStyles\n * @param {Object} obj\n * @param {string} key\n * @returns {Object} obj with all the properties located under obj.key merged to the root of obj, and key removed\n * @example\n * const a = { a: 0, b: { c: 10, d: 11 }}\n * extract(a, 'b') => { a: 0, c: 10, d: 11 }\n */\nconst extract = (obj, key) => {\n  if (!obj[key]) return obj\n  const props = obj[key]\n  delete obj[key]\n  return deepMerge(obj, props)\n}\n\n/**\n * Compiles the styles object given the active platforms, sizes, and keys to omit\n * @param {Object} styles\n * @param {Array<string>} params.platforms - platforms to compile\n * @param {Array<string>} params.sizes - sizes to compile\n * @param {Array<string>} params.omit - dynamic keys to ignore\n * @param {Object} params.aliases - optional alias map for style rules, defaults to constants.ruleHelpers\n * @returns {Object} compiled stlyes\n */\nexport const compileStyles = (stylesData, params = {}) => {\n  const styles =\n    isArr(stylesData) && stylesData.length\n      ? deepMerge(...stylesData)\n      : stylesData\n\n  if (!isObj(styles)) return stylesData\n\n  const { platforms, sizes, omit, aliases = ruleHelpers } = params\n\n  // filter out unused keys, compile aliases, and move all active size-styles\n  // into buckets at root of object\n  const structured = Object.entries(styles).reduce((acc, [ key, value ]) => {\n    if (platforms.includes(key) || sizes.includes(key)) {\n      // compile the styles defined by `key`, then merge them with\n      // all previous compiled styles identified by the same key\n      acc[key] = {\n        ...acc[key],\n        ...compileStyles(value, params),\n      }\n    }\n    else if (!omit.includes(key)) {\n      // convert shortcut keys, if used (e.g. m => margin)\n      // then add the entry to the compiled styles object\n      const trueKey = aliases[key] || key\n      acc[trueKey] = isObj(value)\n        ? { ...acc[trueKey], ...compileStyles(value, params) }\n        : value\n    }\n\n    return acc\n  }, {})\n\n  // sizes and platforms have a precedence order, determined by\n  // the order of keys in `platforms` and `sizes` (from least-specific to most).\n  // So remove the dynamic keys, in precedence order, and merge their values\n  // with the final styles object in that order\n  const fromPlatforms = platforms.reduce(extract, structured)\n  const fromSizes = sizes.reduce(extract, fromPlatforms)\n  return fromSizes\n}\n\n/**\n * Compiles styles for current platform and the specified width + height\n * - Mainly a helper for unit tests\n * @param {Object} styles\n * @param {Number} width\n * @param {Number} height\n * @param {Boolean} withMeta\n * @returns {Object} compiled styles\n */\nexport const compileStylesForState = (styles, width, height, withMeta) => {\n  const [ platforms, inactivePlatforms ] = getPlatforms()\n  const [ sizeKey, widthForKey ] = getSize(width)\n  const [ activeSizes, inactiveSizes ] = getMergeSizes(sizeKey) || []\n  const keysToIgnore = inactivePlatforms.concat(inactiveSizes)\n\n  const compiled = compileStyles(styles, {\n    platforms,\n    sizes: activeSizes,\n    omit: keysToIgnore,\n  })\n\n  if (withMeta) {\n    compiled.RTMeta = {\n      key: sizeKey,\n      size: widthForKey,\n      width: width,\n      height: height,\n    }\n    compiled.get = getTheme\n  }\n  return compiled\n}\n","import { useMemo } from 'react'\nimport { noPropArr } from '@keg-hub/jsutils'\nimport { useDimensions, getMergeSizes, getSize } from '../dimensions'\nimport { compileStyles } from '../helpers/compileStyles'\nimport { getTheme } from '../helpers/getTheme'\nimport { getPlatforms } from '../helpers/getPlatforms'\n\n/**\n * *(useCompiledStyles helper)*\n * @returns {string} size key for current screen width\n */\nconst useCurrentSize = () => {\n  const dimensions = useDimensions()\n  const [ activeSizeKey, widthForSize ] = useMemo(\n    () => getSize(dimensions.width),\n    [dimensions.width]\n  )\n  return [ activeSizeKey, widthForSize, dimensions ]\n}\n\n/**\n * Returns arrays of the active and inactive platforms\n * @returns {Array} [ activePlatforms, inactivePlatforms ]\n */\nconst usePlatforms = () => useMemo(() => getPlatforms(), [])\n\n/**\n * Takes in dynamic styles and outputs the compiled styles. Used by `reStyle`\n * @param {Object} dynamicStyles - styles object that can contains size and platform keys,\n *  in addition to style rule shortcuts\n * @param {Boolean} withMeta - if true, adds a theme `get()` method and the `RTMeta` property to the returned styles object\n * @returns {Object} the compiled styles object to be passed to a react or DOM element\n */\nexport const useCompiledStyles = (dynamicStyles, withMeta = false) => {\n  const [ platforms, unusedPlatforms ] = usePlatforms()\n\n  const [ activeSizeKey, keyWidth, { width, height }] = useCurrentSize()\n  const [ activeSizes, inactiveSizes ] = useMemo(\n    () => getMergeSizes(activeSizeKey) || noPropArr,\n    [activeSizeKey]\n  )\n\n  const keysToIgnore = useMemo(\n    () => unusedPlatforms.concat(inactiveSizes),\n    [ unusedPlatforms, inactiveSizes ]\n  )\n\n  const RTMeta = useMemo(\n    () =>\n      withMeta\n        ? {\n            key: activeSizeKey,\n            size: keyWidth,\n            width,\n            height,\n          }\n        : null,\n    [ activeSizeKey, keyWidth, width, height ]\n  )\n\n  const compiled = useMemo(\n    () =>\n      compileStyles(dynamicStyles, {\n        platforms,\n        sizes: activeSizes,\n        omit: keysToIgnore,\n      }),\n    [ dynamicStyles, platforms, activeSizeKey ]\n  )\n\n  if (withMeta) {\n    compiled.get = getTheme\n    compiled.RTMeta = RTMeta\n  }\n\n  return compiled\n}\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ReThemeContext } from './reThemeContext'\nimport { getDefaultTheme } from '../theme'\nimport { updateCurrentTheme } from '../theme/manageTheme'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { fireThemeEvent } from '../theme/themeEvent'\nimport { Constants } from '../constants'\nimport { useCompiledStyles } from '../hooks/useCompiledStyles'\n\n/**\n * If merge is true, then deep-merges `theme` with the default theme,\n * if it has been set with `setDefaultTheme`\n * @param {Object} theme\n * @param {Boolean} merge\n * @returns\n */\nconst useDefaultThemeMerge = (theme, merge) =>\n  useMemo(() => {\n    if (!merge) return theme\n    const defaultTheme = getDefaultTheme()\n    return defaultTheme && defaultTheme !== theme\n      ? deepMerge(defaultTheme, theme)\n      : theme\n  }, [ theme, merge ])\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  const themeToBuild = useDefaultThemeMerge(theme, merge)\n  const builtTheme = useCompiledStyles(themeToBuild, true)\n\n  updateCurrentTheme(builtTheme)\n\n  useEffect(\n    () => void fireThemeEvent(Constants.BUILD_EVENT, builtTheme),\n    [builtTheme]\n  )\n\n  return (\n    <ReThemeContext.Provider value={builtTheme}>\n      { children }\n    </ReThemeContext.Provider>\n  )\n}\n\nReThemeProvider.propTypes = {\n  /**\n  Global defined Application theme\n  */\n  theme: PropTypes.object.isRequired,\n  /**\n  Should merge passed in theme prop with the current theme\n  */\n  merge: PropTypes.bool,\n  /**\n  Custom theme platform to use for the current context\n  */\n  platforms: PropTypes.array,\n  /**\n   Child components to wrap the with ReTheme provider\n  */\n  children: PropTypes.node,\n}\n","import { isObj } from '@keg-hub/jsutils'\n\n/**\n * Default platform used for a web-app\n * @Object\n */\nconst webDefPlatform = {\n  OS: 'web',\n  select: obj => isObj(obj) && obj.web,\n  Version: 'ReTheme',\n}\n\nlet RNPlatform\n\n/**\n * Gets the set platform object, or the default platform\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst getRNPlatform = () => {\n  return RNPlatform || webDefPlatform\n}\n\n/**\n * Sets the platform object used when building the theme\n * @function\n * @param {Object} Plat - Platform object to use\n *\n * @return {void}\n */\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","let RNDimensions\n\nconst loadReactNativeDimensions = () => {\n  const { Dimensions } = require('react-native')\n  return Dimensions\n}\n\nconst checkDimensions = callBack => {\n  return (...props) => {\n    RNDimensions = RNDimensions || loadReactNativeDimensions()\n\n    return RNDimensions\n      ? callBack(...props)\n      : console.error(\n        `[ ReTheme ERROR ] - Missing Dimensions`,\n        `\\n   - You must initialize 'Dimensions' before using the 'ReThemeProvider'`,\n        `\\n   - Do this by calling 'setRNDimensions(Dimensions)'`,\n        `\\n   - The first argument must be the 'Dimensions' export of 'react-native'`,\n        `\\n   - Or an Object with a matching API`\n      )\n  }\n}\n\nexport const setRNDimensions = dims => (RNDimensions = dims)\n\nexport const Dimensions = {\n  get: checkDimensions((...params) => {\n    return RNDimensions ? RNDimensions.get(...params) : { width: 0, height: 0 }\n  }),\n  set: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.set(...params)\n  }),\n  update: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.update(...params)\n  }),\n  addEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.addEventListener(...params)\n  }),\n  removeEventListener: checkDimensions((...params) => {\n    RNDimensions && RNDimensions.removeEventListener(...params)\n  }),\n}\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport {\n  checkCall,\n  isObj,\n  isEmptyColl,\n  noPropObj,\n  noPropArr,\n} from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} [cbDependencies=[]] - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n *\n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (\n  stylesCb,\n  cbDependencies = noPropArr,\n  customStyles\n) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies)\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(\n    () => checkCall(cb, theme, styles, ...cbDependencies) || noPropObj,\n    [ theme, cb, styles ]\n  )\n}\n","/** @module hooks */\n\nimport { useMemo } from 'react'\nimport { useTheme } from './useTheme'\nimport { noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Merges styles defined by styleArgs into a memoized style object\n * @param  {...(string | Object)} styleArgs - any number of strings or style objects. Strings are expected to be theme paths, which will be used to get the associated theme object for that path.\n * @returns {Object} - result of merging style objects\n * @example\n * const textStyles = useStyle('todos.text', textStylesObject)\n * const myStyles = useStyle(\n *  'settings.button',\n *  { main: { margin: 5 }},\n *  inputStyles,\n *  'someOtherPath.button'\n * )\n */\nexport const useStyle = (...styleArgs) => {\n  const theme = useTheme()\n  return useMemo(\n    () => theme.get(...styleArgs) || noPropObj,\n    [ theme, ...styleArgs ]\n  )\n}\n","import { useRef, useState, useLayoutEffect } from 'react'\nimport { get, shallowEqual, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Checks it two passed in objects are equal pointers or equal as json strings\n * @param {Object} obj1 - Object to check\n * @param {Object} obj2 - Object to check\n *\n * @returns {boolean} - If objects are equal\n */\nconst checkEqual = (obj1, obj2) => obj1 === obj2 || shallowEqual(obj1, obj2)\n\n/**\n * Placeholder hook when on native device\n * @param {Object} offValue - When on native, this theme will always be used\n * @param {Object} onValue - Active theme, only used when on web\n * @param {Object} options - Options object that could hold am element ref\n *\n * @returns {Array} - Hook formatted array, same as on web\n */\nexport const nativeThemeHook = (offValue, onValue, options) => {\n  // Get the ref object\n  const hookRef = get(options, 'ref', useRef())\n\n  // Set the default value\n  const [ value, setValue ] = useState(offValue)\n\n  useLayoutEffect(() => {\n    !checkEqual(offValue, value) && setValue(value)\n  }, [ offValue, onValue ])\n\n  // Return an array matching the same format as on web\n  return [ hookRef, offValue, setValue ]\n}\n\n/**\n * Placeholder hook when on native device\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track. Must be one of hover, active, or focus\n *\n * @return {Object} - States of the pointed relative to the passed in pointerState\n */\nexport const usePointerState = (options = noOpObj) => ({\n  hover: false,\n  focus: false,\n  active: false,\n  events: noOpObj,\n  ref: options.ref,\n})\n"],"names":["RNPlatform","Constants","deepFreeze","BUILD_EVENT","CHANGE_EVENT","RESIZE_EVENT","ADD_EVENT","REMOVE_EVENT","KEG_STYLES_TAG_ID","PLATFORM","NATIVE","IOS","android","WEB","ALL","ruleHelpers","m","mT","mB","mR","mL","mH","mV","p","pT","pB","pR","pL","pH","pV","bC","bW","bS","getRNPlatform","Platform","require","listeners","addThemeEvent","event","listener","isFunc","push","length","removeThemeEvent","removeListener","isNum","splice","isArr","filter","fireThemeEvent","params","forEach","withTheme","Component","props","React","ReThemeContext","Consumer","value","theme","currentTheme","getCurrentTheme","sizeMap","entries","hash","indexes","buildSizeMapParts","reduce","entry","index","setSizes","dims","isObj","mapObj","key","keyIndex","softFalsy","logData","newSize","toNum","getSize","width","checkWidth","name","updateSize","getMergeSizes","keys","Object","indexOf","slice","RNDimensions","getSizeMap","loadReactNativeDimensions","Dimensions","checkDimensions","callBack","console","error","get","height","set","update","addEventListener","removeEventListener","useDimensions","useState","dimensions","setDimensions","onChange","win","window","scale","fontScale","useEffect","shouldUnmount","getPlatforms","osPlatform","stylePlatforms","active","concat","inactive","values","includes","getTheme","sources","deepMerge","toMerge","source","styles","isStr","extract","obj","compileStyles","stylesData","platforms","sizes","omit","aliases","structured","acc","trueKey","fromPlatforms","fromSizes","useCurrentSize","useMemo","usePlatforms","ReThemeProvider","children","doMerge","merge","builtTheme","dynamicStyles","withMeta","unusedPlatforms","activeSizeKey","keyWidth","noPropArr","activeSizes","inactiveSizes","keysToIgnore","RTMeta","size","compiled","useCompiledStyles","defaultTheme","getDefaultTheme","useDefaultThemeMerge","Boolean","Provider","setRNPlatform","Plat","setRNDimensions","useStylesCallback","stylesCb","cbDependencies","customStyles","cb","useCallback","useTheme","isEmptyColl","checkCall","noPropObj","useStyle","styleArgs","nativeThemeHook","offValue","onValue","options","hookRef","useRef","setValue","useLayoutEffect","obj1","obj2","shallowEqual","usePointerState","noOpObj","hover","focus","events","ref"],"mappings":"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"}