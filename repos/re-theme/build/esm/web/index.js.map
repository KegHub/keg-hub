{"version":3,"file":"index.js","sources":["../../../src/hooks/usePointerState.js","../../../src/dimensions/dimensions.js","../../../src/theme/withTheme.js","../../../src/context/reThemeProvider.js","../../../src/context/platform.js","../../../src/hooks/useStylesCallback.js","../../../src/hooks/useThemeState.js","../../../src/hooks/useThemeHover.js","../../../src/hooks/useThemeActive.js","../../../src/hooks/useThemeFocus.js","../../../src/hooks/useStyle.js"],"sourcesContent":["import { useRef, useState, useMemo, useCallback, useEffect } from 'react'\nimport { checkCall, hasDomAccess, isFunc, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Tracks if the hover pointer state can be enabled\n * @type boolean\n */\nlet isHoverEnabled = false\n\n/**\n * Adds mouse event listeners to the document for tracking hover state\n * Uses mouse move event to enable when hover is enabled\n * @type function\n *\n * @returns {void}\n */\nconst setDomListeners = () => {\n  /**\n   * This code checks for mouse movement that occurs more than 1 second after the last touch event.\n   * This threshold is long enough to account for longer delays between the\n   * browser firing touch AND mouse events on low-powered devices\n   */\n  const HOVER_THRESHOLD_MS = 1000\n  let lastTouchTimestamp = 0\n\n  const enableHover = () => {\n    !isHoverEnabled &&\n      Date.now() - lastTouchTimestamp > HOVER_THRESHOLD_MS &&\n      (isHoverEnabled = true)\n  }\n\n  const disableHover = () => {\n    lastTouchTimestamp = Date.now()\n    isHoverEnabled && (isHoverEnabled = false)\n  }\n\n  document.addEventListener('touchstart', disableHover, true)\n  document.addEventListener('touchmove', disableHover, true)\n  document.addEventListener('mousemove', enableHover, true)\n}\n\nhasDomAccess() && setDomListeners()\n\n/**\n * Builds event listeners and state for an element based on the pointerState to track\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n *\n * @return {Object} - Current state of the pointerState being tracked, and event listeners to be attached to the element\n */\nconst useEventCallBacks = ({\n  pointerState,\n  onEvent,\n  offEvent,\n  onName,\n  offName,\n}) => {\n  const [ status, setStatus ] = useState(false)\n\n  const handleOff = useCallback(\n    event => {\n      checkCall(offEvent, event)\n      setStatus(false)\n    },\n    [ status, setStatus, offEvent ]\n  )\n\n  const handleOn = useCallback(\n    event => {\n      // For hover events we need to check if hover is enabled\n      if (pointerState === 'hover' && !isHoverEnabled) return\n\n      checkCall(onEvent, event)\n      setStatus(true)\n\n      // For active events, we need to attach the mouseup listener to the document, so it always gets called on mouse up\n      pointerState === 'active' &&\n        document.addEventListener(offName, handleOff, { once: true })\n    },\n    [ pointerState, status, setStatus, onEvent ]\n  )\n\n  return {\n    [pointerState]: status,\n    [onName]: handleOn,\n    [offName]: handleOff,\n  }\n}\n\n/**\n * Builds all element event listeners to track updates to the mouse state\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track\n *\n * @return {Object} - Contains mouse states, and event listeners functions\n */\nconst useElementEvents = (options = noOpObj, pointerState) => {\n  const {\n    hover = false,\n    onPointerIn,\n    onPointerOut,\n  } = pointerState === 'hover'\n    ? useEventCallBacks({\n      pointerState,\n      onName: 'onPointerIn',\n      offName: 'onPointerOut',\n      onEvent: options.onPointerIn,\n      offEvent: options.onPointerOut,\n    })\n    : noOpObj\n\n  const {\n    focus = false,\n    onFocus,\n    onBlur,\n  } = pointerState === 'focus'\n    ? useEventCallBacks({\n      pointerState,\n      onName: 'onFocus',\n      offName: 'onBlur',\n      onEvent: options.onFocus,\n      offEvent: options.onBlur,\n    })\n    : noOpObj\n\n  const { active = false, onPointerDown } =\n    pointerState === 'active'\n      ? useEventCallBacks({\n        pointerState,\n        onName: 'onPointerDown',\n        offName: 'mouseup',\n        onEvent: options.onPointerDown,\n        offEvent: options.onMouseUp,\n      })\n      : noOpObj\n\n  return useMemo(() => {\n    // Get the events to be returned based on the pointerState\n    // Use the Dom event names, NOT the react event names,\n    // because these events are directly added to the element through the Dom API\n    const events =\n      pointerState === 'hover'\n        ? { pointerover: onPointerIn, pointerout: onPointerOut }\n        : pointerState === 'focus'\n          ? { focus: onFocus, blur: onBlur }\n          : { pointerdown: onPointerDown }\n\n    return {\n      active,\n      focus,\n      hover,\n      events,\n    }\n  }, [\n    active,\n    focus,\n    hover,\n    onBlur,\n    onFocus,\n    onPointerDown,\n    onPointerIn,\n    onPointerOut,\n    options.ref,\n    pointerState,\n  ])\n}\n\n/**\n * Loops over the passed in events and adds or removes them from the passed in element\n * @type function\n * @param {Dom Element} element - Element to attach mouse events to\n * @param {Object} events - Dom events to attach to the element\n * @param {string} method - Name of the method used to update events on the element\n *\n * @return {void}\n */\nconst loopElementEvents = (element, events, method) => {\n  Object.entries(events).map(([ eventName, action ]) =>\n    element[method](eventName, action)\n  )\n}\n\n/**\n * Creates a callback ref to get access to the Element from a ref\n * @type function\n * @param {Object} passedRef - Custom react ref to allow reusing a Ref on a component\n * @param {Object} events - Dom events to attach to the element obtained from the ref\n *\n * @return {function} - callbackRef to apply to the element to be tracked\n */\nconst createCBRef = (passedRef, events) => {\n  const elementRef = useRef(null)\n\n  /**\n   * Creates a ref as a function, to be passed as a prop to the element being tracked\n   * <br/>Also checks for a custom ref and updates it if needed\n   */\n  const callbackRef = useCallback(\n    element => {\n      elementRef.current = element\n\n      isFunc(passedRef)\n        ? passedRef(element)\n        : passedRef && (passedRef.current = element)\n    },\n    [ elementRef.current, passedRef, passedRef.current ]\n  )\n\n  /**\n   * Hooks that Ensure the event listeners are added to the dom element\n   * <br/>Also removes them when the element is removed\n   */\n  useEffect(() => {\n    elementRef.current &&\n      loopElementEvents(elementRef.current, events, 'addEventListener')\n\n    return () => {\n      elementRef.current &&\n        loopElementEvents(elementRef.current, events, 'removeEventListener')\n    }\n  }, [ elementRef.current, events ])\n\n  return callbackRef\n}\n\n/**\n * Gets the current state of the pointer / mouse\n * @type function\n * @param {Object} options - Contains callbacks and refs for the pointerState\n * @param {string} pointerState - pointer state to track. Must be one of hover, active, or focus\n *\n * @return {Object} - States of the pointed relative to the passed in pointerState\n */\nexport const usePointerState = (options = noOpObj, pointerState) => {\n  const { events, hover, active, focus } = useElementEvents(\n    options,\n    pointerState\n  )\n\n  return {\n    hover,\n    focus,\n    active,\n    events,\n    ref: createCBRef(options.ref, events),\n  }\n}\n","export { Dimensions } from './webDimensions'\nexport const setRNDimensions = dims => {}\n","/** @module theme */\n'use strict'\n\nimport React from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Adds the theme, merge and dimensions props from the Context to the passed in components' props\n * @param {*} Component\n *\n * @returns {Class} - React Component wrapping the Context Consumer and the passed in component\n */\nexport const withTheme = Component => {\n  return props => {\n    return (\n      <ReThemeContext.Consumer>\n        { value => {\n          return <Component\n            theme={value}\n            {...props}\n          />\n        } }\n      </ReThemeContext.Consumer>\n    )\n  }\n}\n","/** @module context */\n'use strict'\n\nimport React, { useEffect, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { ReThemeContext } from './reThemeContext'\nimport { getDefaultTheme } from '../theme'\nimport { updateCurrentTheme } from '../theme/manageTheme'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { fireThemeEvent } from '../theme/themeEvent'\nimport { Constants } from '../constants'\nimport { useCompiledStyles } from '../hooks/useCompiledStyles'\n\n/**\n * If merge is true, then deep-merges `theme` with the default theme,\n * if it has been set with `setDefaultTheme`\n * @param {Object} theme\n * @param {Boolean} merge\n * @returns\n */\nconst useDefaultThemeMerge = (theme, merge) =>\n  useMemo(() => {\n    if (!merge) return theme\n    const defaultTheme = getDefaultTheme()\n    return defaultTheme && defaultTheme !== theme\n      ? deepMerge(defaultTheme, theme)\n      : theme\n  }, [ theme, merge ])\n\n/**\n * Context Provider used to set the theme.\n * <br/> All children that use the withTheme function will have access to the passed in theme prop\n * @param {Object} props - Theme provider props\n * @param {Object|Array} props.children - Child components to wrap the with theme provider\n * @param {Object} props.theme - User defined theme\n * @param {boolean} props.merge - Should merge user theme with default theme\n *\n * @returns {Component|Object} - ReThemeContext.Provider - Provides the theme to the Context consumer\n */\nexport const ReThemeProvider = props => {\n  const { children, theme, merge: doMerge } = props\n  const merge = Boolean(doMerge || (!doMerge && doMerge !== false)) || false\n\n  const themeToBuild = useDefaultThemeMerge(theme, merge)\n  const builtTheme = useCompiledStyles(themeToBuild, true)\n\n  updateCurrentTheme(builtTheme)\n\n  useEffect(\n    () => void fireThemeEvent(Constants.BUILD_EVENT, builtTheme),\n    [builtTheme]\n  )\n\n  return (\n    <ReThemeContext.Provider value={builtTheme}>\n      { children }\n    </ReThemeContext.Provider>\n  )\n}\n\nReThemeProvider.propTypes = {\n  /**\n  Global defined Application theme\n  */\n  theme: PropTypes.object.isRequired,\n  /**\n  Should merge passed in theme prop with the current theme\n  */\n  merge: PropTypes.bool,\n  /**\n  Custom theme platform to use for the current context\n  */\n  platforms: PropTypes.array,\n  /**\n   Child components to wrap the with ReTheme provider\n  */\n  children: PropTypes.node,\n}\n","import { isObj } from '@keg-hub/jsutils'\n\n/**\n * Default platform used for a web-app\n * @Object\n */\nconst webDefPlatform = {\n  OS: 'web',\n  select: obj => isObj(obj) && obj.web,\n  Version: 'ReTheme',\n}\n\nlet RNPlatform\n\n/**\n * Gets the set platform object, or the default platform\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst getRNPlatform = () => {\n  return RNPlatform || webDefPlatform\n}\n\n/**\n * Sets the platform object used when building the theme\n * @function\n * @param {Object} Plat - Platform object to use\n *\n * @return {void}\n */\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","import { useMemo, useCallback } from 'react'\nimport { useTheme } from './useTheme'\nimport {\n  checkCall,\n  isObj,\n  isEmptyColl,\n  noPropObj,\n  noPropArr,\n} from '@keg-hub/jsutils'\n\n/**\n * Create a custom hook for building the styles that are memoized\n * @example\n * const buildStyles = (theme) => {\n *   return {\n *     main: { flexDirection: 'column', ...margin },\n *     button: { main: margin },\n *   }\n * }\n *\n * const styles = useStylesCallback(buildStyles)\n *\n * @param {function} stylesCb - Callback function to build the styles\n * @param {Array} [cbDependencies=[]] - List of dependencies passed to useCallback hook for the stylesCb\n * @param {Object} [customStyles={}] - Custom styles to pass to the styles callback\n *\n * @returns { Object } - Current theme\n */\nexport const useStylesCallback = (\n  stylesCb,\n  cbDependencies = noPropArr,\n  customStyles\n) => {\n  // Memorize the passed in callback\n  const cb = useCallback(stylesCb, cbDependencies)\n\n  // Get the theme object to pass to the styles callback\n  const theme = useTheme()\n\n  // Ensure the custom styles is real styles object\n  const styles =\n    !customStyles || !isObj(customStyles) || isEmptyColl(customStyles)\n      ? false\n      : customStyles\n\n  // Use the useMemo hook to memoize the call to the stylesCb\n  return useMemo(\n    () => checkCall(cb, theme, styles, ...cbDependencies) || noPropObj,\n    [ theme, cb, styles ]\n  )\n}\n","/** @module hooks */\n\nimport { useRef, useMemo } from 'react'\nimport { deepMerge } from '@keg-hub/jsutils'\nimport { usePointerState } from './usePointerState'\n\n/**\n * Returns the offValue or onValue based on the passed in compareState\n * @param {*} offValue - return when compareState is false\n * @param {*} onValue - return when compareState is true\n * @param {boolean} noMerge - Should the offValue and onValue be merged\n * @param {boolean} compareState - Current state to check\n *\n * @return {*} offValue, onValue or merged values based on the compareState\n */\nconst useCompareState = (offValue, onValue, noMerge, compareState) => {\n  return useMemo(() => {\n    return compareState\n      ? noMerge\n        ? onValue\n        : deepMerge(offValue, onValue)\n      : offValue\n  }, [ offValue, onValue, noMerge, compareState ])\n}\n\n/**\n * Wrapper helper to build hooks for tracking mouse state\n * @param {string} pointerState - State the should be tracked. Must be one of hover, active, or focus\n *\n * @returns {function} - React hook function to track the state\n */\nexport const useThemeState = pointerState => {\n  /**\n   * Tracks the state of the mouse\n   * @param {*} offValue - Value to return when the state is off\n   * @param {*} onValue - Value to return when the state is on\n   * @param {Object} options - Settings to manage the hook\n   * @param {Object|function} options.ref - Custom react ref to allow reusing a Ref on a component\n   * @param {Object|function} options.noMerge - The offValue and onValue should NOT be merged when the internal pointer state is true\n   *                                            Defaults to true, which matches the default CSS spec of hover / active / focus states\n   *\n   * @returns {Array} - Ref and styles to be applied to the element\n   */\n  return (offValue, onValue, options = {}) => {\n    const defaultRef = useRef(null)\n    const currentState = usePointerState(\n      {\n        ...options,\n        ref: options.ref || defaultRef,\n      },\n      pointerState\n    )\n\n    const pointerRef = currentState.ref\n    const compareState = currentState[pointerState]\n    const themeStyles = useCompareState(\n      offValue,\n      onValue,\n      Boolean(options.noMerge),\n      compareState\n    )\n\n    return [ pointerRef, themeStyles ]\n  }\n}\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeHover hook based on the 'pointerover' and 'pointerout' events\n */\nexport const useThemeHover = useThemeState('hover')\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeActive hook based on the 'mousedown' and 'mouseup' events\n */\nexport const useThemeActive = useThemeState('active')\n","/** @module hooks */\n\nimport { useThemeState } from './useThemeState'\n\n/**\n * Creates an useThemeFocus hook based on the 'focus' and 'blur' events\n */\nexport const useThemeFocus = useThemeState('focus')\n","/** @module hooks */\n\nimport { useMemo } from 'react'\nimport { useTheme } from './useTheme'\nimport { noPropObj } from '@keg-hub/jsutils'\n\n/**\n * Merges styles defined by styleArgs into a memoized style object\n * @param  {...(string | Object)} styleArgs - any number of strings or style objects. Strings are expected to be theme paths, which will be used to get the associated theme object for that path.\n * @returns {Object} - result of merging style objects\n * @example\n * const textStyles = useStyle('todos.text', textStylesObject)\n * const myStyles = useStyle(\n *  'settings.button',\n *  { main: { margin: 5 }},\n *  inputStyles,\n *  'someOtherPath.button'\n * )\n */\nexport const useStyle = (...styleArgs) => {\n  const theme = useTheme()\n  return useMemo(\n    () => theme.get(...styleArgs) || noPropObj,\n    [ theme, ...styleArgs ]\n  )\n}\n"],"names":["lastTouchTimestamp","disableHover","setRNDimensions","dims","withTheme","Component","props","React","ReThemeContext","Consumer","value","theme","ReThemeProvider","children","doMerge","merge","themeToBuild","useMemo","defaultTheme","getDefaultTheme","deepMerge","useDefaultThemeMerge","Boolean","builtTheme","useCompiledStyles","updateCurrentTheme","useEffect","fireThemeEvent","Constants","BUILD_EVENT","Provider","setRNPlatform","Plat","isHoverEnabled","hasDomAccess","Date","now","document","addEventListener","useEventCallBacks","pointerState","onEvent","offEvent","onName","offName","useState","status","setStatus","handleOff","useCallback","event","checkCall","handleOn","once","useElementEvents","options","noOpObj","onPointerIn","onPointerOut","hover","onFocus","onBlur","focus","onPointerDown","onMouseUp","active","events","pointerover","pointerout","blur","pointerdown","ref","loopElementEvents","element","method","Object","entries","map","eventName","action","createCBRef","passedRef","elementRef","useRef","callbackRef","current","isFunc","usePointerState","useStylesCallback","stylesCb","cbDependencies","noPropArr","customStyles","cb","useTheme","styles","isObj","isEmptyColl","noPropObj","useCompareState","offValue","onValue","noMerge","compareState","useThemeState","defaultRef","currentState","pointerRef","themeStyles","useThemeHover","useThemeActive","useThemeFocus","useStyle","styleArgs","get"],"mappings":"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"}