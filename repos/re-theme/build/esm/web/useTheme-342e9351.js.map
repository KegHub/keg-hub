{"version":3,"file":"useTheme-342e9351.js","sources":["../../../src/constants/constants.js","../../../src/constants/ruleHelpers.js","../../../src/dimensions/webDimensions.js","../../../src/theme/default.js","../../../src/context/reThemeContext.js","../../../src/context/platform.js","../../../src/theme/getDefaultPlatforms.js","../../../src/theme/themeEvent.js","../../../src/theme/manageTheme.js","../../../src/dimensions/sizeMap.js","../../../src/dimensions/useDimensions.js","../../../src/helpers/getPlatforms.js","../../../src/helpers/getTheme.js","../../../src/helpers/compileStyles.js","../../../src/hooks/useCompiledStyles.js","../../../src/hooks/useTheme.js"],"sourcesContent":["import { deepFreeze } from '@keg-hub/jsutils'\n\nexport const Constants = deepFreeze({\n  BUILD_EVENT: 'build',\n  CHANGE_EVENT: 'change',\n  RESIZE_EVENT: 'resize',\n  ADD_EVENT: 'addEventListener',\n  REMOVE_EVENT: 'removeEventListener',\n  KEG_STYLES_TAG_ID: `keg-components-stylesheet`,\n  PLATFORM: {\n    NATIVE: '$native',\n    IOS: '$ios',\n    android: '$android',\n    WEB: '$web',\n    ALL: '$all',\n  },\n})\n","/* eslint id-length: 0 */\nexport const ruleHelpers = {\n  // Margin helpers\n  m: `margin`,\n  mT: `marginTop`,\n  mB: `marginBottom`,\n  mR: `marginRight`,\n  mL: `marginLeft`,\n  mH: `marginHorizontal`,\n  mV: `marginVertical`,\n\n  // Padding helpers\n  p: `padding`,\n  pT: `paddingTop`,\n  pB: `paddingBottom`,\n  pR: `paddingRight`,\n  pL: `paddingLeft`,\n  pH: `paddingHorizontal`,\n  pV: `paddingVertical`,\n\n  // Border helpers\n  bC: `borderColor`,\n  bW: `borderWidth`,\n  bS: `borderStyle`,\n  bC: `borderColor`,\n  bRad: `borderRadius`,\n  bTRR: 'borderTopRightRadius',\n  bTLR: 'borderTopLeftRadius',\n  bBLR: 'borderBottomLeftRadius',\n  bBRR: 'borderBottomRightRadius',\n  bTC: `borderTopColor`,\n  bTW: `borderTopWidth`,\n  bBC: `borderBottomColor`,\n  bBW: `borderBottomWidth`,\n  bRC: `borderRightColor`,\n  bRW: `borderRightWidth`,\n  bLC: `borderLeftColor`,\n  bLW: `borderLeftWidth`,\n\n  // Color helpers\n  c: `color`,\n  bg: `background`,\n  bgC: `backgroundColor`,\n\n  // Layout helpers\n  d: `display`,\n  ovf: `overflow`,\n  ovfX: `overflowX`,\n  ovfY: `overflowY`,\n  pos: `position`,\n  z: `zIndex`,\n\n  tp: `top`,\n  bt: `bottom`,\n  btm: `bottom`,\n  lt: `left`,\n  rt: `right`,\n\n  // Effect helpers\n  bxS: `boxShadow`,\n  op: `opacity`,\n  ptrE: `pointerEvents`,\n  otl: `outline`,\n\n  // Flex helpers\n  fl: `flex`,\n  flD: `flexDirection`,\n  flWr: `flexWrap`,\n  flB: `flexBasis`,\n  flG: `flexGrow`,\n  flS: `flexShrink`,\n  jtC: `justifyContent`,\n  alC: `alignContent`,\n  alS: `alignSelf`,\n  alI: `alignItems`,\n\n  // Alignment helpers\n  vrA: `verticalAlign`,\n  whS: `whiteSpace`,\n\n  // Dimension helpers\n  w: 'width',\n  h: `height`,\n  minH: `minHeight`,\n  maxH: `maxHeight`,\n  minW: `minWidth`,\n  maxW: `maxWidth`,\n\n  // Text / Font helpers\n  ftF: `fontFamily`,\n  ftSz: `fontSize`,\n  ftS: `fontStyle`,\n  ftWt: `fontWeight`,\n  lnH: `lineHeight`,\n  ltrS: `letterSpacing`,\n  txAl: `textAlign`,\n  txDc: `textDecoration`,\n  txDL: 'textDecorationLine',\n\n  // Shadow helpers\n  shC: `shadowColor`,\n  shOf: `shadowOffset`,\n  shOff: `shadowOffset`,\n  shO: `shadowOpacity`,\n  shR: `shadowRadius`,\n\n  // Transition helpers\n  trf: `transform`,\n  trD: `transitionDuration`,\n  trP: `transitionProperty`,\n}\n","/** @module dimensions */\n\nimport {\n  debounce,\n  hasDomAccess,\n  isArr,\n  isFunc,\n  checkCall,\n} from '@keg-hub/jsutils'\nimport { Constants } from '../constants'\n\nconst DEBOUNCE_RATE = 100\n\n/**\n * Gets the window object if it's available\n *\n * @returns {Object} - Browser window object\n */\nconst getWindow = () => {\n  const winAccess = !hasDomAccess()\n\n  return winAccess\n    ? {\n        devicePixelRatio: undefined,\n        innerHeight: undefined,\n        innerWidth: undefined,\n        width: undefined,\n        height: undefined,\n        screen: {\n          height: undefined,\n          width: undefined,\n        },\n      }\n    : (() => {\n        return window\n      })()\n}\n\nconst winDim = getWindow()\n\n/**\n * Adds an event listener to the passed in element\n *\n * @param {*} element - Adds the eventlistener to this param\n * @param {string} event - Event to listen for\n * @param {function} method - Method to call when event fires\n * @param {Object|boolean} options - Options for eventlisteners on browsers\n */\nconst addListener = (element, event, method, options) => {\n  element &&\n    checkCall(element.addEventListener, event, method, options || false)\n}\n\n/**\n * Sets the screen size from the passed in window object\n * @param {Object} win - window object to set the screen size\n *\n * @returns {Object} - Updated screen object\n */\nconst setScreen = win => {\n  return {\n    fontScale: 1,\n    height: win.screen.height,\n    scale: win.devicePixelRatio || 1,\n    width: win.screen.width,\n  }\n}\n\n/**\n * Sets the window size from the passed in window object\n * @param {Object} win - window object to set the screen size\n *\n * @returns {Object} - Updated window object\n */\nconst setWin = win => {\n  return {\n    fontScale: 1,\n    height: win.innerHeight,\n    scale: win.devicePixelRatio || 1,\n    width: win.innerWidth,\n  }\n}\n\n/**\n * Default dimensions object\n */\nconst dimensions = { window: setWin(winDim), screen: setScreen(winDim) }\n\n/**\n * Event listeners cache\n */\nconst listeners = {}\n\n/**\n * Gets a dimensions property based on the passed in value\n * @param {string} dimension - string key name as window || screen\n *\n * @returns {Object} - window or screen property of the dimensions object\n */\nconst get = key => dimensions[key]\n\n/**\n * Sets a dimensions property based on the passed in values\n * @param {Object} dimensions - Object to update the dimensions values\n *\n * @returns {null}\n */\nconst set = ({ screen, window: win }) => {\n  screen && (dimensions.screen = screen)\n  win && (dimensions.window = win)\n}\n\n/**\n * Updates the dimensions object based on the current screen and window sizes\n * Calls any event listeners listening for dimensions updates\n */\nconst update = () => {\n  dimensions.window = setWin(winDim)\n  dimensions.screen = setScreen(winDim)\n\n  isArr(listeners[Constants.CHANGE_EVENT]) &&\n    listeners[Constants.CHANGE_EVENT].forEach(\n      listener => !listener.shouldUnmount && listener(dimensions)\n    )\n}\n\n/**\n * Adds an event listener to the even type\n * @param {string} type - Type of event to listen for\n * @param {function} listener - function to call when the event fires\n *\n */\nconst addEventListener = (type, listener) => {\n  if (!type || !isFunc(listener)) return\n\n  listeners[type] = listeners[type] || []\n  listeners[type].push(listener)\n}\n\n/**\n * Removes an event listener\n * @param {string} type - Type of event to listen for\n * @param {function} listener - function to remove from the event type\n *\n */\nconst removeEventListener = (type, removeListener) => {\n  type &&\n    isFunc(removeListener) &&\n    isArr(listeners[type]) &&\n    (listeners[type] = listeners[type].filter(\n      listener => listener !== removeListener\n    ))\n}\n\n// Check if we have access to the DOM, and if so add a resize event listener\nhasDomAccess() &&\n  checkCall(() =>\n    addListener(window, Constants.RESIZE_EVENT, debounce(update, DEBOUNCE_RATE))\n  )\n\nconst Dimensions = {\n  get,\n  set,\n  update,\n  addEventListener,\n  removeEventListener,\n}\n\nexport { Dimensions }\n","/** @module theme */\n'use strict'\n\nimport { deepMerge, isObj } from '@keg-hub/jsutils'\n\n/**\n * Holds the default theme which can be set with the setDefaultTheme helper\n */\nlet defaultTheme = {}\n\n/**\n * Overwrites the default them with passed in theme\n * If merge is passed as true, will merge the current default theme with the passed in theme\n * @param {Object} [theme={}] - Theme to overwrite of merge with the default theme\n * @param {boolean} [merge=false] - Should the passed in theme be merged with the default theme\n * @param {boolean} useDimensions - Should subset theme that matches current dimensions\n *\n * @returns {void}\n */\nexport const setDefaultTheme = (theme, merge = false) => {\n  // Ensure the passed in theme is an object\n  if (!isObj(theme))\n    return console.warn(\n      `setDefaultTheme method requires an theme object as the first argument. Received: `,\n      theme\n    )\n\n  // Check if the default theme should be merged, or overwritten\n  defaultTheme = merge ? deepMerge(defaultTheme, theme) : theme\n\n  // Return the newly set default theme\n  return defaultTheme\n}\n\n/**\n * Gets the default theme\n *\n * @returns {Object} - the default theme\n */\nexport const getDefaultTheme = () => defaultTheme\n","/** @module context */\n'use strict'\n\nimport React from 'react'\nimport { getDefaultTheme } from '../theme/default'\n\n/**\n * Creates the initial theme context\n */\nexport const ReThemeContext = React.createContext(getDefaultTheme())\n","import { isObj } from '@keg-hub/jsutils'\n\n/**\n * Default platform used for a web-app\n * @Object\n */\nconst webDefPlatform = {\n  OS: 'web',\n  select: obj => isObj(obj) && obj.web,\n  Version: 'ReTheme',\n}\n\nlet RNPlatform\n\n/**\n * Gets the set platform object, or the default platform\n * @function\n *\n * @return {Object} - Platform object to use when building the theme\n */\nconst getRNPlatform = () => {\n  return RNPlatform || webDefPlatform\n}\n\n/**\n * Sets the platform object used when building the theme\n * @function\n * @param {Object} Plat - Platform object to use\n *\n * @return {void}\n */\nconst setRNPlatform = Plat => {\n  RNPlatform = Plat\n}\n\nexport { setRNPlatform, getRNPlatform }\n","/** @module theme */\n'use strict'\n\nimport { Constants } from '../constants'\nimport { getRNPlatform } from 'RePlatform'\nimport { get } from '@keg-hub/jsutils'\n\n// Default platforms to use when restructuring the theme\n// Use array, so we don't lose the order\nexport const getDefaultPlatforms = () => {\n  const Platform = getRNPlatform()\n\n  const osPlatform = get(Platform, 'OS')\n\n  // Rules for the OS platform ( web || ios || android )\n  const stylePlatforms = []\n\n  // If it's not a web platform, then add the $native platform\n  if (osPlatform !== 'web') stylePlatforms.push('$native')\n\n  // push current platform\n  stylePlatforms.push('$' + osPlatform)\n\n  // Rules for all platforms and os's\n  return [Constants.PLATFORM.ALL].concat(stylePlatforms)\n}\n","/** @module theme */\n'use strict'\n\nimport { isArr, isFunc, isNum } from '@keg-hub/jsutils'\n\nconst listeners = {}\n\n/**\n * Add a function to an event type\n * <br/> Returns an index which can be used to remove the listener when needed\n * @param {string} event - Names of event to add the listener to\n * @param {function} listener - Listener function to add\n *\n * @returns {number} - Index of the listener in the events array cache\n */\nconst addThemeEvent = (event, listener) => {\n  // Ensure event and listener are passed in correctly\n  if (!event || !isFunc(listener)) return\n\n  // Create the new event event\n  listeners[event] = listeners[event] || []\n\n  // Add the listener to the event event\n  listeners[event].push(listener)\n\n  // Return the index of the added listener\n  return listeners[event].length - 1\n}\n\n/**\n * Remove a registered event listener\n * @param {string} event - Names of event to remove listeners for\n * @param {function} removeListener - Listener function to remove\n *\n * @returns {void}\n */\nconst removeThemeEvent = (event, removeListener) => {\n  // Ensure the proper params are passed in\n  if (!event || !listeners[event] || (!removeListener && removeListener !== 0))\n    return\n\n  // If an index is passed in, use that to remove the listener function\n  isNum(removeListener)\n    ? // Use splice to remove the listener at the correct index\n    listeners[event].splice(removeListener, 1)\n    : // Otherwise ensure the listener and events exists, then filter out the listener\n    isFunc(removeListener) &&\n      isArr(listeners[event]) &&\n      (listeners[event] = listeners[event].filter(\n        listener => listener !== removeListener\n      ))\n}\n\n/**\n * Calls all functions registered to the passed in event name\n * @param {*} event - Event to call listeners for\n * @param {*} params - params to pass to the registered functions\n *\n * @returns {void}\n */\nconst fireThemeEvent = (event, ...params) => {\n  isArr(listeners[event]) &&\n    listeners[event].forEach(listener => listener(...params))\n}\n\n/**\n * Clears registered listeners from the listeners object\n * If event is passed, will only clear listeners for that event\n * @param {string=} event - Name of the event to clear\n *\n * @returns {void}\n */\n// const clearThemeEvents = event => {\n//   event && listeners[event] ? (listeners[event] = []) : (listeners = {})\n// }\n\nexport { addThemeEvent, fireThemeEvent, removeThemeEvent }\n","/**\n * Holds the current theme after it's built\n */\nlet currentTheme = {}\n\n/**\n * Helper to allow other methods to get the current theme used by the provider\n * @returns {Object} currentTheme - Current theme used by the provider\n */\nexport const getCurrentTheme = () => currentTheme\n\n/**\n * Helper to update the current Theme when ever the theme is built\n * Gets added as an event listener, and is called every time the theme is re-built\n * @param {Object} updatedTheme - Update built theme\n */\nexport const updateCurrentTheme = updatedTheme => (currentTheme = updatedTheme)\n","/** @module dimensions */\n'use strict'\n\nimport {\n  mapObj,\n  isObj,\n  toNum,\n  isNum,\n  softFalsy,\n  logData,\n} from '@keg-hub/jsutils'\n\n/**\n * Default sizes for a screen width\n * <br/> Can be overwritten with setSizes helper\n * @object\n */\nconst sizeMap = {\n  /**\n   * Name of the breakpoint\n   * Number for each entry defines the breakpoint\n   *  > The Breakpoint is the screen size where the entries becomes active\n   */\n  entries: [\n    [ '$xsmall', 1 ],\n    [ '$small', 320 ],\n    [ '$medium', 768 ],\n    [ '$large', 1024 ],\n    [ '$xlarge', 1366 ],\n  ],\n  hash: {},\n  indexes: {},\n}\n\n/**\n * Builds an index of the entry locations in the sizeMap entries\n * <br/>Builds the key value hash of the entries\n * <br/>Builds the keys array of the entries\n * @function\n *\n * @returns {void}\n */\nconst buildSizeMapParts = () => {\n  sizeMap.indexes = sizeMap.entries.reduce((indexes, entry, index) => {\n    // Add the entry value with the index\n    indexes[entry[0]] = index\n\n    // Add the index with entry value\n    indexes[index] = entry[0]\n\n    // Convert the sizeMap.entries into an object of key value pairs\n    sizeMap.hash[entry[0]] = entry[1]\n\n    return indexes\n  }, {})\n}\n\n/**\n * Updates the sizeMap.entries with custom values\n * <br/>Keys must already exist in the default sizeMap.indexes\n * <br/>Allowed keys are => xsmall | small | medium | large | xlarge\n * @function\n * @param {Object} dims - key value pair of custom sizeMap.entries\n *\n * @returns {Object} - Updated sizeMap object\n */\nexport const setSizes = dims => {\n  if (!isObj(dims))\n    return logData(\n      `setDimensions method requires an argument of type 'Object'.\\nReceived: `,\n      dims,\n      'error'\n    )\n\n  mapObj(dims, (key, value) => {\n    // Get the key index from the sizeMap\n    const keyIndex = sizeMap.indexes[key]\n\n    if (!softFalsy(keyIndex))\n      return logData(\n        `Invalid ${key} for theme size! Allowed keys are xsmall | small | medium | large | xlarge`,\n        'warn'\n      )\n\n    // Convert the value to an integer, just a helper incase value is a string\n    const newSize = toNum(dims[key])\n\n    // Ensure key is a valid key in the sizeMap indexes and the new size is a valid number\n    // Also ensure the entry exists based on the keyIndex\n    //  * This should never happen, but just incase\n    if (!newSize || !sizeMap.entries[keyIndex])\n      return logData(\n        `Invalid size entry. Size must be a number and the size entry must exist!`,\n        `Size: ${newSize}`,\n        `Entry: ${sizeMap.entries[keyIndex]}`,\n        'warn'\n      )\n\n    // Use the keyIndex to find the entry\n    // Set the value to be an entry with key and new size\n    sizeMap.entries[keyIndex] = [ key, newSize ]\n  })\n\n  // Rebuild the sizeMap parts after updating the dimensions\n  buildSizeMapParts()\n\n  return sizeMap\n}\n\n/**\n * Helper to get the a size from the sizeMap based on the passed in width\n * @function\n * @param {string|number} width - number to find the size from\n *\n * @returns {Array} [ currentSizeKey, hashForKey ]\n */\nexport const getSize = width => {\n  // Ensure width is a number that can be compared\n  const checkWidth = (isNum(width) && width) || toNum(width)\n\n  const name = sizeMap.entries.reduce((updateSize, [ key, value ]) => {\n    checkWidth >= value\n      ? // If it is check if there is an updateSize already sent\n      updateSize\n        ? // If an update size exists, then check if it's value is less then value\n        value > sizeMap.hash[updateSize] && (updateSize = key)\n        : // Otherwise just update the size\n          (updateSize = key)\n      : null\n\n    return updateSize\n\n    // Default to xsmall size\n  }, '$xsmall')\n\n  return [ name, sizeMap.hash[name] ]\n}\n\n/**\n * Get an array of all sizes to be merged together\n * @function\n * @param {string} key - Name of the size\n *\n * @returns {Array} - [\n *   Array of size key names,\n *   Array of unused size key names\n * ]\n *\n * @example\n * const [ keys, unused ] = getMergeSizes('$medium')\n * console.log(keys) -> [ '$medium', '$small', '$xsmall' ]\n * console.log(unused) -> [ '$large' ]\n */\nexport const getMergeSizes = key => {\n  const keys = Object.keys(sizeMap.hash)\n  const keyIndex = keys.indexOf(key)\n  return [ keys.slice(0, keyIndex + 1), keys.slice(keyIndex + 1) ]\n}\n\n// Build the default sizeMap parts\nbuildSizeMapParts()\n\n/**\n * Get the sizeMap object\n * @function\n *\n * @returns {Object} - built sizeMap object\n */\nexport const getSizeMap = () => sizeMap\n","/** @module dimensions */\n'use strict'\n\nimport { useState, useEffect } from 'react'\nimport { Dimensions } from 'ReDimensions'\n\n// Get the original window dimensions\n\nexport const useDimensions = () => {\n  /**\n   * Set the original dimensions to the state hook\n   */\n  const [ dimensions, setDimensions ] = useState(Dimensions.get('window'))\n\n  /**\n   * onChange listener for when the screen size changes\n   *\n   * @param {Object} arguments.window - holds the size of the current window\n   */\n  const onChange = ({ window: win }) => {\n    // Pull out the relevant items form the window object\n    const { width, height, scale, fontScale } = win\n    // Update the state with the updated dimensions data\n    setDimensions({ width, height, scale, fontScale })\n  }\n\n  /**\n   * Use the useEffect hook to set the Dimensions event listeners\n   */\n  useEffect(() => {\n    // Add the event listener\n    Dimensions.addEventListener('change', onChange)\n\n    // Return a function to remove the event listener\n    return () => {\n      onChange.shouldUnmount = true\n      return Dimensions.removeEventListener('change', onChange)\n    }\n  }, [])\n\n  // Return the current dimensions\n  return dimensions\n}\n","import { getDefaultPlatforms } from '../theme/getDefaultPlatforms'\nimport { Constants } from '../constants'\nconst PLATFORM = Constants.PLATFORM\n\n/**\n * Returns arrays of the active and inactive platforms\n * @returns {Array} [ activePlatforms, inactivePlatforms ]\n */\nexport const getPlatforms = () => {\n  const active = getDefaultPlatforms()\n  const inactive = Object.values(PLATFORM).filter(key => !active.includes(key))\n\n  return [ active, inactive ]\n}\n","import { deepMerge, get, isArr, isObj, isStr } from '@keg-hub/jsutils'\nimport { getCurrentTheme } from '../theme/manageTheme'\n\n/**\n * Merges the styles from the passed in sources\n * @param {Array} sources - An array of strings, arrays or objects\n *                          If it's a string or array, it searches the theme using get\n *                          If it's a object, it merges it with the other found objects\n *\n * @returns {Object} - built theme styles object\n */\nexport const getTheme = function (...sources) {\n  const theme = getCurrentTheme()\n\n  // Build the styles by merging the sources together\n  // Check if each source is an id to cache or get the styles from the theme\n  return deepMerge(\n    ...sources.reduce((toMerge, source) => {\n      const styles = isObj(source)\n        ? source\n        : isStr(source) || isArr(source)\n          ? get(theme, source)\n          : null\n\n      styles && toMerge.push(styles)\n\n      return toMerge\n    }, [])\n  )\n}\n","import { isObj, deepMerge, isArr } from '@keg-hub/jsutils'\nimport { getPlatforms } from './getPlatforms'\nimport { getSize, getMergeSizes } from '../dimensions'\nimport { getTheme } from './getTheme'\nimport { ruleHelpers } from '../constants/ruleHelpers'\n\n/**\n * Helper for compileStyles\n * @param {Object} obj\n * @param {string} key\n * @returns {Object} obj with all the properties located under obj.key merged to the root of obj, and key removed\n * @example\n * const a = { a: 0, b: { c: 10, d: 11 }}\n * extract(a, 'b') => { a: 0, c: 10, d: 11 }\n */\nconst extract = (obj, key) => {\n  if (!obj[key]) return obj\n  const props = obj[key]\n  delete obj[key]\n  return deepMerge(obj, props)\n}\n\n/**\n * Compiles the styles object given the active platforms, sizes, and keys to omit\n * @param {Object} styles\n * @param {Array<string>} params.platforms - platforms to compile\n * @param {Array<string>} params.sizes - sizes to compile\n * @param {Array<string>} params.omit - dynamic keys to ignore\n * @param {Object} params.aliases - optional alias map for style rules, defaults to constants.ruleHelpers\n * @returns {Object} compiled stlyes\n */\nexport const compileStyles = (stylesData, params = {}) => {\n  const styles =\n    isArr(stylesData) && stylesData.length\n      ? deepMerge(...stylesData)\n      : stylesData\n\n  if (!isObj(styles)) return stylesData\n\n  const { platforms, sizes, omit, aliases = ruleHelpers } = params\n\n  // filter out unused keys, compile aliases, and move all active size-styles\n  // into buckets at root of object\n  const structured = Object.entries(styles).reduce((acc, [ key, value ]) => {\n    if (platforms.includes(key) || sizes.includes(key)) {\n      // compile the styles defined by `key`, then merge them with\n      // all previous compiled styles identified by the same key\n      acc[key] = {\n        ...acc[key],\n        ...compileStyles(value, params),\n      }\n    }\n    else if (!omit.includes(key)) {\n      // convert shortcut keys, if used (e.g. m => margin)\n      // then add the entry to the compiled styles object\n      const trueKey = aliases[key] || key\n      acc[trueKey] = isObj(value)\n        ? { ...acc[trueKey], ...compileStyles(value, params) }\n        : value\n    }\n\n    return acc\n  }, {})\n\n  // sizes and platforms have a precedence order, determined by\n  // the order of keys in `platforms` and `sizes` (from least-specific to most).\n  // So remove the dynamic keys, in precedence order, and merge their values\n  // with the final styles object in that order\n  const fromPlatforms = platforms.reduce(extract, structured)\n  const fromSizes = sizes.reduce(extract, fromPlatforms)\n  return fromSizes\n}\n\n/**\n * Compiles styles for current platform and the specified width + height\n * - Mainly a helper for unit tests\n * @param {Object} styles\n * @param {Number} width\n * @param {Number} height\n * @param {Boolean} withMeta\n * @returns {Object} compiled styles\n */\nexport const compileStylesForState = (styles, width, height, withMeta) => {\n  const [ platforms, inactivePlatforms ] = getPlatforms()\n  const [ sizeKey, widthForKey ] = getSize(width)\n  const [ activeSizes, inactiveSizes ] = getMergeSizes(sizeKey) || []\n  const keysToIgnore = inactivePlatforms.concat(inactiveSizes)\n\n  const compiled = compileStyles(styles, {\n    platforms,\n    sizes: activeSizes,\n    omit: keysToIgnore,\n  })\n\n  if (withMeta) {\n    compiled.RTMeta = {\n      key: sizeKey,\n      size: widthForKey,\n      width: width,\n      height: height,\n    }\n    compiled.get = getTheme\n  }\n  return compiled\n}\n","import { useMemo } from 'react'\nimport { noPropArr } from '@keg-hub/jsutils'\nimport { useDimensions, getMergeSizes, getSize } from '../dimensions'\nimport { compileStyles } from '../helpers/compileStyles'\nimport { getTheme } from '../helpers/getTheme'\nimport { getPlatforms } from '../helpers/getPlatforms'\n\n/**\n * *(useCompiledStyles helper)*\n * @returns {string} size key for current screen width\n */\nconst useCurrentSize = () => {\n  const dimensions = useDimensions()\n  const [ activeSizeKey, widthForSize ] = useMemo(\n    () => getSize(dimensions.width),\n    [dimensions.width]\n  )\n  return [ activeSizeKey, widthForSize, dimensions ]\n}\n\n/**\n * Returns arrays of the active and inactive platforms\n * @returns {Array} [ activePlatforms, inactivePlatforms ]\n */\nconst usePlatforms = () => useMemo(() => getPlatforms(), [])\n\n/**\n * Takes in dynamic styles and outputs the compiled styles. Used by `reStyle`\n * @param {Object} dynamicStyles - styles object that can contains size and platform keys,\n *  in addition to style rule shortcuts\n * @param {Boolean} withMeta - if true, adds a theme `get()` method and the `RTMeta` property to the returned styles object\n * @returns {Object} the compiled styles object to be passed to a react or DOM element\n */\nexport const useCompiledStyles = (dynamicStyles, withMeta = false) => {\n  const [ platforms, unusedPlatforms ] = usePlatforms()\n\n  const [ activeSizeKey, keyWidth, { width, height }] = useCurrentSize()\n  const [ activeSizes, inactiveSizes ] = useMemo(\n    () => getMergeSizes(activeSizeKey) || noPropArr,\n    [activeSizeKey]\n  )\n\n  const keysToIgnore = useMemo(\n    () => unusedPlatforms.concat(inactiveSizes),\n    [ unusedPlatforms, inactiveSizes ]\n  )\n\n  const RTMeta = useMemo(\n    () =>\n      withMeta\n        ? {\n            key: activeSizeKey,\n            size: keyWidth,\n            width,\n            height,\n          }\n        : null,\n    [ activeSizeKey, keyWidth, width, height ]\n  )\n\n  const compiled = useMemo(\n    () =>\n      compileStyles(dynamicStyles, {\n        platforms,\n        sizes: activeSizes,\n        omit: keysToIgnore,\n      }),\n    [ dynamicStyles, platforms, activeSizeKey ]\n  )\n\n  if (withMeta) {\n    compiled.get = getTheme\n    compiled.RTMeta = RTMeta\n  }\n\n  return compiled\n}\n","/** @module hooks */\n\nimport { useContext } from 'react'\nimport { ReThemeContext } from '../context/reThemeContext'\n\n/**\n * Uses the useContext hook from react to get the current theme ( Value prop of the context )\n *\n * @returns { Object } - Current theme\n */\nexport const useTheme = () => {\n  return useContext(ReThemeContext)\n}\n"],"names":["Constants","deepFreeze","BUILD_EVENT","CHANGE_EVENT","RESIZE_EVENT","ADD_EVENT","REMOVE_EVENT","KEG_STYLES_TAG_ID","PLATFORM","NATIVE","IOS","android","WEB","ALL","ruleHelpers","m","mT","mB","mR","mL","mH","mV","p","pT","pB","pR","pL","pH","pV","bC","bW","bS","winDim","hasDomAccess","window","devicePixelRatio","undefined","innerHeight","innerWidth","width","height","screen","setScreen","win","fontScale","scale","setWin","dimensions","listeners","update","isArr","forEach","listener","shouldUnmount","checkCall","element","event","method","debounce","addEventListener","options","Dimensions","key","type","isFunc","push","removeListener","filter","defaultTheme","setDefaultTheme","theme","merge","isObj","deepMerge","console","warn","getDefaultTheme","ReThemeContext","React","createContext","webDefPlatform","OS","select","obj","web","Version","getDefaultPlatforms","osPlatform","get","stylePlatforms","concat","addThemeEvent","length","removeThemeEvent","isNum","splice","fireThemeEvent","params","currentTheme","getCurrentTheme","updateCurrentTheme","updatedTheme","sizeMap","entries","hash","indexes","buildSizeMapParts","reduce","entry","index","setSizes","dims","mapObj","value","keyIndex","softFalsy","logData","newSize","toNum","getSize","checkWidth","name","updateSize","getMergeSizes","keys","Object","indexOf","slice","getSizeMap","useDimensions","useState","setDimensions","onChange","useEffect","getTheme","sources","toMerge","source","styles","isStr","extract","props","compileStyles","stylesData","platforms","sizes","omit","aliases","structured","acc","includes","trueKey","fromPlatforms","fromSizes","useCurrentSize","useMemo","usePlatforms","active","inactive","values","useCompiledStyles","dynamicStyles","withMeta","unusedPlatforms","activeSizeKey","keyWidth","noPropArr","activeSizes","inactiveSizes","keysToIgnore","RTMeta","size","compiled","useTheme","useContext"],"mappings":"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"}