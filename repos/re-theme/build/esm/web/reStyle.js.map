{"version":3,"file":"reStyle.js","sources":["../../../src/reStyle/reStyleHooks.js","../../../src/reStyle/reStyle.js"],"sourcesContent":["import { useTheme } from '../hooks/useTheme'\nimport { useMemo, useState, useEffect, useRef } from 'react'\nimport {\n  ensureArr,\n  uuid,\n  isObj,\n  deepMerge,\n  noOpObj,\n  isFunc,\n  shallowEqual,\n} from '@keg-hub/jsutils'\n\n/**\n * Helper to get the name of a component, or an ID for reference\n * @function\n * @param {React.Component} Component - Component to get the name from\n *\n * @returns {string} - Name of the Component or generated id when name does not exist\n */\nexport const getComponentName = Component => {\n  return (\n    Component.displayName ||\n    Component.name ||\n    `keg-${uuid().split('-')\n      .slice(4)\n      .join('')}`\n  )\n}\n\n/**\n * Hook to ensure the className prop is an array with the compName argument added to it\n * @function\n * @param {String|Array} className - Current class names already set\n * @param {string} compName - Name of a component to be added as a class name\n *\n * @returns {Array} - Built array of class names with the compName name added to it\n */\nexport const usePropClassName = (className, compName) => {\n  return useMemo(() => {\n    const classArr = className ? ensureArr(className) : []\n    compName && classArr.push(compName)\n\n    return classArr\n  }, [ className, compName ])\n}\n\n/**\n * Hook that memoizes the merged objects using a shallow-equal comparison\n * @function\n * @param {...Object} mergeObjs - objects to be merged, provided there is a shallow difference from the last call\n *\n * @returns {Object} - merged object\n */\nexport const useShallowMemoMerge = (...mergeObjs) => {\n  const identity = useRef(null)\n\n  return useMemo(() => {\n    const merged = deepMerge(...mergeObjs)\n\n    const foundIdentity = shallowEqual(identity.current, merged)\n      ? identity.current\n      : merged\n\n    // if the merged object is shallowly different than the cached identity,\n    // update the identity\n    if (foundIdentity !== identity.current) {\n      identity.current = foundIdentity\n    }\n\n    return foundIdentity\n  }, [...mergeObjs])\n}\n\n/**\n * Hook to memoize the styles and return them\n * <br/> Calls styleData when its a function passing in the theme and props\n * @function\n * @param {Object|function} styleData - Custom styles or function return custom styles\n * @param {Object} props - Props of the component being wrapped\n *\n * @returns {Object} - Build styles object\n */\nexport const useReStyles = (styleData, props) => {\n  const theme = useTheme()\n  const [ stateProps, setStateProps ] = useState(props)\n  const propsEqual = shallowEqual(props, stateProps)\n\n  useEffect(() => {\n    !propsEqual && setStateProps(props)\n  }, [propsEqual])\n\n  return useMemo(() => {\n    return isFunc(styleData)\n      ? styleData(theme, props)\n      : isObj(styleData)\n        ? styleData\n        : noOpObj\n  }, [ theme, styleData, propsEqual ])\n}\n","import React from 'react'\nimport { exists } from '@keg-hub/jsutils'\nimport { StyleInjector } from 'StyleInjector'\nimport {\n  getComponentName,\n  useShallowMemoMerge,\n  usePropClassName,\n  useReStyles,\n} from './reStyleHooks'\n\n/**\n * Builds a HOC, with custom styles injected into it\n * @function\n * @param {React.Component} Component - Component to wrap with custom styles\n * @param {string} [styleProp='style'] - Alternate props key to use other then 'style'\n *\n * @returns {React.Component} HOC that will inject the custom styles\n */\nexport const reStyle = (Component, styleProp = 'style') => {\n  const compName = getComponentName(Component)\n  const InjectedComp = StyleInjector(Component, {\n    displayName: compName,\n    className: compName,\n  })\n\n  return styleData => {\n    const StyledFun = React.forwardRef((props, ref) => {\n      const reStyles = useReStyles(styleData, props)\n      const classArr = usePropClassName(props.className, compName)\n      const styleFromProps = exists(props[styleProp]) ? props[styleProp] : null\n\n      const styles = useShallowMemoMerge(reStyles, styleFromProps)\n\n      return (\n        <InjectedComp\n          {...props}\n          {...{ [styleProp]: styles }}\n          style={styles}\n          className={classArr}\n          ref={ref}\n        />\n      )\n    })\n\n    StyledFun.displayName = `reStyle(${compName})`\n\n    return StyledFun\n  }\n}\n"],"names":["getComponentName","Component","displayName","name","uuid","split","slice","join","usePropClassName","className","compName","useMemo","classArr","ensureArr","push","useShallowMemoMerge","mergeObjs","identity","useRef","merged","deepMerge","foundIdentity","shallowEqual","current","useReStyles","styleData","props","theme","useTheme","useState","stateProps","setStateProps","propsEqual","useEffect","isFunc","isObj","noOpObj","reStyle","styleProp","InjectedComp","StyleInjector","StyledFun","React","forwardRef","ref","reStyles","styleFromProps","exists","styles","style"],"mappings":"kkBAmBO,IAAMA,iBAAmB,SAAAC,UAE5BA,EAAUC,aACVD,EAAUE,oBACHC,IAAOC,MAAM,KACjBC,MAAM,GACNC,KAAK,MAYCC,iBAAmB,SAACC,EAAWC,UACnCC,GAAQ,eACPC,EAAWH,EAAYI,EAAUJ,GAAa,UACpDC,GAAYE,EAASE,KAAKJ,GAEnBE,IACN,CAAEH,EAAWC,KAULK,oBAAsB,sCAAIC,2BAAAA,sBAC/BC,EAAWC,EAAO,aAEjBP,GAAQ,eACPQ,EAASC,eAAaJ,GAEtBK,EAAgBC,EAAaL,EAASM,QAASJ,GACjDF,EAASM,QACTJ,SAIAE,IAAkBJ,EAASM,UAC7BN,EAASM,QAAUF,GAGdA,cACFL,KAYIQ,YAAc,SAACC,EAAWC,OAC/BC,EAAQC,MACwBC,EAASH,YAAvCI,OAAYC,OACdC,EAAaV,EAAaI,EAAOI,UAEvCG,GAAU,YACPD,GAAcD,EAAcL,KAC5B,CAACM,IAEGrB,GAAQ,kBACNuB,EAAOT,GACVA,EAAUE,EAAOD,GACjBS,EAAMV,GACJA,EACAW,IACL,CAAET,EAAOF,EAAWO,KC/EZK,QAAU,SAACpC,OAAWqC,yDAAY,QACvC5B,EAAWV,iBAAiBC,GAC5BsC,EAAeC,EAAcvC,EAAW,CAC5CC,YAAaQ,EACbD,UAAWC,WAGN,SAAAe,OACCgB,EAAYC,EAAMC,YAAW,SAACjB,EAAOkB,OACnCC,EAAWrB,YAAYC,EAAWC,GAClCd,EAAWJ,iBAAiBkB,EAAMjB,UAAWC,GAC7CoC,EAAiBC,EAAOrB,EAAMY,IAAcZ,EAAMY,GAAa,KAE/DU,EAASjC,oBAAoB8B,EAAUC,UAG3CJ,gBAACH,OACKb,OACGY,EAAYU,IACnBC,MAAOD,EACPvC,UAAWG,EACXgC,IAAKA,eAKXH,EAAUvC,8BAAyBQ,OAE5B+B"}