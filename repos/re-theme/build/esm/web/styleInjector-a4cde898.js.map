{"version":3,"file":"styleInjector-a4cde898.js","sources":["../../../src/styleInjector/flattenStyle.js","../../../src/styleInjector/injectHelpers.js","../../../src/constants/ruleOverrides.js","../../../src/styleInjector/useStyleTag.js","../../../src/styleInjector/styleInjector.js"],"sourcesContent":["\n/**\n  * Loops over the passed in style style objects\n  * @param {Array<Object>} style - Array of Style objects\n  * @param {Object} result - Returned result of the flatten styles\n  *\n  * @returns {Object} - Passed in result Object\n */\nconst loopArrStyle = (style, result) => {\n  for (let i = 0, styleLength = style.length; i < styleLength; ++i) {\n    const computedStyle = flattenStyle(style[i])\n    if (computedStyle) {\n      for (const key in computedStyle) {\n        const value = computedStyle[key]\n        result[key] = value\n      }\n    }\n  }\n  return result\n}\n\n/**\n  * Flattens the passed in style object || array\n  * @param {Object|Array<Object>} style - Styles to flatten\n  * @param {Object} result - Returned result of the flatten styles\n  *\n  * @returns {Object} - Passed in result Object\n */\nexport const flattenStyle = (style, result={}) => {\n  return !style || style === true\n    ? undefined\n    : !Array.isArray(style)\n      ? style\n      : loopArrStyle(style, result)\n}\n\n","import { addThemeEvent } from '../theme/themeEvent'\nimport { Constants } from '../constants'\nimport { ruleOverrides } from '../constants/ruleOverrides'\nimport {\n  isArr,\n  isStr,\n  isObj,\n  exists,\n  noPropArr,\n  hashString,\n  splitByKeys,\n  hasDomAccess,\n} from '@keg-hub/jsutils'\n\n/**\n * Cache the current environment\n */\nconst domAccess = hasDomAccess()\n\n/**\n * Cache holder to hold the main StyleSheet Dom element\n */\nlet KegStyleSheet\n\n/**\n * Caches selectors already added to the Dom\n */\nconst selectorCache = new Set()\n\n/**\n * Checks if a selector already exists in the selector cache\n * @param {string} selector - selector to check if already exists\n * @param {string} sizeKey - Current size being rendered\n *\n * @return {Boolean} - If the selector has already been cached\n */\nconst selectorExists = selector => selectorCache.has(selector)\n\n/**\n * Gets the cached style sheet, or finds it on the DOM\n * @function\n *\n * @returns {Object} - Keg Style sheet\n */\nconst getKegSheet = () => {\n  KegStyleSheet =\n    KegStyleSheet ||\n    document.head.querySelector(`#${Constants.KEG_STYLES_TAG_ID}`)\n\n  return KegStyleSheet\n}\n\n/**\n * Filters out styles that require extra help to convert to CSS\n * <br/>In these cases, we let react-native-web handel through the style attribute\n * @function\n * @param {Object} style - Object containing style rules\n * @param {Array} filter - Custom style rules to filter out\n *\n * @returns {Object} - Contains separated objects with filtered styles, non-filtered styles\n */\nexport const filterRules = (style, filter) => {\n  const toFilter = isArr(filter)\n    ? ruleOverrides.filter.concat(filter)\n    : ruleOverrides.filter\n\n    const primitives = {}\n    let subStyleProps = false\n    // Ensure the object is a style object, an not multi-layered object\n    // Split styles from multi-layer style object\n    const subStyleObjs = Object.entries(style).reduce((acc, [ key, val ]) => {\n    /**\n      * Some style rules are allowed to be object\n      * Those rules are defined in the allowedStyleObject Array\n      * So if the value is an object, but not in the allowedStyleObject Array\n      * Then it is assumed to be a multi-layered style object\n      * In this case, we don't want to process these styles\n      * They are skipped and passed on to the component\n      * @example\n      * const styles = {content: {item: {color: '#ffffff'}}}\n      */\n      if((!isObj(val) && !isArr(val)) || ruleOverrides.allowedStyleObject.includes(key)){\n        primitives[key] = val\n      }\n      else {\n        subStyleProps = true\n        acc[key] = val\n      }\n\n      return acc\n    }, {})\n\n  if(subStyleProps)\n    return {\n      style: primitives,\n      filtered: subStyleObjs,\n    }\n\n  const [ filtered, keep ] = splitByKeys(style, toFilter)\n\n  return {\n    style: keep,\n    filtered: filtered,\n  }\n}\n\nconst formatSelectors = (hashClass, classNames, prefix, maxSelectors) => {\n  /**\n   * Allow setting how many selectors are added to the element via maxSelectors\n   * @example\n   * //                   Index 0      Index 1      Index 2\n   * const selectors = [`selector0`, `selector1`, `selector2`]\n   * const maxSelectors === 2\n   * selectors.slice(0, maxSelectors) === [`selector0`, `selector1`]\n   *\n   */\n  const selectorAmount = exists(maxSelectors) ? maxSelectors : 1\n  const selectors = classNames\n    .filter(cls => (cls && prefix ? cls.startsWith(prefix) : cls))\n    .reverse()\n    .slice(0, selectorAmount)\n    .sort()\n    .reduce((acc, sel) => {\n      sel && acc.push(...sel.split(` `))\n      return acc\n    }, [])\n\n  return {\n    selector: `.${selectors.concat([hashClass]).join('.')}`.trim(),\n    classNames: classNames.concat([hashClass]).join(' ').trim(),\n  }\n}\n\n/**\n * Creates a unique selector based on the passed in className and cssString\n * @function\n * @param {string|Array<string>} className - Original className(s) used as a css selector\n * @param {string} cssString - Css rules for the className in string format\n * @param {string=} prefix - optional prefix to filter by\n *\n * @returns {{hashClass:string, selector:string}} - returns selector string and hashClass string\n */\nexport const getSelector = (className, cssString, prefix, maxSelectors) => {\n  const hashClass = `${prefix}-${hashString(cssString)}`\n\n  const { selector, classNames } = isArr(className)\n    ? formatSelectors(hashClass, className, prefix, maxSelectors)\n    : isStr(className)\n      ? formatSelectors(hashClass, className.split(' '), prefix, maxSelectors)\n      : formatSelectors(hashClass, noPropArr, prefix, maxSelectors)\n\n  return {\n    hashClass,\n    classNames,\n    selector: selectorExists(selector) ? false : selector,\n  }\n}\n\n/**\n * Adds a css string to the KegStyleSheet\n * @param {string} selector - Css selector to add the style rules to\n * @param {Object} css - Style rules as an object\n * @param {string} css.all - Style rules to be added as a string\n *\n * @returns {Void}\n */\nexport const addStylesToDom = (selector, css) => {\n  // skip if these styles are already inserted\n  if (!domAccess || !css || !css.all || selectorExists(selector)) return\n\n  try {\n    // Cache the selector with the size\n    // So next time we can look up if the size changed\n    selectorCache.add(selector)\n    const KegSheet = getKegSheet()\n    KegSheet.sheet.insertRule(css.all)\n  }\n  catch(err){\n    console.error(err)\n  }\n}\n\n/**\n * Removes any keys stored in the selectorCache\n * <br/>Removes all styles applied to the Dom\n * @function\n *\n * @returns {Void}\n */\nconst clearStyleSheet = () => {\n  selectorCache.clear()\n  const KegSheet = getKegSheet()\n  KegSheet.textContent = ''\n}\n\n/**\n * Add an event listener to the Theme Build event\n * Any time the theme rebuilds, we want to reset the styles added to the dom\n */\naddThemeEvent(Constants.BUILD_EVENT, clearStyleSheet)\n\n/**\n * Creates a <style> Element on the dom, is called immediately\n *\n * @returns {Object} - finds or creates style tag with Constants.KEG_STYLES_TAG_ID as the id\n */\n;(() => {\n  if (!domAccess) return\n\n  KegStyleSheet = document.head.querySelector(`#${Constants.KEG_STYLES_TAG_ID}`)\n\n  if (KegStyleSheet) return KegStyleSheet\n\n  KegStyleSheet = document.createElement('style')\n  KegStyleSheet.id = Constants.KEG_STYLES_TAG_ID\n  document.head.append(KegStyleSheet)\n})()\n","export const ruleOverrides = {\n  // Important rules should include the prefixed version\n  // Because important rules are checked after going through the prefixer\n  // Important rules have `!important` added to them to allow overwriting the style attribute\n  important: [],\n\n  // Filtered rules are not added to the Dom with CSS\n  // They are filtered out and passed on to react-native-web to manage\n  filter: [\n    'aspectRatio',\n    'elevation',\n    'overlayColor',\n    'resizeMode',\n    'tintColor',\n    'backgroundSize',\n    'animationKeyframes',\n    'placeholderTextColor',\n    'pointerEvents',\n    'scrollbarWidth',\n  ],\n  allowedStyleObject: [\n    'transform',\n    'shadowOffset',\n    'textShadowOffset',\n    'animationKeyframes',\n  ],\n}\n","import { useMemo } from 'react'\nimport { flattenStyle } from './flattenStyle'\nimport { addStylesToDom, getSelector, filterRules } from './injectHelpers'\nimport {\n  isArr,\n  isObj,\n  flatArr,\n  noOpObj,\n  deepMerge,\n  eitherArr,\n  hyphenator,\n  isEmptyColl,\n} from '@keg-hub/jsutils'\nimport { useTheme } from '../hooks/useTheme'\nimport {\n  prefixStyles,\n  createReactDOMStyle,\n  createCompileableStyle,\n} from './reactNativeWeb'\nimport { ruleOverrides } from '../constants/ruleOverrides'\n\n/**\n * Checks if the rule is enforce and adds !important to it\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nconst checkImportant = (property, value, important) =>\n  important.includes(property) ? `${value} !important` : value\n\n/**\n * Creates a style rules string from a JS object\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const createBlock = (style, config) => {\n  const important = ruleOverrides.important.concat(config?.important)\n  const prefixed = prefixStyles(createReactDOMStyle(style))\n  const cssString = Object.keys(prefixed)\n    .map(property => {\n      const value = checkImportant(property, prefixed[property], important)\n      const prop = hyphenator(property)\n\n      return isArr(value)\n        ? value.map(val => `${prop}:${val}`).join(';')\n        : `${prop}:${value}`\n    })\n    .sort()\n    .join(';')\n\n  return cssString.length ? `{${cssString};}` : `{}`\n}\n\n/**\n * Converts a JS style object into a style rules string\n * @param {Object} style - Styles rules to be converted to style rules string\n *\n * @returns {string} - Style rules Object converted into a style rules string\n */\nexport const convertToCss = (style, config) => {\n  const stl = deepMerge(...flatArr(eitherArr(style, [style])))\n  const rules = { blocks: [], filtered: {} }\n\n  if (!isObj(stl)) return rules\n\n  const { style: cleanStyle, filtered } = filterRules(stl, config?.filter)\n  rules.filtered = filtered\n\n  // If all rules were filtered, then skip compiling them\n  if (!cleanStyle || isEmptyColl(cleanStyle)) return rules\n\n  const flat = flattenStyle(cleanStyle)\n  const compiled = createCompileableStyle(flat)\n  rules.blocks.push(createBlock(compiled, config))\n\n  return rules\n}\n\n/**\n * Custom hook to convert a JS style object into a valid css string\n * <br/>After converting it, it appends it to the Dom\n * <br/>It also keeps a hash of all appended styles rules to avoid duplication\n * @param {Object} style - Styles rules to be converted and added to the Dom\n * @param {string|Array<string>} className - Css selector(s) of the style fules\n *\n * @returns {Object} - {\n *    classNames: a string of classes to pass to a component\n *    css: css rules applied to the dom,\n *    filteredStyle: style object to pass to a component\n * }\n */\nexport const useStyleTag = (style, className = '', config) => {\n  // Ensure config is an object\n  config = isObj(config) ? config : noOpObj\n\n  const theme = useTheme()\n  const themeSize = theme?.RTMeta?.size\n  const themeKey = theme?.RTMeta?.key\n\n  return useMemo(() => {\n    const css = { all: '', rules: [] }\n    const { blocks, filtered } = convertToCss(style, config)\n\n    if(!blocks.length)\n      return {\n        css,\n        filteredStyle: filtered,\n        classNames: eitherArr(className, [className]).join(' '),\n      }\n\n    // Create a unique selector based on the className and built blocks\n    const { selector, classNames } = getSelector(\n      className,\n      blocks.join(''),\n      config.prefix || 'keg',\n      config.maxSelectors\n    )\n\n    // Adds the css selector ( className ) to each block\n    selector &&\n      blocks.map((block) => {\n        const fullBlock = `${selector}${block}`\n        css.all += fullBlock\n        css.rules.push(fullBlock)\n      })\n\n    css.all && addStylesToDom(selector, css)\n\n    return {\n      css,\n      classNames,\n      filteredStyle: filtered,\n    }\n  }, [ style, className, themeSize, themeKey, config ])\n}\n","import React from 'react'\nimport { useStyleTag } from './useStyleTag'\nimport { splitByKeys, noOpObj, isObj } from '@keg-hub/jsutils'\nimport { useCompiledStyles } from '../hooks/useCompiledStyles'\n\nlet __STYLE_INJECTOR_CONFIG__ = noOpObj\n\n/**\n *\n * Joins the component config with the global style injector config\n * @param {Object} config - Component config\n *\n * @param {Object} config - Joined Component config\n */\nconst buildConfig = config => {\n  const maxSelectors = config.kegComponent\n    ? config.maxSelectors\n    : __STYLE_INJECTOR_CONFIG__.maxSelectors\n  return {\n    ...config,\n    ...__STYLE_INJECTOR_CONFIG__,\n    maxSelectors: maxSelectors || 0,\n  }\n}\n\n/**\n * Helper component that actually calls the useStyleTag hook\n * Call the useStyleTag hook here to allow calling the hook conditionally\n * and not break the rules of Hooks\n * @param {Object} props - All props passed to the wrapped Component\n * @param {Object} props.Component - Component being wrapped by the HOC\n * @param {string} props.KegDefClass - Default className of the wrapped Component\n * @param {Object} props.style - Styles to be added to the Dom\n *\n * @returns {string} - className Css selector of the added style rules\n */\nconst BuildWithStyles = React.forwardRef((props, ref) => {\n  const {\n    config,\n    children,\n    Component,\n    className,\n    styleProp,\n    splitStyles: style,\n    ...buildProps\n  } = props\n\n  const { className: KegDefClass } = config\n  const compiled = useCompiledStyles(style)\n  const { classNames, filteredStyle } = useStyleTag(\n    compiled,\n    className || KegDefClass,\n    config\n  )\n\n  return (\n    <Component\n      {...buildProps}\n      {...{ [styleProp]: filteredStyle }}\n      ref={ref}\n      className={classNames}\n    >\n      { children }\n    </Component>\n  )\n})\n\n/**\n * Custom Hoc that wraps a component, and extracts the style prop from props\n * It then appends the style props to the Dom\n * Component must accept a className prop to work properly\n * @param {Object} Component - React Component to wrap\n * @param {Object} [config] - Settings for the Hoc\n *\n * @returns {Function} - Anonymous function that wraps the passed in Component\n */\nexport const StyleInjector = (Component, config = noOpObj) => {\n  config = buildConfig(config)\n\n  return React.forwardRef((allProps, ref) => {\n    const styleProp = allProps.__reStyleStylePropKey__ || 'style'\n\n    // separate the styles via the internal __reStyleStylePropKey value and key name\n    // We use __reStyleStylePropKey__ to not override a prop from a consumer\n    // It's possible __reStyleStylePropKey__ could be reused, but unlikely\n    // And it only matters when using reStyle and __reStyleStylePropKey\n    // It contains the prop key name that should be used for accessing the styles in the props\n    const [ styleSplit, props ] = splitByKeys(allProps, [\n      styleProp,\n      '__reStyleStylePropKey__',\n    ])\n\n    // Get only the styles, and ignore the styleProp\n    const styles = styleSplit[styleProp]\n\n    /**\n     * If NO styles\n     *  * return the component passing on the props and ref, and falsy styles by styleProp key\n     * If styles do exist\n     *  * Pass on the props, and separated (splitStyles) to the BuildWithStyles component\n     */\n    return !styles || styles === noOpObj ? (\n      <Component\n        {...props}\n        {...{ [styleProp]: styles }}\n        ref={ref}\n      />\n    ) : (\n      <BuildWithStyles\n        {...props}\n        ref={ref}\n        config={config}\n        Component={Component}\n        splitStyles={styles}\n        styleProp={styleProp}\n      />\n    )\n  })\n}\n\n/**\n * Helper to set the global config object for reStyle\n * @param {Object} config - Config settings for global reStyle\n * @param {string} config.className - Default className applied to components\n * @param {string} [config.prefix=keg] - Class prefix to prefix to hashed classNames\n * @param {Array} [config.filter] - Group of style rules that should be **ignored** by reStyle\n * @param {string} [config.maxSelectors=1] - Number of selectors used when applying styles\n * @param {Array} [config.important] - Group of style rules that should have `!important` appended to them\n */\nStyleInjector.setConfig = config => {\n  if (!isObj(config))\n    console.warn(`Injector config must be an \"Object\". Instead got`, config)\n\n  __STYLE_INJECTOR_CONFIG__ = config\n}\n"],"names":["KegStyleSheet","loopArrStyle","style","result","i","styleLength","length","computedStyle","flattenStyle","key","value","Array","isArray","undefined","ruleOverrides","important","filter","allowedStyleObject","domAccess","hasDomAccess","selectorCache","Set","selectorExists","selector","has","getKegSheet","document","head","querySelector","Constants","KEG_STYLES_TAG_ID","formatSelectors","hashClass","classNames","prefix","maxSelectors","selectorAmount","exists","selectors","cls","startsWith","reverse","slice","sort","reduce","acc","sel","push","split","concat","join","trim","getSelector","className","cssString","hashString","isArr","isStr","noPropArr","addStylesToDom","css","all","add","sheet","insertRule","err","console","error","addThemeEvent","BUILD_EVENT","clear","textContent","createElement","id","append","createBlock","config","prefixed","prefixStyles","createReactDOMStyle","Object","keys","map","property","includes","checkImportant","prop","hyphenator","val","convertToCss","stl","deepMerge","flatArr","eitherArr","rules","blocks","filtered","isObj","toFilter","primitives","subStyleProps","subStyleObjs","entries","splitByKeys","filterRules","cleanStyle","isEmptyColl","flat","compiled","createCompileableStyle","useStyleTag","noOpObj","theme","useTheme","themeSize","RTMeta","_theme$RTMeta","size","themeKey","_theme$RTMeta2","useMemo","filteredStyle","block","fullBlock","__STYLE_INJECTOR_CONFIG__","buildConfig","kegComponent","BuildWithStyles","React","forwardRef","props","ref","children","Component","styleProp","splitStyles","buildProps","KegDefClass","useCompiledStyles","StyleInjector","allProps","__reStyleStylePropKey__","styleSplit","styles","setConfig","warn"],"mappings":"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"}