{"version":3,"file":"reStyle.js","sources":["../../../src/styleInjector/index.native.js","../../../src/reStyle/reStyleHooks.js","../../../src/reStyle/reStyle.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { noPropArr } from '@keg-hub/jsutils'\n\n/**\n * Stub for Native StyleInjector calls, just renders the component\n */\nexport const StyleInjector = Component => props => <Component {...props} />\n\n/**\n * Stub for Native useStyleTag calls\n * Returns an object matching the useStyleTag hook\n */\nexport const useStyleTag = (style, className = '') =>\n  useMemo(\n    () => ({\n      filteredStyle: style,\n      css: { all: '', rules: noPropArr },\n      classNames: className,\n    }),\n    [ style, className ]\n  )\n","import { useMemo, useRef } from 'react'\nimport { useTheme } from '../hooks/useTheme'\nimport {\n  ensureArr,\n  uuid,\n  isObj,\n  deepMerge,\n  noOpObj,\n  isFunc,\n  shallowEqual,\n} from '@keg-hub/jsutils'\n\n/**\n * Helper to get the name of a component, or an ID for reference\n * @function\n * @param {React.Component} Component - Component to get the name from\n *\n * @returns {string} - Name of the Component or generated id when name does not exist\n */\nexport const getComponentName = Component => {\n  return (\n    Component.displayName ||\n    Component.name ||\n    `keg-${uuid().split('-')\n      .slice(4)\n      .join('')}`\n  )\n}\n\n/**\n * Hook to ensure the className prop is an array with the compName argument added to it\n * @function\n * @param {String|Array} className - Current class names already set\n * @param {string} compName - Name of a component to be added as a class name\n *\n * @returns {Array} - Built array of class names with the compName name added to it\n */\nexport const usePropClassName = (className, compName) => {\n  return useMemo(() => {\n    const classArr = className ? ensureArr(className) : []\n    compName && classArr.push(compName)\n\n    return classArr\n  }, [ className, compName ])\n}\n\n/**\n * Hook that memoizes the merged objects using a shallow-equal comparison\n * @function\n * @param {Object} reStyles - Styles generated form useReStyles hook\n * @param {Object} styleFromProps - Styles passed in from props\n *\n * @returns {Object} - merged object\n */\nexport const useShallowMemoMerge = (reStyles, styleFromProps) => {\n  const identity = useRef(null)\n\n  return useMemo(() => {\n    if (!styleFromProps || styleFromProps === noOpObj) return reStyles\n    if (!reStyles || reStyles === noOpObj) return styleFromProps\n\n    const merged = deepMerge(reStyles, ...ensureArr(styleFromProps))\n\n    const foundIdentity = shallowEqual(identity.current, merged)\n      ? identity.current\n      : merged\n\n    // if the merged object is shallowly different than the cached identity,\n    // update the identity\n    if (foundIdentity !== identity.current) {\n      identity.current = foundIdentity\n    }\n\n    return foundIdentity\n  }, [ reStyles, styleFromProps ])\n}\n\n/**\n * Hook to memoize the styles and return them\n * <br/> Calls styleData when its a function passing in the theme and props\n * @function\n * @param {Object|function} styleData - Custom styles or function return custom styles\n * @param {Object} props - Props of the component being wrapped\n *\n * @returns {Object} - Build styles object\n */\nexport const useReStyles = (styleData, props) => {\n  const theme = useTheme()\n  const lastProps = useRef(props)\n\n  useMemo(() => {\n    !shallowEqual(props, lastProps.current) && (lastProps.current = props)\n  }, [ props, lastProps ])\n\n  return useMemo(() => {\n    return isFunc(styleData)\n      ? styleData(theme, lastProps.current)\n      : isObj(styleData)\n        ? styleData\n        : noOpObj\n  }, [ theme, styleData, lastProps.current ])\n}\n\n/**\n * Merges props\n * @param {Object} props - component props\n * @param {*} defaultProps - optional default props defined at reStyle site\n * @returns {Object} - merged props and defaultProps\n */\nexport const useMergedProps = (props, defaultProps) => {\n  // defaultProps will never change, so we can safely short circuit\n  // if it's undefined\n  if (!defaultProps) return props\n\n  const theme = useTheme()\n\n  const finalDefProps = useMemo(\n    () => (isFunc(defaultProps) ? defaultProps(theme) : defaultProps),\n    [ theme, props, defaultProps ]\n  )\n\n  return useMemo(() => ({ ...finalDefProps, ...props }), [ finalDefProps, props ])\n}\n","import React from 'react'\nimport { StyleInjector } from 'StyleInjector'\nimport { exists, noOpObj, isObj } from '@keg-hub/jsutils'\n\nimport {\n  useReStyles,\n  useMergedProps,\n  getComponentName,\n  usePropClassName,\n  useShallowMemoMerge,\n} from './reStyleHooks'\n\n/**\n * Builds a HOC, with custom styles injected into it\n * @function\n * @param {React.Component} Component - Component to wrap with custom styles\n * @param {string} [styleProp='style'] - Alternate props key to use other then 'style'\n * @param {Object} [config] - Custom config, overrides the global reStyle config\n *\n * @returns {React.Component} HOC that will inject the custom styles\n */\nexport const reStyle = (Component, styleProp = 'style', config = noOpObj) => {\n  const compName = getComponentName(Component)\n  const InjectedComp = StyleInjector(Component, {\n    className: compName,\n    displayName: compName,\n    ...config,\n  })\n\n  /**\n   * @param {Object | Function} styleData - theme or theme function (theme, props) => styles\n   * @param {Object | Function} defaultProps - default props or function that returns default props (theme) => defaultProps\n   */\n  return (styleData, defaultProps) => {\n    const StyledFun = React.forwardRef((props, ref) => {\n      const reStyles = useReStyles(styleData, props)\n      const classArr = usePropClassName(props.className, compName)\n      const styleFromProps = exists(props[styleProp]) ? props[styleProp] : null\n\n      const styles = useShallowMemoMerge(reStyles, styleFromProps)\n      const mergedProps = useMergedProps(props, defaultProps)\n\n      return (\n        <InjectedComp\n          {...mergedProps}\n          {...{ [styleProp]: styles }}\n          ref={ref}\n          className={classArr}\n          __reStyleStylePropKey__={styleProp}\n        />\n      )\n    })\n\n    StyledFun.displayName = `reStyle(${compName})`\n\n    return StyledFun\n  }\n}\n\n/**\n * Helper to set the global config object for reStyle\n * @param {Object} config - Config settings for global reStyle\n * @param {string} config.className - Default className applied to components\n * @param {string} [config.prefix=keg] - Class prefix to prefix to hashed classNames\n * @param {Array} [config.filter] - Group of style rules that should be **ignored** by reStyle\n * @param {string} [config.maxSelectors=1] - Number of selectors used when applying styles\n * @param {Array} [config.important] - Group of style rules that should have `!important` appended to them\n */\nreStyle.setConfig = config => {\n  if (!isObj(config))\n    console.warn(`Restyle config must be an \"Object\". Instead got`, config)\n\n  StyleInjector.setConfig(config)\n}\n"],"names":["StyleInjector","Component","props","React","getComponentName","displayName","name","uuid","split","slice","join","usePropClassName","className","compName","useMemo","classArr","ensureArr","push","useShallowMemoMerge","reStyles","styleFromProps","identity","useRef","noOpObj","merged","deepMerge","foundIdentity","shallowEqual","current","useReStyles","styleData","theme","useTheme","lastProps","isFunc","isObj","useMergedProps","defaultProps","finalDefProps","reStyle","styleProp","config","InjectedComp","StyledFun","forwardRef","ref","exists","styles","mergedProps","__reStyleStylePropKey__","setConfig","console","warn"],"mappings":"wRAMaA,cAAgB,SAAAC,UAAa,SAAAC,UAASC,wBAACF,EAAcC,KCarDE,iBAAmB,SAAAH,UAE5BA,EAAUI,aACVJ,EAAUK,oBACHC,SAAOC,MAAM,KACjBC,MAAM,GACNC,KAAK,MAYCC,iBAAmB,SAACC,EAAWC,UACnCC,WAAQ,eACPC,EAAWH,EAAYI,YAAUJ,GAAa,UACpDC,GAAYE,EAASE,KAAKJ,GAEnBE,IACN,CAAEH,EAAWC,KAWLK,oBAAsB,SAACC,EAAUC,OACtCC,EAAWC,SAAO,aAEjBR,WAAQ,eACRM,GAAkBA,IAAmBG,UAAS,OAAOJ,MACrDA,GAAYA,IAAaI,UAAS,OAAOH,MAExCI,EAASC,0BAAUN,+BAAaH,YAAUI,MAE1CM,EAAgBC,eAAaN,EAASO,QAASJ,GACjDH,EAASO,QACTJ,SAIAE,IAAkBL,EAASO,UAC7BP,EAASO,QAAUF,GAGdA,IACN,CAAEP,EAAUC,KAYJS,YAAc,SAACC,EAAW5B,OAC/B6B,EAAQC,aACRC,EAAYX,SAAOpB,UAEzBY,WAAQ,YACLa,eAAazB,EAAO+B,EAAUL,WAAaK,EAAUL,QAAU1B,KAC/D,CAAEA,EAAO+B,IAELnB,WAAQ,kBACNoB,SAAOJ,GACVA,EAAUC,EAAOE,EAAUL,SAC3BO,QAAML,GACJA,EACAP,YACL,CAAEQ,EAAOD,EAAWG,EAAUL,WAStBQ,eAAiB,SAAClC,EAAOmC,OAG/BA,EAAc,OAAOnC,MAEpB6B,EAAQC,aAERM,EAAgBxB,WACpB,kBAAOoB,SAAOG,GAAgBA,EAAaN,GAASM,IACpD,CAAEN,EAAO7B,EAAOmC,WAGXvB,WAAQ,uDAAYwB,GAAkBpC,KAAU,CAAEoC,EAAepC,KCpG7DqC,QAAU,SAACtC,OAAWuC,yDAAY,QAASC,yDAASlB,UACzDV,EAAWT,iBAAiBH,GAC5ByC,EAAe1C,cAAcC,oBACjCW,UAAWC,EACXR,YAAaQ,GACV4B,WAOE,SAACX,EAAWO,OACXM,EAAYxC,UAAMyC,YAAW,SAAC1C,EAAO2C,OACnC1B,EAAWU,YAAYC,EAAW5B,GAClCa,EAAWJ,iBAAiBT,EAAMU,UAAWC,GAC7CO,EAAiB0B,SAAO5C,EAAMsC,IAActC,EAAMsC,GAAa,KAE/DO,EAAS7B,oBAAoBC,EAAUC,GACvC4B,EAAcZ,eAAelC,EAAOmC,UAGxClC,wBAACuC,gBACKM,uBACGR,EAAYO,IACnBF,IAAKA,EACLjC,UAAWG,EACXkC,wBAAyBT,eAK/BG,EAAUtC,8BAAyBQ,OAE5B8B,IAaXJ,QAAQW,UAAY,SAAAT,GACbN,QAAMM,IACTU,QAAQC,uDAAwDX,GAElEzC,cAAckD,UAAUT"}