{"version":3,"file":"reStyle.js","sources":["../../../src/reStyle/reStyleHooks.js","../../../src/reStyle/reStyle.js"],"sourcesContent":["import { useTheme } from '../hooks/useTheme'\nimport { useMemo, useState, useEffect, useRef } from 'react'\nimport {\n  ensureArr,\n  uuid,\n  isObj,\n  deepMerge,\n  noOpObj,\n  isFunc,\n  shallowEqual,\n} from '@keg-hub/jsutils'\n\n/**\n * Helper to get the name of a component, or an ID for reference\n * @function\n * @param {React.Component} Component - Component to get the name from\n *\n * @returns {string} - Name of the Component or generated id when name does not exist\n */\nexport const getComponentName = Component => {\n  return (\n    Component.displayName ||\n    Component.name ||\n    `keg-${uuid().split('-')\n      .slice(4)\n      .join('')}`\n  )\n}\n\n/**\n * Hook to ensure the className prop is an array with the compName argument added to it\n * @function\n * @param {String|Array} className - Current class names already set\n * @param {string} compName - Name of a component to be added as a class name\n *\n * @returns {Array} - Built array of class names with the compName name added to it\n */\nexport const usePropClassName = (className, compName) => {\n  return useMemo(() => {\n    const classArr = className ? ensureArr(className) : []\n    compName && classArr.push(compName)\n\n    return classArr\n  }, [ className, compName ])\n}\n\n/**\n * Hook that memoizes the merged objects using a shallow-equal comparison\n * @function\n * @param {...Object} mergeObjs - objects to be merged, provided there is a shallow difference from the last call\n *\n * @returns {Object} - merged object\n */\nexport const useShallowMemoMerge = (...mergeObjs) => {\n  const identity = useRef(null)\n\n  return useMemo(() => {\n    const merged = deepMerge(...mergeObjs)\n\n    const foundIdentity = shallowEqual(identity.current, merged)\n      ? identity.current\n      : merged\n\n    // if the merged object is shallowly different than the cached identity,\n    // update the identity\n    if (foundIdentity !== identity.current) {\n      identity.current = foundIdentity\n    }\n\n    return foundIdentity\n  }, [...mergeObjs])\n}\n\n/**\n * Hook to memoize the styles and return them\n * <br/> Calls styleData when its a function passing in the theme and props\n * @function\n * @param {Object|function} styleData - Custom styles or function return custom styles\n * @param {Object} props - Props of the component being wrapped\n *\n * @returns {Object} - Build styles object\n */\nexport const useReStyles = (styleData, props) => {\n  const theme = useTheme()\n  const [ stateProps, setStateProps ] = useState(props)\n  const propsEqual = shallowEqual(props, stateProps)\n\n  useEffect(() => {\n    !propsEqual && setStateProps(props)\n  }, [propsEqual])\n\n  return useMemo(() => {\n    return isFunc(styleData)\n      ? styleData(theme, props)\n      : isObj(styleData)\n        ? styleData\n        : noOpObj\n  }, [ theme, styleData, propsEqual ])\n}\n\n/**\n * Merges props\n * @param {Object} props - component props\n * @param {*} defaultProps - optional default props defined at reStyle site\n * @returns {Object} - merged props and defaultProps\n */\nexport const useMergedProps = (props, defaultProps) => {\n  // defaultProps will never change, so we can safely short circuit\n  // if it's undefined\n  if (!defaultProps) return props\n\n  const theme = useTheme()\n\n  const finalDefProps = useMemo(\n    () => (isFunc(defaultProps) ? defaultProps(theme) : defaultProps),\n    [ theme, props, defaultProps ]\n  )\n\n  return useMemo(() => ({ ...finalDefProps, ...props }), [ finalDefProps, props ])\n}\n","import React from 'react'\nimport { exists } from '@keg-hub/jsutils'\nimport { StyleInjector } from 'StyleInjector'\n\nimport {\n  getComponentName,\n  useShallowMemoMerge,\n  usePropClassName,\n  useReStyles,\n  useMergedProps,\n} from './reStyleHooks'\n\n/**\n * Builds a HOC, with custom styles injected into it\n * @function\n * @param {React.Component} Component - Component to wrap with custom styles\n * @param {string} [styleProp='style'] - Alternate props key to use other then 'style'\n *\n * @returns {React.Component} HOC that will inject the custom styles\n */\nexport const reStyle = (Component, styleProp = 'style') => {\n  const compName = getComponentName(Component)\n  const InjectedComp = StyleInjector(Component, {\n    displayName: compName,\n    className: compName,\n  })\n\n  /**\n   * @param {Object | Function} styleData - theme or theme function (theme, props) => styles\n   * @param {Object | Function} defaultProps - default props or function that returns default props (theme) => defaultProps\n   */\n  return (styleData, defaultProps) => {\n    const StyledFun = React.forwardRef((props, ref) => {\n      const reStyles = useReStyles(styleData, props)\n      const classArr = usePropClassName(props.className, compName)\n      const styleFromProps = exists(props[styleProp]) ? props[styleProp] : null\n\n      const styles = useShallowMemoMerge(reStyles, styleFromProps)\n\n      const mergedProps = useMergedProps(props, defaultProps)\n\n      return (\n        <InjectedComp\n          {...mergedProps}\n          {...{ [styleProp]: styles }}\n          style={styles}\n          className={classArr}\n          ref={ref}\n        />\n      )\n    })\n\n    StyledFun.displayName = `reStyle(${compName})`\n\n    return StyledFun\n  }\n}\n"],"names":["getComponentName","Component","displayName","name","uuid","split","slice","join","usePropClassName","className","compName","useMemo","classArr","ensureArr","push","useShallowMemoMerge","mergeObjs","identity","useRef","merged","deepMerge","foundIdentity","shallowEqual","current","useReStyles","styleData","props","theme","useTheme","useState","stateProps","setStateProps","propsEqual","useEffect","isFunc","isObj","noOpObj","useMergedProps","defaultProps","finalDefProps","styleProp","InjectedComp","StyleInjector","StyledFun","React","forwardRef","ref","reStyles","styleFromProps","exists","styles","mergedProps","style"],"mappings":"2kBAmBaA,iBAAmB,SAAAC,UAE5BA,EAAUC,aACVD,EAAUE,oBACHC,SAAOC,MAAM,KACjBC,MAAM,GACNC,KAAK,MAYCC,iBAAmB,SAACC,EAAWC,UACnCC,WAAQ,eACPC,EAAWH,EAAYI,YAAUJ,GAAa,UACpDC,GAAYE,EAASE,KAAKJ,GAEnBE,IACN,CAAEH,EAAWC,KAULK,oBAAsB,sCAAIC,2BAAAA,sBAC/BC,EAAWC,SAAO,aAEjBP,WAAQ,eACPQ,EAASC,yBAAaJ,GAEtBK,EAAgBC,eAAaL,EAASM,QAASJ,GACjDF,EAASM,QACTJ,SAIAE,IAAkBJ,EAASM,UAC7BN,EAASM,QAAUF,GAGdA,cACFL,KAYIQ,YAAc,SAACC,EAAWC,OAC/BC,EAAQC,eACwBC,WAASH,2BAAvCI,OAAYC,OACdC,EAAaV,eAAaI,EAAOI,UAEvCG,aAAU,YACPD,GAAcD,EAAcL,KAC5B,CAACM,IAEGrB,WAAQ,kBACNuB,SAAOT,GACVA,EAAUE,EAAOD,GACjBS,QAAMV,GACJA,EACAW,YACL,CAAET,EAAOF,EAAWO,KASZK,eAAiB,SAACX,EAAOY,OAG/BA,EAAc,OAAOZ,MAEpBC,EAAQC,aAERW,EAAgB5B,WACpB,kBAAOuB,SAAOI,GAAgBA,EAAaX,GAASW,IACpD,CAAEX,EAAOD,EAAOY,WAGX3B,WAAQ,uDAAY4B,GAAkBb,KAAU,CAAEa,EAAeb,qBClGnD,SAACzB,OAAWuC,yDAAY,QACvC9B,EAAWV,iBAAiBC,GAC5BwC,EAAeC,gBAAczC,EAAW,CAC5CC,YAAaQ,EACbD,UAAWC,WAON,SAACe,EAAWa,OACXK,EAAYC,UAAMC,YAAW,SAACnB,EAAOoB,OACnCC,EAAWvB,YAAYC,EAAWC,GAClCd,EAAWJ,iBAAiBkB,EAAMjB,UAAWC,GAC7CsC,EAAiBC,SAAOvB,EAAMc,IAAcd,EAAMc,GAAa,KAE/DU,EAASnC,oBAAoBgC,EAAUC,GAEvCG,EAAcd,eAAeX,EAAOY,UAGxCM,wBAACH,gBACKU,uBACGX,EAAYU,IACnBE,MAAOF,EACPzC,UAAWG,EACXkC,IAAKA,eAKXH,EAAUzC,8BAAyBQ,OAE5BiC"}