{"version":3,"file":"set-e8f4486d.js","sources":["../../src/collection/updateColl.js","../../src/collection/set.js"],"sourcesContent":["/** @module Collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isArr } from '../array/isArr'\nimport { isColl } from './isColl'\n\n/**\n * Updates a collection by removing, getting, adding to it.\n * @private\n * @function\n * @param {Object} obj - Object to update\n * @param {String|Array} path - Dot notation or Array path to the property to be updated\n * @param {String} type - Type of update to make to the obj argument\n * @param {*} val - Value to set or return based on the type argument\n * @returns {*} - Relative to the type argument\n */\nexport const updateColl = (obj, path, type, val) => {\n  const org = obj\n  if (!isColl(obj) || !obj || !path) return (type !== 'set' && val) || undefined\n\n  // cloneDeep so we don't modify the reference\n  const parts = isArr(path) ? Array.from(path) : path.split('.')\n  const key = parts.pop()\n  let prop\n  let breakPath\n\n  while ((prop = parts.shift())) {\n    const next = obj[prop]\n\n    isColl(next) || isFunc(next)\n      ? (obj = next)\n      : (() => {\n          if (type === 'set') obj[prop] = {}\n          else breakPath = true\n          obj = obj[prop]\n        })()\n\n    if (breakPath) return val\n  }\n\n  return type === 'get'\n    ? // Get return the value\n    key in obj\n      ? obj[key]\n      : val\n    : type === 'unset'\n      ? // Unset, return if the key was removed\n      delete obj[key]\n      : // Set, updated object\n        ((obj[key] = val) && org) || org\n}\n","/** @module Collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Adds a path to an object.\n * <br/>If the path already exists, but not in the correct format it will be replaced.\n * <br/>The path is built from a `.` separated string.\n * <br/>I.E. path = 'data.foo.bar' => obj.data.foo.bar will be created on the object.\n * @example\n * set(obj, [ 'foo', 'bar' ], 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @example\n * set(obj, 'foo.bar', 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @function\n * @param {Object} obj - Object to have the path added to it\n * @param {String|Array} path - Path that should be created on the object, separated by .\n * @param {*} finalValue - When ever the final value of the path should be\n * @return {Object} - The obj with the passed in value set to the passed in path\n */\nexport const set = (obj, path, val) => updateColl(obj, path, 'set', val)\n"],"names":["updateColl","obj","path","type","val","org","isColl","undefined","parts","isArr","Array","from","split","key","pop","prop","breakPath","shift","next","isFunc","set"],"mappings":";;;;AAgBO,MAAMA,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,GAAlB,KAA0B;EAClD,MAAMC,GAAG,GAAGJ,GAAZ,CAAA;EACA,IAAI,CAACK,MAAM,CAACL,GAAD,CAAP,IAAgB,CAACA,GAAjB,IAAwB,CAACC,IAA7B,EAAmC,OAAQC,IAAI,KAAK,KAAT,IAAkBC,GAAnB,IAA2BG,SAAlC,CAFe;AAKlD,EAAA,MAAMC,KAAK,GAAGC,KAAK,CAACP,IAAD,CAAL,GAAcQ,KAAK,CAACC,IAAN,CAAWT,IAAX,CAAd,GAAiCA,IAAI,CAACU,KAAL,CAAW,GAAX,CAA/C,CAAA;AACA,EAAA,MAAMC,GAAG,GAAGL,KAAK,CAACM,GAAN,EAAZ,CAAA;AACA,EAAA,IAAIC,IAAJ,CAAA;AACA,EAAA,IAAIC,SAAJ,CAAA;AAEA,EAAA,OAAQD,IAAI,GAAGP,KAAK,CAACS,KAAN,EAAf,EAA+B;AAC7B,IAAA,MAAMC,IAAI,GAAGjB,GAAG,CAACc,IAAD,CAAhB,CAAA;AAEAT,IAAAA,MAAM,CAACY,IAAD,CAAN,IAAgBC,MAAM,CAACD,IAAD,CAAtB,GACKjB,GAAG,GAAGiB,IADX,GAEI,CAAC,MAAM;AACL,MAAA,IAAIf,IAAI,KAAK,KAAb,EAAoBF,GAAG,CAACc,IAAD,CAAH,GAAY,EAAZ,CAApB,KACKC,SAAS,GAAG,IAAZ,CAAA;AACLf,MAAAA,GAAG,GAAGA,GAAG,CAACc,IAAD,CAAT,CAAA;AACD,KAJD,GAFJ,CAAA;IAQA,IAAIC,SAAJ,EAAe,OAAOZ,GAAP,CAAA;AAChB,GAAA;EAED,OAAOD,IAAI,KAAK,KAAT;AAELU,EAAAA,GAAG,IAAIZ,GAAP,GACIA,GAAG,CAACY,GAAD,CADP,GAEIT,GAJC,GAKHD,IAAI,KAAK,OAAT;AAEA,EAAA,OAAOF,GAAG,CAACY,GAAD,CAFV;EAIG,CAACZ,GAAG,CAACY,GAAD,CAAH,GAAWT,GAAZ,KAAoBC,GAArB,IAA6BA,GATnC,CAAA;AAUD;;MC7BYe,GAAG,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAYE,GAAZ,KAAoBJ,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,KAAZ,EAAmBE,GAAnB;;;;"}