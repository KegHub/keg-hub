{"version":3,"file":"mod-c906a82d.js","sources":["../../src/number/isNegative.js","../../src/number/isPositive.js","../../src/number/isFloat.js","../../src/number/isInt.js","../../src/number/nth.js","../../src/number/toFloat.js","../../src/number/toInt.js","../../src/number/mod.js"],"sourcesContent":["import { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a negative number\n * @example isNegative(-1) // true\n * @example isNegative(0) // false\n */\nexport const isNegative = x => isNum(x) && x < 0\n","import { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a positive number\n * @example isPositive(0) // false\n * @example isPositive(1) // true\n */\nexport const isPositive = x => isNum(x) && x > 0\n","import { isNum } from './isNum'\n\n/**\n * Checks if a number is a Float.\n * @example\n * isFloat(1.23)\n * // Returns true\n * @example\n * isFloat('1.2')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Float\n */\nexport const isFloat = val => isNum(val) && val % 1 !== 0\n","import { isNum } from './isNum'\n\n/**\n * Checks if a number is an integer.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Int\n */\nexport const isInt = val => isNum(val) && val % 1 === 0\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\nimport { toNum } from './toNum'\n\n/**\n * Finds the number ext base on the passed in number.\n * @example\n * nth(1)\n * // Returns 'st'\n * @example\n * nth(2)\n * // Returns 'nd'\n * @example\n * nth(5)\n * // Returns 'th'\n * @function\n * @param {Number} num - value to check\n * @return {String} ext of the number\n */\nexport const nth = num => {\n  if (!isNum(num)) {\n    num = getNums(num)\n    if (!num) return ''\n    num = toNum(num)\n    if (equalsNaN(num)) return ''\n  }\n\n  const mod = num % 100\n  if (mod >= 10 && mod <= 20) return 'th'\n\n  switch (num % 10) {\n  case 1:\n    return 'st'\n  case 2:\n    return 'nd'\n  case 3:\n    return 'rd'\n  default:\n    return 'th'\n  }\n}\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to a float.\n * @example\n * toFloat('1.34')\n * // Returns 1.34\n * @example\n * toFloat(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to an float\n */\nexport const toFloat = val =>\n  (val && !equalsNaN(val) && parseFloat((isNum(val) && val) || getNums(val))) ||\n  0\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to an integer.\n * @example\n * toInt('1')\n * // Returns 1\n * @example\n * toInt(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to a integer\n */\nexport const toInt = val =>\n  (val && !equalsNaN(val) && parseInt((isNum(val) && val) || getNums(val))) || 0\n","/**\n * Returns the result of evaluation `num` modulo `divisor`.\n * Javascript's built-in modulo (%) operator does not process values\n * correctly when they are negative. This works properly with\n * negatives numbers.\n * @function\n * @param {Number} num\n * @param {Number} divisor\n * @return {number?} the modulo result. Should be equivalent to\n * return values from the `%` operator, except with negative `num` values.\n * @example\n * -1 % 10      // -1\n * mod(-1, 10)  // 9\n */\nexport const mod = (num, divisor) => {\n  return ((num % divisor) + divisor) % divisor\n}\n"],"names":["isNegative","x","isNum","isPositive","isFloat","val","isInt","nth","num","getNums","toNum","equalsNaN","mod","toFloat","parseFloat","toInt","parseInt","divisor"],"mappings":";;;MASaA,UAAU,GAAGC,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,IAAYA,CAAC,GAAG;;MCAlCE,UAAU,GAAGF,CAAC,IAAIC,KAAK,CAACD,CAAD,CAAL,IAAYA,CAAC,GAAG;;MCKlCG,OAAO,GAAGC,GAAG,IAAIH,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAG,GAAG,CAAN,KAAY;;MCA3CC,KAAK,GAAGD,GAAG,IAAIH,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAG,GAAG,CAAN,KAAY;;MCMzCE,GAAG,GAAGC,GAAG,IAAI;AACxB,MAAI,CAACN,KAAK,CAACM,GAAD,CAAV,EAAiB;AACfA,IAAAA,GAAG,GAAGC,OAAO,CAACD,GAAD,CAAb;AACA,QAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AACVA,IAAAA,GAAG,GAAGE,KAAK,CAACF,GAAD,CAAX;AACA,QAAIG,SAAS,CAACH,GAAD,CAAb,EAAoB,OAAO,EAAP;AACrB;AAED,QAAMI,GAAG,GAAGJ,GAAG,GAAG,GAAlB;AACA,MAAII,GAAG,IAAI,EAAP,IAAaA,GAAG,IAAI,EAAxB,EAA4B,OAAO,IAAP;AAE5B,UAAQJ,GAAG,GAAG,EAAd;AACA,SAAK,CAAL;AACE,aAAO,IAAP;AACF,SAAK,CAAL;AACE,aAAO,IAAP;AACF,SAAK,CAAL;AACE,aAAO,IAAP;AACF;AACE,aAAO,IAAP;AARF;AAUD;;MCzBYK,OAAO,GAAGR,GAAG,IACvBA,GAAG,IAAI,CAACM,SAAS,CAACN,GAAD,CAAjB,IAA0BS,UAAU,CAAEZ,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAf,IAAuBI,OAAO,CAACJ,GAAD,CAA/B,CAArC,IACA;;MCFWU,KAAK,GAAGV,GAAG,IACrBA,GAAG,IAAI,CAACM,SAAS,CAACN,GAAD,CAAjB,IAA0BW,QAAQ,CAAEd,KAAK,CAACG,GAAD,CAAL,IAAcA,GAAf,IAAuBI,OAAO,CAACJ,GAAD,CAA/B,CAAnC,IAA6E;;MCHlEO,GAAG,GAAG,CAACJ,GAAD,EAAMS,OAAN,KAAkB;AACnC,SAAO,CAAET,GAAG,GAAGS,OAAP,GAAkBA,OAAnB,IAA8BA,OAArC;AACD;;;;"}