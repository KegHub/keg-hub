{"version":3,"file":"pipeline-e3f70bbe.js","sources":["../../src/method/applyToFunc.js","../../src/method/pipeline.js"],"sourcesContent":["/** @module Function */\n\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\n\n/**\n * Helper for pipeline. Passes 'item' into 'expression' as its first argument.\n * <br/>Expression may be a function or an array of form: [function, ...remainingArguments].\n * @function\n * @param {*} item\n * @param {*} expression\n */\nexport const applyToFunc = (item, expression) => {\n  if (isArr(expression)) {\n    const [ func, ...args ] = expression\n    return func(item, ...args)\n  }\n  else if (isFunc(expression)) {\n    return expression(item)\n  }\n  else {\n    console.error(\n      `Pipeline expected either a function or an array (for function expressions). Found ${typeof expression}`\n    )\n    return item\n  }\n}\n","/** @module Function */\n\nimport { applyToFunc } from './applyToFunc'\n\n/**\n * Function for making repeated nested function calls (the 'pipeline') succinct. Passes \"item\" into\n * <br/>the first function (as its first argument), takes its result and passes that into the next function, and repeats.\n * <br/>Continues until no functions remain, at which point it returns the value returned by the last function.\n * <br/> - you can also pass in an array in place of a function to specify a function to be called with some arguments. E.g.: [foo, 2, 3] would return foo(item, 2, 3)\n * @example: pipeline(1, addFour, subtract3, (x) => x * x) // would return 4\n * @function\n * @param {*} item - the starting input. If it is a function, it will be executed immediately and the result will be piped into the remaining functions.\n * @param {...Function} functions - Functions to be iterated over one after the other\n * @returns {*} - the final result of calling the pipeline of functions , starting with item as input\n */\nexport const pipeline = (item, ...functions) => {\n  return functions.reduce((result, fn) => applyToFunc(result, fn), item)\n}\n"],"names":["applyToFunc","item","expression","isArr","func","args","isFunc","console","error","pipeline","functions","reduce","result","fn"],"mappings":";;;MAYaA,WAAW,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC/C,EAAA,IAAIC,KAAK,CAACD,UAAD,CAAT,EAAuB;AACrB,IAAA,MAAM,CAAEE,IAAF,EAAQ,GAAGC,IAAX,IAAoBH,UAA1B,CAAA;AACA,IAAA,OAAOE,IAAI,CAACH,IAAD,EAAO,GAAGI,IAAV,CAAX,CAAA;AACD,GAHD,MAIK,IAAIC,MAAM,CAACJ,UAAD,CAAV,EAAwB;IAC3B,OAAOA,UAAU,CAACD,IAAD,CAAjB,CAAA;AACD,GAFI,MAGA;AACHM,IAAAA,OAAO,CAACC,KAAR,CACG,CAAoF,kFAAA,EAAA,OAAON,UAAW,CADzG,CAAA,CAAA,CAAA;AAGA,IAAA,OAAOD,IAAP,CAAA;AACD,GAAA;AACF;;ACXM,MAAMQ,QAAQ,GAAG,CAACR,IAAD,EAAO,GAAGS,SAAV,KAAwB;AAC9C,EAAA,OAAOA,SAAS,CAACC,MAAV,CAAiB,CAACC,MAAD,EAASC,EAAT,KAAgBb,WAAW,CAACY,MAAD,EAASC,EAAT,CAA5C,EAA0DZ,IAA1D,CAAP,CAAA;AACD;;;;"}