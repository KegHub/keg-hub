{"version":3,"file":"splitByKeys-f02fe7db.js","sources":["../../src/object/cloneJson.js","../../src/object/clearObj.js","../../src/object/eitherObj.js","../../src/object/deepMerge.js","../../src/object/applyToCloneOf.js","../../src/object/jsonEqual.js","../../src/object/isEntry.js","../../src/object/mapEntries.js","../../src/object/mapKeys.js","../../src/object/mapObj.js","../../src/object/isArrMap.js","../../src/object/omitKeys.js","../../src/object/pickKeys.js","../../src/object/sanitizeCopy.js","../../src/object/trimStringFields.js","../../src/object/toObj.js","../../src/object/keyMap.js","../../src/object/everyEntry.js","../../src/object/someEntry.js","../../src/object/filterObj.js","../../src/object/splitByKeys.js"],"sourcesContent":["import { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch (e) {\n    logData(e.message, 'error')\n    return null\n  }\n}\n","/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} [filter] - list of keys to not remove\n * @returns {void}\n */\nexport const clearObj = (obj, filter) => {\n  obj &&\n    Object.entries(obj).map(([ key, value ]) => {\n      if (filter && filter.indexOf(key) !== -1) return\n      if (typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n","import { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (isObj(obj1) && obj1) || obj2\n","import { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n    const srcCopy = deepClone(source)\n    return isArr(srcCopy)\n      ? // Check if it's array, and join the arrays\n        [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n      : // Check if it's an object, and loop the properties\n      isObj(srcCopy)\n        ? // Loop the entries of the object, and add them to the merged object\n        Object.entries(srcCopy).reduce(\n          (joined, [ key, value ]) => ({\n            ...joined,\n            // Check it's a function, and if so, clone it\n            [key]: isFunc(value)\n              ? cloneFunc(value)\n              : // Check if the value is an object of if key is in the object\n              isColl(value) && key in joined\n                ? // Set to value or deepMerge the object with the current merged object\n                deepMerge(joined[key], value)\n                : // Otherwise just clone and set the value\n                deepClone(value),\n            // Pass in merged at the joined object\n          }),\n          merged\n        )\n        : // If it's not an array or object, just return the merge object\n        merged\n    // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && []) || {})\n}\n","import { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns {Object|Array} the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj))\n    error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb)\n    error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb))\n    error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n\n  if (error) {\n    console.warn(error)\n\n    return obj\n  }\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n","/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {Boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch (e) {\n    return false\n  }\n}\n","import { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {*} maybeEntry - Item to check if it's an entry\n *\n * @returns {Boolean} - True if it is an entry, false otherwise\n */\nexport const isEntry = maybeEntry =>\n  isArr(maybeEntry) &&\n  maybeEntry.length === 2 &&\n  (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n","import { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry\n * @param {Object|Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns {Object} - new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce((obj, [ key, value ]) => {\n    const result = cb(key, value)\n    if (!isEntry(result)) {\n      console.error(\n        `Callback function must return entry. Found: ${result}. Using current entry instead.`\n      )\n      return set(obj, key, value)\n    }\n    return set(obj, result[0], result[1])\n  }, initialValue)\n}\n","import { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj - Object to have it's property keys mapped\n * @param {Function} keyMapper - Function of shape (key) => nextKey\n * @returns {Object} - The new object with each key mapped to the response of keyMapper\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) return obj\n\n  return mapEntries(obj, (key, value) => [ keyMapper(key), value ])\n}\n","import { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj - Object to map over\n * @param {Function} cb - Method to call for each entry in the passed in obj\n * @return {Array} -  returned values from callback || The entries of the passed in obj\n */\nexport const mapObj = (obj, cb) => {\n  if (!isObj(obj)) return []\n\n  const entries = Object.entries(obj)\n  return isFunc(cb) ? entries.map(([ key, value ]) => cb(key, value)) : entries\n}\n","import { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every value is an array\n * @function\n * @param {Object|*} obj - data to check\n * @return {Boolean} - true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(values.length && values.every(isArr))\n}\n","import { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    reduceObj(\n      obj,\n      (key, _, updated) => {\n        keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n        return updated\n      },\n      {}\n    )) ||\n  {}\n","import { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} obj - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    keys.reduce((updated, key) => {\n      key in obj && (updated[key] = obj[key])\n\n      return updated\n    }, {})) ||\n  {}\n","import { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj - Object to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n","import { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object =>\n  Object.entries(object).reduce((cleaned, [ key, value ]) => {\n    cleaned[key] = isStr(value) ? value.trim() : value\n    return cleaned\n  }, object)\n","import { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {String} [divider] - if string, what divides key from value\n * @param {String} [split] - if string, what splits each key/value pair\n * @return {Object} - Converted object\n */\nexport const toObj = (val, divider, split) => {\n  if (isArr(val))\n    return Object.keys(val).reduce((obj, key) => {\n      obj[key] = val[key]\n\n      return obj\n    }, {})\n\n  if (!isStr(val)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return val\n    .toString()\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n","import { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {Boolean} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) =>\n  (isArr(arr) &&\n    arr.reduce((obj, key) => {\n      if (!isStr(key)) return obj\n\n      const use = (toUpperCase && key.toUpperCase()) || key\n      obj[use] = use\n\n      return obj\n    }, {})) ||\n  {}\n","import { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in an object\n * @function\n * @param {Object} obj - Object to the it's entries iterated on\n * @param {Function} predicate - Function of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - Boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.every(([ key, value ]) => predicate(key, value))\n  )\n}\n","import { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj - Object to have it's properties checked\n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - True if at least one entry satisfied the predicate, false if not\n */\nexport const someEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.some(([ key, value ]) => predicate(key, value))\n  )\n}\n","import { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {Object} obj - Object that should have it's properties filtered\n * @param {Function} predicate  - function of form: (key, value) => Boolean\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Object} - Object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return obj\n  }\n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value)) data[key] = value\n      return data\n    },\n    {}\n  )\n}\n","import { isObj } from './isObj'\nimport { exists } from '../ext/exists'\nimport { toStr } from '../string/toStr'\nimport { reduceObj } from './reduceObj'\nimport { ensureArr } from '../array/ensureArr'\n\n/**\n * Creates an intersection of the passed in object, based on the passed in keys\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @example\n * const [matching, nonMatching] = splitByKeys({ 1: 'match', 2: 'non-matching' }, [ 1 ])\n * matching === { 1: 'match' } === true\n * nonMatching === { 2: 'non-matching' }  === true\n *\n * @return {Array<Object>} - First object contains keys matching keys of the keys argument\n *                          - Second object contains keys not matching keys of the keys argument\n */\nexport const splitByKeys = (obj = {}, keys) => {\n  if (!keys) return [{}, { ...obj }]\n\n  const intersect = [{}, {}]\n  const compareKeys = ensureArr(keys)\n\n  return isObj(obj)\n    ? reduceObj(\n      obj,\n      (key, _, updated) => {\n        exists(compareKeys.find(k => exists(k) && toStr(k) === key))\n          ? (updated[0][key] = obj[key])\n          : (updated[1][key] = obj[key])\n\n        return updated\n      },\n      intersect\n    )\n    : intersect\n}\n"],"names":["cloneJson","obj","JSON","parse","stringify","e","logData","message","clearObj","filter","Object","entries","map","key","value","indexOf","undefined","eitherObj","obj1","obj2","isObj","deepMerge","sources","reduce","merged","source","srcCopy","deepClone","isArr","joined","isFunc","cloneFunc","isColl","applyToCloneOf","mutatorCb","error","console","warn","clone","jsonEqual","one","two","isEntry","maybeEntry","length","isNum","isStr","mapEntries","cb","initialValue","result","set","mapKeys","keyMapper","mapObj","isArrMap","values","toBool","every","omitKeys","keys","reduceObj","_","updated","pickKeys","sanitizeCopy","sanitize","trimStringFields","object","cleaned","trim","toObj","val","divider","split","toString","item","sep","strToType","keyMap","arr","toUpperCase","use","everyEntry","predicate","logError","pipeline","someEntry","some","filterObj","data","splitByKeys","intersect","compareKeys","ensureArr","exists","find","k","toStr"],"mappings":"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"}