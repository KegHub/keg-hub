{"version":3,"file":"intersect-2c6126f4.js","sources":["../../src/array/areFrequencyEqual.js","../../src/array/areSetEqual.js","../../src/array/cloneArr.js","../../src/array/eitherArr.js","../../src/array/flatArr.js","../../src/array/flatMap.js","../../src/array/findExtrema.js","../../src/array/findMax.js","../../src/array/findMin.js","../../src/array/omitRange.js","../../src/array/randomArr.js","../../src/array/randomizeArr.js","../../src/array/uniqArr.js","../../src/array/flatUnion.js","../../src/array/intersect.js"],"sourcesContent":["/** @module Array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Builds a map of elements mapped to their frequency counts\n * @function\n * @param {Array<*>} arr\n * @return {Map<*, number>}\n */\nexport const buildElementCountMap = arr => {\n  const counts = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    const count = counts.get(element) ?? 0\n    counts.set(element, count + 1)\n  }\n  return counts\n}\n\n/**\n * Returns true if the maps\n * @function\n * @param {Map<*, number>} mapA\n * @param {Map<*, number>} mapB\n * @returns {Boolean} - True if the item count it equal between mapA and mapB\n */\nexport const areCountMapsEqual = (mapA, mapB) => {\n  if (mapA.size !== mapB.size) return false\n\n  for (let [ key, count ] of mapA) {\n    const otherCount = mapB.get(key)\n    if (otherCount !== count) return false\n  }\n\n  return true\n}\n\n/**\n * Checks if arrays are frequency equal. Does this\n * by making only one pass over each array and using an auxillary map.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n * @returns {Boolean} - True if otherArr contains exactly the same elements as arr, where order does not matter, but frequency does\n */\nexport const areFrequencyEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n  if (arr.length !== otherArr.length) return false\n\n  const arrCounts = buildElementCountMap(arr)\n  const otherCounts = buildElementCountMap(otherArr)\n\n  return areCountMapsEqual(arrCounts, otherCounts)\n}\n","/** @module Array */\n\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Checks if arrays are set-equal: they contain the same elements,\n * but element frequencies don't matter.\n * Does this with one pass over each array and an auxilliary set.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n */\nexport const areSetEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n\n  const [ longest, shortest ] =\n    arr.length > otherArr.length ? [ arr, otherArr ] : [ otherArr, arr ]\n\n  const arrSet = new Set(shortest)\n\n  for (let i = 0; i < longest.length; i++) {\n    const element = longest[i]\n    if (!arrSet.has(element)) return false\n  }\n\n  return true\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\n\n/**\n * Creates a copy of the passed in array.\n * <br/>Returns empty array, if param is not an array.\n * @function\n * @example\n * cloneArr([1,2,3])\n * // Returns copy of the passed on array\n * @param {Array} arr - array to be copied\n * @return {Array} - copy of passed in array\n */\nexport const cloneArr = arr =>\n  Array.from([\n    // If arr is not an array or object, just use empty array, so we don't throw!\n    ...((isArr(arr) && arr) || (isObj(arr) && Object.entries(arr)) || []),\n  ])\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Returns a if it is an Array, else returns b\n * @function\n * @param {*} a\n * @param {*} b\n * @returns {*} either a, if it's an array, or b\n *\n * @example\n * const foo = eitherArr('hi', 1) // returns 1\n * const bar = eitherArr([ 2 ], 1) // returns [ 2 ]\n */\nexport const eitherArr = (a, b) => (isArr(a) ? a : b)\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\nimport { noOpObj } from '../ext/noOps'\nimport { exists } from '../ext/exists'\n\n/**\n * Helper method to flatten and mutate the passed in array based on options\n * @function\n * @private\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} result - Flattened array values\n * @param {Array} opts - Options to modify how the array is flattened\n *\n * @return {Array} - Mutated arr or result, but flattened based on options\n */\nconst flatten = (arr, result, opts) => {\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i]\n\n    isArr(value)\n      ? flatten(value, result, opts)\n      : (opts.exists && !exists(value)) || (opts.truthy && !value)\n          ? result\n          : result.push(value)\n  }\n\n  if (!opts.mutate) return result\n\n  Object.assign(arr, result).splice(result.length)\n\n  return arr\n}\n\n/**\n * Flattens an array to a single level\n * @function\n * @param {Array|*} arr - Array to be flattened\n * @param {Object} [opts={}] - Options to modify how the array is flattened\n * @param {Boolean} [opts.truthy] - Only include truthy values when flattening\n * @param {Boolean} [opts.exists] - Only include values that exist when flattening\n * @param {Boolean} [opts.mutate] - Mutates the original array\n *\n * @example\n * const arr = flatArr([[ 'flat', '' ], [ 'array' ]]) // returns ['flat', '', 'array']\n * const arrTruthy = flatArr([ 0, 2, [ false ] ], { truthy: true }) // returns [ 2 ]\n * const arrExist = flatArr([ 0, 2, [ false ] ], { exists: true }) // returns [ 0, 2, false ]\n * const mutateArr = [ [1], [2] ]\n * flatArr(mutateArr, { mutate: true }) === mutateArr\n * // Evaluates to true, but mutateArr value is [ 1, 2 ]\n *\n * @return {Array} - Mutated original array now flattened, or a new flattened array based on options\n */\nexport const flatArr = (arr, opts) =>\n  flatten(arr, [], isObj(opts) ? opts : noOpObj)\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method/isFunc'\nimport { validate } from '../validation'\n\n/**\n * Maps each element using mapping function `mapFn`, but returns the result as a flattened array.\n * It is equivalent to map() followed by flattening to depth 1, but flatMap is a useful shortcut,\n * and merging both steps into one method (with one pass over the array) is slightly more efficient.\n * @function\n * @example\n * [1, 2].map(x => [x * 2]) // returns [[2], [4]]\n * flatMap([1, 2], x => [x * 2]) // returns [2, 4]\n * @param {Array} arr - array to map across\n * @param {Function} mapFn - function for mapping\n */\nexport const flatMap = (arr, mapFn) => {\n  const [inputIsValid] = validate({ arr, mapFn }, { arr: isArr, mapFn: isFunc })\n  if (!inputIsValid) return arr\n\n  // iterate across the array, calling mapFn on each element, then flattening into final array\n  return arr.reduce((finalArr, current) => {\n    const result = mapFn(current)\n    isArr(result) ? result.map(el => finalArr.push(el)) : finalArr.push(result)\n    return finalArr\n  }, [])\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { isFunc } from '../method'\nimport { validate } from '../validation'\n\n/**\n * Finds the extremum (e.g. max, min) element within array `arr` as defined by the `comparator` function\n * @function\n * @param {Array<*>} arr\n * @param {Function} comparator - comparison function like the compareFunction in sort: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @returns {*} the element in `arr` that is the extremum as defined by `comparator`. If arr is empty, this function returns null.\n * @example\n * const max = findExtrema([ { a: 1 }, { a: 2} ], (x, y) => x.a - y.a)\n * // max === { a: 2 }\n */\n// export const findExtrema = (arr, comparator) => {\n//   const [valid] = validate(\n//     { arr, comparator },\n//     { arr: isArr, $default: isFunc }\n//   )\n//   if (!valid) return null\n\n//   return arr.length\n//     ? arr.reduce((extremaSoFar, next) =>\n//       comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n//     )\n//     : null\n// }\n\nexport const findExtrema = (arr, comparator) => {\n  const [valid] = validate(\n    { arr, comparator },\n    { arr: isArr, $default: isFunc }\n  )\n  if (!valid) return null\n\n  return arr.length\n    ? arr.reduce((extremaSoFar, next) =>\n      comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n    )\n    : null\n}\n","/** @module Array */\n\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the maximum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 3 }\n */\nexport const findMax = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(x), propSelector(y)))\n","/** @module Array */\n\nimport { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the minimum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 1 }\n */\nexport const findMin = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(y), propSelector(x)))\n","/** @module Array */\n\nimport { isNonNegative } from '../number/isNonNegative'\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Returns a new array with the same elements as arr, excluding `count` elements beginning at index `startIndex`\n * @function\n * @param {Array} arr\n * @param {Number} startIndex\n * @param {Number} count\n */\nexport const omitRange = (arr, startIndex, count) => {\n  const [inputIsValid] = validate(\n    { arr, startIndex, count },\n    { arr: isArr, $default: isNonNegative }\n  )\n\n  if (!inputIsValid) return arr\n\n  const nextArr = [...arr]\n\n  nextArr.splice(startIndex, count)\n\n  return nextArr\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly selects values from a passed in array.\n * @function\n * @example\n * randomArr([1,2,3], 1)\n * // Returns an array with one of the values in the passed in array\n * @param {Array} arr - array to select values from\n * @param {Number} [amount] - number of values to select from the array\n * @return {Array} - randomly sorted array\n */\nexport const randomArr = (arr, amount) => {\n  if (!isArr(arr)) return arr\n\n  const useAmount = amount || 1\n  const randoms = []\n  for (let i = 0; i < useAmount; i++) {\n    randoms.push(arr[Math.floor(Math.random() * arr.length)])\n  }\n\n  return !amount ? randoms[0] : randoms\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Randomly sorts an arrays items.\n * @function\n * @example\n * randomizeArr([1,2,3])\n * // Returns an array randomly sorted\n * @param {Array} arr - array to randomly sorted\n * @return {Array} - randomly sorted array\n */\nexport const randomizeArr = arr =>\n  (!isArr(arr) && arr) || arr.sort(() => 0.5 - Math.random())\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Removes duplicates from an array, checking by reference-equality\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @param {array} arr - array to remove duplicates from\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArrByReference = arr => {\n  return !isArr(arr) ? arr : arr.filter((e, i, arr) => arr.indexOf(e) == i)\n}\n\n/**\n *\n * @param {*} arr\n * @param {*} selector\n */\n/**\n * Removes duplicates from an array.\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n * uniqArr([ {a: 1} , { a: 1 }], element => element.a)\n * // Returns array [ { a: 1 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function} [selector] - optional function to specify the property uniqArr should use to check if another element exists\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArr = (arr, selector) => {\n  if (!selector) return uniqArrByReference(arr)\n\n  // loop over each element in one pass,\n  // only including in the unique array elements\n  // we haven't encountered before\n  // by checking with `selector` and the set\n  const { unique } = arr.reduce(\n    (data, element, index) => {\n      const id = selector(element, index)\n      !data.set.has(id) && data.unique.push(element)\n      data.set.add(id)\n      return data\n    },\n    {\n      unique: [],\n      set: new Set(),\n    }\n  )\n\n  return unique\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\nimport { uniqArr } from './uniqArr'\nimport { flatArr } from './flatArr'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Flattens the passed in array arguments and removes duplicates\n * Also removes non-existing values such as undefined and null\n * If the last argument is a function, it will be used as the comparison when checking for duplicates\n * @function\n * @example\n * flatUnion([1,1,2], [1,2,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n *  flatUnion([{a: 1}, { a: 3 }], [{a: 4}, { a: 1 }], item => item.a)\n * // Returns array with only unique values [ { a: 1 }, { a: 3 }, { a: 4 } ]\n * @param {Array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property to check if another element exists\n *\n * @return {Array} - Flattened copy of passed in array arguments, with duplicates removed\n */\nexport const flatUnion = (...args) => {\n  const last = args.pop()\n  const opts = { exists: true }\n  const compare = isFunc(last) ? last : args.push(last) && undefined\n\n  return args.reduce((merged, arr) => {\n    if (!isArr(arr)) return merged\n\n    return uniqArr(flatArr([ ...merged, ...arr ], opts), compare)\n  }, [])\n}\n","/** @module Array */\n\nimport { isArr } from './isArr'\n\n/**\n * Creates and returns a new array of all items that exist in both passed in arrays\n * @param {Array<any>} arrA - array to compare with arrB\n * @param {Array<any>} arrB - array to compare with arrA\n *\n * @example\n *  intersect([1], [1]) === [1]\n *\n * @returns {Array<any>} - Array of matching items\n */\nexport const intersect = (arrA, arrB) => {\n  if(!isArr(arrA) || !isArr(arrB)) return []\n  \n  const setB = new Set(arrB)\n  return [...new Set(arrA)].filter((x) => setB.has(x))\n}\n"],"names":["buildElementCountMap","arr","counts","Map","i","length","element","count","get","set","areCountMapsEqual","mapA","mapB","size","key","otherCount","areFrequencyEqual","otherArr","valid","validate","$default","isArr","arrCounts","otherCounts","areSetEqual","longest","shortest","arrSet","Set","has","cloneArr","Array","from","isObj","Object","entries","eitherArr","a","b","flatten","result","opts","value","exists","truthy","push","mutate","assign","splice","flatArr","noOpObj","flatMap","mapFn","inputIsValid","isFunc","reduce","finalArr","current","map","el","findExtrema","comparator","extremaSoFar","next","findMax","propSelector","identity","x","y","compareTo","findMin","omitRange","startIndex","isNonNegative","nextArr","randomArr","amount","useAmount","randoms","Math","floor","random","randomizeArr","sort","uniqArrByReference","filter","e","indexOf","uniqArr","selector","unique","data","index","id","add","flatUnion","args","last","pop","compare","undefined","merged","intersect","arrA","arrB","setB"],"mappings":"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"}