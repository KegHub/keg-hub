{"version":3,"file":"isQuoted-877344c4.js","sources":["../../src/string/isLowerCase.js","../../src/string/isUpperCase.js","../../src/string/isEmail.js","../../src/string/isIp.js","../../src/string/isPhone.js","../../src/string/isUrl.js","../../src/string/isUuid.js","../../src/string/isQuoted.js"],"sourcesContent":["/** @module String */\n\n/**\n * Checks if a string is all lowercase letters\n * @function\n * @param {String} str - String to check if it's lowercase\n * @returns {Boolean} - True if str is lowercase\n */\nexport const isLowerCase = str => str === str.toLowerCase()\n","/** @module String */\n\n/**\n * Checks if a string is all capital letters\n * @function\n * @param {String} str - String to check if it's uppercase\n * @returns {Boolean} - True if str is uppercase\n */\nexport const isUpperCase = str => str === str.toUpperCase()\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a email.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a email\n */\nexport const isEmail = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\nconst regex = {\n  ipv4: /^(?:(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(?:\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$/,\n  ipv6: /^((?=.*::)(?!.*::.+::)(::)?([\\dA-F]{1,4}:(:|\\b)|){5}|([\\dA-F]{1,4}:){6})((([\\dA-F]{1,4}((?!\\3)::|:\\b|$))|(?!\\2\\3)){2}|(((2[0-4]|1\\d|[1-9])?\\d|25[0-5])\\.?\\b){4})$/i,\n}\n\n/**\n * Check if string is an Ip address, both Ip4 and Ip6\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an Ip address\n */\nexport const isIp = str => {\n  if (!str || !isStr(str)) return false\n\n  const isIp4 = Boolean(regex.ipv4.test(str))\n  return isIp4 || Boolean(regex.ipv6.test(str))\n}\n\n/**\n * Check if string is an IP4 address\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an IP4 address\n */\nexport const isIp4 = str => {\n  if (!str || !isStr(str)) return false\n\n  return Boolean(regex.ipv4.test(str))\n}\n\n/**\n * Check if string is an IP6 address\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's an IP6 address\n */\nexport const isIp6 = str => {\n  if (!str || !isStr(str)) return false\n\n  return Boolean(regex.ipv6.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a phone number.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - True if str is a phone number\n */\nexport const isPhone = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\n  return Boolean(regex.test(str)) && str.replace(/\\D/g, '').length < 11\n}\n","/** @module String */\n\n/**\n * Check if string is a url.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a url\n */\nexport const isUrl = str => {\n  const regex =\n    /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Check if string is a uuid.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - if it's a uuid\n */\nexport const isUuid = str => {\n  if (!str || !isStr(str)) return false\n  const regex =\n    /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n  return Boolean(regex.test(str))\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\nconst quoteSymbols = [ '\"', \"'\" ]\n\n/**\n * Checks if the string contains quoted text\n * @function\n * @param {String} str - string to check\n * @param {Array<string>?} [quotes] - optional array of valid quote strings to check with. Defaults to single and double quote characters.\n * @return {Boolean} true if `str` is a quoted string\n * @example\n * isQuoted('foo') // false\n * @example\n * isQuoted('\"foo\"') // true\n */\nexport const isQuoted = (str, quotes = quoteSymbols) => {\n  return (\n    isStr(str) &&\n    quotes.some(quote => str.startsWith(quote) && str.endsWith(quote))\n  )\n}\n"],"names":["isLowerCase","str","toLowerCase","isUpperCase","toUpperCase","isEmail","isStr","regex","Boolean","test","ipv4","ipv6","isIp","isIp4","isIp6","isPhone","replace","length","isUrl","isUuid","quoteSymbols","isQuoted","quotes","some","quote","startsWith","endsWith"],"mappings":"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"}