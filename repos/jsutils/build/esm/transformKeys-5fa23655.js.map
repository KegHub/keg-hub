{"version":3,"file":"transformKeys-5fa23655.js","sources":["../../src/object/cloneJson.js","../../src/object/clearObj.js","../../src/object/eitherObj.js","../../src/object/deepMerge.js","../../src/object/applyToCloneOf.js","../../src/object/mapEntries.js","../../src/object/mapKeys.js","../../src/object/mapObj.js","../../src/object/omitKeys.js","../../src/object/pickKeys.js","../../src/object/sanitizeCopy.js","../../src/object/trimStringFields.js","../../src/object/toObj.js","../../src/object/keyMap.js","../../src/object/everyEntry.js","../../src/object/someEntry.js","../../src/object/filterObj.js","../../src/object/hashObj.js","../../src/object/splitByKeys.js","../../src/object/transformKeys.js"],"sourcesContent":["/** @module Object */\n\nimport { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch (e) {\n    logData(e.message, 'error')\n    return null\n  }\n}\n","/** @module Object */\n\n/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} [filter] - list of keys to not remove\n * @returns {void}\n */\nexport const clearObj = (obj, filter) => {\n  obj &&\n    Object.entries(obj).map(([ key, value ]) => {\n      if (filter && filter.indexOf(key) !== -1) return\n      if (typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (isObj(obj1) && obj1) || obj2\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n    const srcCopy = deepClone(source)\n    return isArr(srcCopy)\n      ? // Check if it's array, and join the arrays\n        [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n      : // Check if it's an object, and loop the properties\n      isObj(srcCopy)\n        ? // Loop the entries of the object, and add them to the merged object\n        Object.entries(srcCopy).reduce(\n          (joined, [ key, value ]) => ({\n            ...joined,\n            // Check it's a function, and if so, clone it\n            [key]: isFunc(value)\n              ? cloneFunc(value)\n              : // Check if the value is an object of if key is in the object\n              isColl(value) && key in joined\n                ? // Set to value or deepMerge the object with the current merged object\n                deepMerge(joined[key], value)\n                : // Otherwise just clone and set the value\n                deepClone(value),\n            // Pass in merged at the joined object\n          }),\n          merged\n        )\n        : // If it's not an array or object, just return the merge object\n        merged\n    // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && []) || {})\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns {Object|Array} the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj))\n    error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb)\n    error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb))\n    error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n\n  if (error) {\n    console.warn(error)\n\n    return obj\n  }\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry\n * @param {Object|Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns {Object} - new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce((obj, [ key, value ]) => {\n    const result = cb(key, value)\n    if (!isEntry(result)) {\n      console.error(\n        `Callback function must return entry. Found: ${result}. Using current entry instead.`\n      )\n      return set(obj, key, value)\n    }\n    return set(obj, result[0], result[1])\n  }, initialValue)\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj - Object to have it's property keys mapped\n * @param {Function} keyMapper - Function of shape (key) => nextKey\n * @returns {Object} - The new object with each key mapped to the response of keyMapper\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) return obj\n\n  return mapEntries(obj, (key, value) => [ keyMapper(key), value ])\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj - Object to map over\n * @param {Function} cb - Method to call for each entry in the passed in obj\n * @return {Array} -  returned values from callback || The entries of the passed in obj\n */\nexport const mapObj = (obj, cb) => {\n  if (!isObj(obj)) return []\n\n  const entries = Object.entries(obj)\n  return isFunc(cb) ? entries.map(([ key, value ]) => cb(key, value)) : entries\n}\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    reduceObj(\n      obj,\n      (key, _, updated) => {\n        keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n        return updated\n      },\n      {}\n    )) ||\n  {}\n","/** @module Object */\n\nimport { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} obj - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    keys.reduce((updated, key) => {\n      key in obj && (updated[key] = obj[key])\n\n      return updated\n    }, {})) ||\n  {}\n","/** @module Object */\n\nimport { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj - Object to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object =>\n  Object.entries(object).reduce((cleaned, [ key, value ]) => {\n    cleaned[key] = isStr(value) ? value.trim() : value\n    return cleaned\n  }, object)\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {String} [divider] - if string, what divides key from value\n * @param {String} [split] - if string, what splits each key/value pair\n * @return {Object} - Converted object\n */\nexport const toObj = (val, divider, split) => {\n  if (isArr(val))\n    return Object.keys(val).reduce((obj, key) => {\n      obj[key] = val[key]\n\n      return obj\n    }, {})\n\n  if (!isStr(val)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return val\n    .toString()\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {Boolean} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) =>\n  (isArr(arr) &&\n    arr.reduce((obj, key) => {\n      if (!isStr(key)) return obj\n\n      const use = (toUpperCase && key.toUpperCase()) || key\n      obj[use] = use\n\n      return obj\n    }, {})) ||\n  {}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in an object\n * @function\n * @param {Object} obj - Object to the it's entries iterated on\n * @param {Function} predicate - Function of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - Boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.every(([ key, value ]) => predicate(key, value))\n  )\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj - Object to have it's properties checked\n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - True if at least one entry satisfied the predicate, false if not\n */\nexport const someEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.some(([ key, value ]) => predicate(key, value))\n  )\n}\n","/** @module Object */\n\nimport { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {Object} obj - Object that should have it's properties filtered\n * @param {Function} predicate  - function of form: (key, value) => Boolean\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Object} - Object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return obj\n  }\n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value)) data[key] = value\n      return data\n    },\n    {}\n  )\n}\n","/** @module Object */\n\nconst pad = (hash, len) => {\n  while (hash.length < len)\n    hash = '0' + hash\n\n  return hash\n}\n\nconst fold = (hash, text) => {\n  if (text.length === 0) return hash\n\n  let i;\n  let chr;\n  let len;\n\n  for (i = 0, len = text.length; i < len; i++) {\n    chr = text.charCodeAt(i)\n    hash = ((hash << 5) - hash) + chr\n    hash |= 0\n  }\n\n  return hash < 0 ? hash * -2 : hash\n}\n\nconst foldObject = (hash, obj, seen) => {\n  const foldKey = (hash, key) => foldValue(hash, obj[key], key, seen)\n\n  return Object.keys(obj).sort().reduce(foldKey, hash)\n}\n\nconst foldValue = (input, value, key, seen) => {\n  const hash = fold(fold(fold(input, key), toString(value)), typeof value)\n  \n  if (value === null) return fold(hash, 'null')\n\n  if (value === undefined) return fold(hash, 'undefined')\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    if (seen.indexOf(value) !== -1) return fold(hash, '[Circular]' + key)\n    \n    seen.push(value)\n\n    const objHash = foldObject(hash, value, seen)\n\n    if (!('valueOf' in value) || typeof value.valueOf !== 'function') objHash\n\n    try {\n      return fold(objHash, String(value.valueOf()))\n    }\n    catch (err) {\n      return fold(objHash, '[valueOf exception]' + (err.stack || err.message))\n    }\n\n  }\n\n  return fold(hash, value.toString())\n}\n\nconst toString = (obj) => Object.prototype.toString.call(obj)\n\n/**\n * Creates a consistent hash string from the passed in object\n * <br/>Not intended to be secure\n * <br/>Given the same input keys and values, it will always return the same output hash\n */\nexport const hashObj = (obj) => pad(foldValue(0, obj, '', []).toString(16), 8)\n\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { exists } from '../ext/exists'\nimport { toStr } from '../string/toStr'\nimport { reduceObj } from './reduceObj'\nimport { ensureArr } from '../array/ensureArr'\n\n/**\n * Creates an intersection of the passed in object, based on the passed in keys\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @example\n * const [matching, nonMatching] = splitByKeys({ 1: 'match', 2: 'non-matching' }, [ 1 ])\n * matching === { 1: 'match' } === true\n * nonMatching === { 2: 'non-matching' }  === true\n *\n * @return {Array<Object>} - First object contains keys matching keys of the keys argument\n *                          - Second object contains keys not matching keys of the keys argument\n */\nexport const splitByKeys = (obj = {}, keys) => {\n  if (!keys) return [{}, { ...obj }]\n\n  const intersect = [{}, {}]\n  const compareKeys = ensureArr(keys)\n\n  return isObj(obj)\n    ? reduceObj(\n      obj,\n      (key, _, updated) => {\n        exists(compareKeys.find(k => exists(k) && toStr(k) === key))\n          ? (updated[0][key] = obj[key])\n          : (updated[1][key] = obj[key])\n\n        return updated\n      },\n      intersect\n    )\n    : intersect\n}\n","/** @module Object */\n\nimport { emptyObj } from '../ext/noOps'\n\n/**\n * Transforms the keys of an object to a matching key value in keyMap object\n * Keys not in the keyMap are included as is, unless strict === true option is passed\n * @example\n * transformKeys({my_key: `1234`, other_key: `4321`}, {my_key: `myKey`}) === { myKey: `1234`, other_key: `4321` }\n * @example\n * const opts = { strict: true }\n * transformKeys({my_key: `1234`, other_key: `4321`}, {my_key: `myKey`}, opts) === { myKey: `1234` }\n */\nexport const transformKeys = (\n  obj=emptyObj,\n  keyMap=emptyObj,\n  opts=emptyObj,\n) => {\n  const { strict=false  } = opts\n\n  return Object.entries(obj)\n    .reduce((acc, [key, value])=> {\n      const ref = keyMap[key] || (!strict ? key : undefined)\n      ref && (acc[ref] = value)\n\n      return acc\n    }, {})\n}"],"names":["cloneJson","obj","JSON","parse","stringify","e","logData","message","clearObj","filter","Object","entries","map","key","value","indexOf","undefined","eitherObj","obj1","obj2","isObj","deepMerge","sources","reduce","merged","source","srcCopy","deepClone","isArr","joined","isFunc","cloneFunc","isColl","applyToCloneOf","mutatorCb","error","console","warn","clone","mapEntries","cb","initialValue","result","isEntry","set","mapKeys","keyMapper","mapObj","omitKeys","keys","reduceObj","_","updated","pickKeys","sanitizeCopy","sanitize","trimStringFields","object","cleaned","isStr","trim","toObj","val","divider","split","toString","item","sep","strToType","keyMap","arr","toUpperCase","use","everyEntry","predicate","logError","pipeline","every","someEntry","some","filterObj","data","pad","hash","len","length","fold","text","i","chr","charCodeAt","foldObject","seen","foldKey","foldValue","sort","input","push","objHash","valueOf","String","err","stack","prototype","call","hashObj","splitByKeys","intersect","compareKeys","ensureArr","exists","find","k","toStr","transformKeys","emptyObj","opts","strict","acc","ref"],"mappings":";;;;;;;;;;;;;;;;;;AAUaA,MAAAA,SAAS,GAAGC,GAAG,IAAI;EAC9B,IAAI;IACF,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAP,CAAA;GADF,CAGA,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACD,CAAC,CAACE,OAAH,EAAY,OAAZ,CAAP,CAAA;AACA,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;AACF;;MCTYC,QAAQ,GAAG,CAACP,GAAD,EAAMQ,MAAN,KAAiB;AACvCR,EAAAA,GAAG,IACDS,MAAM,CAACC,OAAP,CAAeV,GAAf,CAAA,CAAoBW,GAApB,CAAwB,CAAC,CAAEC,GAAF,EAAOC,KAAP,CAAD,KAAoB;IAC1C,IAAIL,MAAM,IAAIA,MAAM,CAACM,OAAP,CAAeF,GAAf,CAAA,KAAwB,CAAC,CAAvC,EAA0C,OAAA;IAC1C,IAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+BN,QAAQ,CAACM,KAAD,CAAR,CAAA;AAC/Bb,IAAAA,GAAG,CAACY,GAAD,CAAH,GAAWG,SAAX,CAAA;IACA,OAAOf,GAAG,CAACY,GAAD,CAAV,CAAA;AACD,GALD,CADF,CAAA;AAOD;;ACNYI,MAAAA,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAiBC,KAAK,CAACF,IAAD,CAAL,IAAeA,IAAhB,IAAyBC;;MCIrDE,SAAS,GAAG,CAAC,GAAGC,OAAJ,KAAgB;EACvC,OAAOA,OAAO,CAACC,MAAR,CAAe,CAACC,MAAD,EAASC,MAAT,KAAoB;AACxC,IAAA,MAAMC,OAAO,GAAGC,SAAS,CAACF,MAAD,CAAzB,CAAA;AACA,IAAA,OAAOG,KAAK,CAACF,OAAD,CAAL;AAEH,IAAA,CAAE,IAAKE,KAAK,CAACJ,MAAD,CAAL,IAAiBA,MAAlB,IAA6B,EAAjC,CAAF,EAAwC,GAAGE,OAA3C,CAFG;IAILN,KAAK,CAACM,OAAD,CAAL;AAEEhB,IAAAA,MAAM,CAACC,OAAP,CAAee,OAAf,CAAwBH,CAAAA,MAAxB,CACE,CAACM,MAAD,EAAS,CAAEhB,GAAF,EAAOC,KAAP,CAAT,MAA6B,EAC3B,GAAGe,MADwB;MAG3B,CAAChB,GAAD,GAAOiB,MAAM,CAAChB,KAAD,CAAN,GACHiB,SAAS,CAACjB,KAAD,CADN;AAGLkB,MAAAA,MAAM,CAAClB,KAAD,CAAN,IAAiBD,GAAG,IAAIgB,MAAxB;MAEER,SAAS,CAACQ,MAAM,CAAChB,GAAD,CAAP,EAAcC,KAAd,CAFX;MAIEa,SAAS,CAACb,KAAD,CAVc;AAAA,KAA7B,CADF,EAcEU,MAdF,CAFF;AAmBEA,IAAAA,MAvBJ,CAFwC;AA2BzC,GA3BM,EA2BHI,KAAK,CAACN,OAAO,CAAC,CAAD,CAAR,CAAL,IAAqB,EAAtB,IAA6B,EA3BzB,CAAP,CAAA;AA4BD;;MC1BYW,cAAc,GAAG,CAAChC,GAAD,EAAMiC,SAAN,KAAoB;AAChD,EAAA,IAAIC,KAAJ,CAAA;AACA,EAAA,IAAI,CAAClC,GAAL,EAAUkC,KAAK,GAAG,yDAAR,CAAA;EAEV,IAAI,CAACf,KAAK,CAACnB,GAAD,CAAV,EACEkC,KAAK,GAAG,2DAAR,CAAA;AAEF,EAAA,IAAI,CAACD,SAAL,EACEC,KAAK,GAAG,0DAAR,CAAA;EAEF,IAAI,CAACL,MAAM,CAACI,SAAD,CAAX,EACEC,KAAK,GAAG,iEAAR,CAAA;AAEF,EAAA,IAAIA,KAAJ,EAAW;IACTC,OAAO,CAACC,IAAR,CAAaF,KAAb,CAAA,CAAA;AAEA,IAAA,OAAOlC,GAAP,CAAA;AACD,GAAA;AAED,EAAA,MAAMqC,KAAK,GAAGX,SAAS,CAAC1B,GAAD,CAAvB,CAAA;EACAiC,SAAS,CAACI,KAAD,CAAT,CAAA;AAEA,EAAA,OAAOA,KAAP,CAAA;AACD;;MCrBYC,UAAU,GAAG,CAACtC,GAAD,EAAMuC,EAAN,KAAa;EACrC,IAAI,CAACZ,KAAK,CAAC3B,GAAD,CAAN,IAAe,CAACmB,KAAK,CAACnB,GAAD,CAAzB,EAAgC;IAC9BmC,OAAO,CAACD,KAAR,CAAclC,GAAd,EAAoB,CAA0C,wCAAA,EAAA,OAAOA,GAAI,CAAzE,CAAA,CAAA,CAAA;AACA,IAAA,OAAOA,GAAP,CAAA;AACD,GAAA;AAED,EAAA,IAAI,CAAC6B,MAAM,CAACU,EAAD,CAAX,EAAiB;AACfJ,IAAAA,OAAO,CAACD,KAAR,CAAe,CAAkC,gCAAA,EAAA,OAAOK,EAAG,CAA3D,CAAA,CAAA,CAAA;AACA,IAAA,OAAOvC,GAAP,CAAA;AACD,GAAA;AAED,EAAA,MAAMU,OAAO,GAAGD,MAAM,CAACC,OAAP,CAAeV,GAAf,CAAhB,CAAA;EAEA,MAAMwC,YAAY,GAAGb,KAAK,CAAC3B,GAAD,CAAL,GAAa,EAAb,GAAkB,EAAvC,CAAA;AAEA,EAAA,OAAOU,OAAO,CAACY,MAAR,CAAe,CAACtB,GAAD,EAAM,CAAEY,GAAF,EAAOC,KAAP,CAAN,KAAyB;AAC7C,IAAA,MAAM4B,MAAM,GAAGF,EAAE,CAAC3B,GAAD,EAAMC,KAAN,CAAjB,CAAA;AACA,IAAA,IAAI,CAAC6B,OAAO,CAACD,MAAD,CAAZ,EAAsB;AACpBN,MAAAA,OAAO,CAACD,KAAR,CACG,CAAA,4CAAA,EAA8CO,MAAO,CADxD,8BAAA,CAAA,CAAA,CAAA;AAGA,MAAA,OAAOE,GAAG,CAAC3C,GAAD,EAAMY,GAAN,EAAWC,KAAX,CAAV,CAAA;AACD,KAAA;AACD,IAAA,OAAO8B,GAAG,CAAC3C,GAAD,EAAMyC,MAAM,CAAC,CAAD,CAAZ,EAAiBA,MAAM,CAAC,CAAD,CAAvB,CAAV,CAAA;GARK,EASJD,YATI,CAAP,CAAA;AAUD;;MChCYI,OAAO,GAAG,CAAC5C,GAAD,EAAM6C,SAAN,KAAoB;AACzC,EAAA,IAAI,CAAC1B,KAAK,CAACnB,GAAD,CAAN,IAAe,CAAC6B,MAAM,CAACgB,SAAD,CAA1B,EAAuC,OAAO7C,GAAP,CAAA;AAEvC,EAAA,OAAOsC,UAAU,CAACtC,GAAD,EAAM,CAACY,GAAD,EAAMC,KAAN,KAAgB,CAAEgC,SAAS,CAACjC,GAAD,CAAX,EAAkBC,KAAlB,CAAtB,CAAjB,CAAA;AACD;;MCLYiC,MAAM,GAAG,CAAC9C,GAAD,EAAMuC,EAAN,KAAa;AACjC,EAAA,IAAI,CAACpB,KAAK,CAACnB,GAAD,CAAV,EAAiB,OAAO,EAAP,CAAA;AAEjB,EAAA,MAAMU,OAAO,GAAGD,MAAM,CAACC,OAAP,CAAeV,GAAf,CAAhB,CAAA;EACA,OAAO6B,MAAM,CAACU,EAAD,CAAN,GAAa7B,OAAO,CAACC,GAAR,CAAY,CAAC,CAAEC,GAAF,EAAOC,KAAP,CAAD,KAAoB0B,EAAE,CAAC3B,GAAD,EAAMC,KAAN,CAAlC,CAAb,GAA+DH,OAAtE,CAAA;AACD;;ACLM,MAAMqC,QAAQ,GAAG,CAAC/C,GAAG,GAAG,EAAP,EAAWgD,IAAI,GAAG,EAAlB,KACrB7B,KAAK,CAACnB,GAAD,CAAL,IACCiD,SAAS,CACPjD,GADO,EAEP,CAACY,GAAD,EAAMsC,CAAN,EAASC,OAAT,KAAqB;AACnBH,EAAAA,IAAI,CAAClC,OAAL,CAAaF,GAAb,CAAA,KAAsB,CAAC,CAAvB,KAA6BuC,OAAO,CAACvC,GAAD,CAAP,GAAeZ,GAAG,CAACY,GAAD,CAA/C,CAAA,CAAA;AAEA,EAAA,OAAOuC,OAAP,CAAA;AACD,CANM,EAOP,EAPO,CADX,IAUA;;ACZK,MAAMC,QAAQ,GAAG,CAACpD,GAAG,GAAG,EAAP,EAAWgD,IAAI,GAAG,EAAlB,KACrB7B,KAAK,CAACnB,GAAD,CAAL,IACCgD,IAAI,CAAC1B,MAAL,CAAY,CAAC6B,OAAD,EAAUvC,GAAV,KAAkB;EAC5BA,GAAG,IAAIZ,GAAP,KAAemD,OAAO,CAACvC,GAAD,CAAP,GAAeZ,GAAG,CAACY,GAAD,CAAjC,CAAA,CAAA;AAEA,EAAA,OAAOuC,OAAP,CAAA;AACD,CAJD,EAIG,EAJH,CADF,IAMA;;MCRWE,YAAY,GAAGrD,GAAG,IAAIC,IAAI,CAACC,KAAL,CAAWoD,QAAQ,CAACrD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAD,CAAnB;;ACA5B,MAAMuD,gBAAgB,GAAGC,MAAM,IACpC/C,MAAM,CAACC,OAAP,CAAe8C,MAAf,EAAuBlC,MAAvB,CAA8B,CAACmC,OAAD,EAAU,CAAE7C,GAAF,EAAOC,KAAP,CAAV,KAA6B;AACzD4C,EAAAA,OAAO,CAAC7C,GAAD,CAAP,GAAe8C,KAAK,CAAC7C,KAAD,CAAL,GAAeA,KAAK,CAAC8C,IAAN,EAAf,GAA8B9C,KAA7C,CAAA;AACA,EAAA,OAAO4C,OAAP,CAAA;AACD,CAHD,EAGGD,MAHH;;ACGK,MAAMI,KAAK,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,KAAf,KAAyB;AAC5C,EAAA,IAAIpC,KAAK,CAACkC,GAAD,CAAT,EACE,OAAOpD,MAAM,CAACuC,IAAP,CAAYa,GAAZ,EAAiBvC,MAAjB,CAAwB,CAACtB,GAAD,EAAMY,GAAN,KAAc;AAC3CZ,IAAAA,GAAG,CAACY,GAAD,CAAH,GAAWiD,GAAG,CAACjD,GAAD,CAAd,CAAA;AAEA,IAAA,OAAOZ,GAAP,CAAA;GAHK,EAIJ,EAJI,CAAP,CAAA;AAMF,EAAA,IAAI,CAAC0D,KAAK,CAACG,GAAD,CAAV,EAAiB,OAAO,EAAP,CAAA;EAEjBC,OAAO,GAAGA,OAAO,IAAI,GAArB,CAAA;EACAC,KAAK,GAAGA,KAAK,IAAI,GAAjB,CAAA;AACA,EAAA,OAAOF,GAAG,CACPG,QADI,EAAA,CAEJD,KAFI,CAEEA,KAFF,CAGJzC,CAAAA,MAHI,CAGG,CAACtB,GAAD,EAAMiE,IAAN,KAAe;AACrB,IAAA,MAAMC,GAAG,GAAGD,IAAI,CAACF,KAAL,CAAWD,OAAX,CAAZ,CAAA;AACA9D,IAAAA,GAAG,CAACkE,GAAG,CAAC,CAAD,CAAH,CAAOP,IAAP,EAAD,CAAH,GAAqBQ,SAAS,CAACD,GAAG,CAAC,CAAD,CAAH,CAAOP,IAAP,EAAD,CAA9B,CAAA;AAEA,IAAA,OAAO3D,GAAP,CAAA;GAPG,EAQF,EARE,CAAP,CAAA;AASD;;ACvBM,MAAMoE,MAAM,GAAG,CAACC,GAAD,EAAMC,WAAN,KACnB3C,KAAK,CAAC0C,GAAD,CAAL,IACCA,GAAG,CAAC/C,MAAJ,CAAW,CAACtB,GAAD,EAAMY,GAAN,KAAc;AACvB,EAAA,IAAI,CAAC8C,KAAK,CAAC9C,GAAD,CAAV,EAAiB,OAAOZ,GAAP,CAAA;EAEjB,MAAMuE,GAAG,GAAID,WAAW,IAAI1D,GAAG,CAAC0D,WAAJ,EAAhB,IAAsC1D,GAAlD,CAAA;AACAZ,EAAAA,GAAG,CAACuE,GAAD,CAAH,GAAWA,GAAX,CAAA;AAEA,EAAA,OAAOvE,GAAP,CAAA;AACD,CAPD,EAOG,EAPH,CADF,IASA;;ACRK,MAAMwE,UAAU,GAAG,CAACxE,GAAD,EAAMyE,SAAN,EAAiBC,QAAQ,GAAG,IAA5B,KAAqC;AAC7D,EAAA,IAAI,CAACvD,KAAK,CAACnB,GAAD,CAAV,EAAiB;IACf0E,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAiBlC,eAAAA,EAAAA,GAAI,qBAApC,CAAZ,CAAA;AACA,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED,EAAA,IAAI,CAAC6B,MAAM,CAAC4C,SAAD,CAAX,EAAwB;IACtBC,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAkBuC,gBAAAA,EAAAA,SAAU,mBAA3C,CAAZ,CAAA;AACA,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED,EAAA,OAAOE,QAAQ,CAAC3E,GAAD,EAAMS,MAAM,CAACC,OAAb,EAAsBA,OAAO,IAC1CA,OAAO,CAACkE,KAAR,CAAc,CAAC,CAAEhE,GAAF,EAAOC,KAAP,CAAD,KAAoB4D,SAAS,CAAC7D,GAAD,EAAMC,KAAN,CAA3C,CADa,CAAf,CAAA;AAGD;;ACdM,MAAMgE,SAAS,GAAG,CAAC7E,GAAD,EAAMyE,SAAN,EAAiBC,QAAQ,GAAG,IAA5B,KAAqC;AAC5D,EAAA,IAAI,CAACvD,KAAK,CAACnB,GAAD,CAAV,EAAiB;IACf0E,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAiBlC,eAAAA,EAAAA,GAAI,qBAApC,CAAZ,CAAA;AACA,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED,EAAA,IAAI,CAAC6B,MAAM,CAAC4C,SAAD,CAAX,EAAwB;IACtBC,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAkBuC,gBAAAA,EAAAA,SAAU,mBAA3C,CAAZ,CAAA;AACA,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AAED,EAAA,OAAOE,QAAQ,CAAC3E,GAAD,EAAMS,MAAM,CAACC,OAAb,EAAsBA,OAAO,IAC1CA,OAAO,CAACoE,IAAR,CAAa,CAAC,CAAElE,GAAF,EAAOC,KAAP,CAAD,KAAoB4D,SAAS,CAAC7D,GAAD,EAAMC,KAAN,CAA1C,CADa,CAAf,CAAA;AAGD;;ACbM,MAAMkE,SAAS,GAAG,CAAC/E,GAAD,EAAMyE,SAAN,EAAiBC,QAAQ,GAAG,IAA5B,KAAqC;AAC5D,EAAA,IAAI,CAACvD,KAAK,CAACnB,GAAD,CAAV,EAAiB;IACf0E,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAiBlC,eAAAA,EAAAA,GAAI,qBAApC,CAAZ,CAAA;AACA,IAAA,OAAOA,GAAP,CAAA;AACD,GAAA;AAED,EAAA,IAAI,CAAC6B,MAAM,CAAC4C,SAAD,CAAX,EAAwB;IACtBC,QAAQ,IAAIvC,OAAO,CAACD,KAAR,CAAe,CAAkBuC,gBAAAA,EAAAA,SAAU,mBAA3C,CAAZ,CAAA;AACA,IAAA,OAAOzE,GAAP,CAAA;AACD,GAAA;EAED,OAAOiD,SAAS,CACdjD,GADc,EAEd,CAACY,GAAD,EAAMC,KAAN,EAAamE,IAAb,KAAsB;AACpB,IAAA,IAAIP,SAAS,CAAC7D,GAAD,EAAMC,KAAN,CAAb,EAA2BmE,IAAI,CAACpE,GAAD,CAAJ,GAAYC,KAAZ,CAAA;AAC3B,IAAA,OAAOmE,IAAP,CAAA;GAJY,EAMd,EANc,CAAhB,CAAA;AAQD;;AChCD,MAAMC,GAAG,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;EACzB,OAAOD,IAAI,CAACE,MAAL,GAAcD,GAArB,EACED,IAAI,GAAG,GAAA,GAAMA,IAAb,CAAA;AAEF,EAAA,OAAOA,IAAP,CAAA;AACD,CALD,CAAA;AAOA,MAAMG,IAAI,GAAG,CAACH,IAAD,EAAOI,IAAP,KAAgB;AAC3B,EAAA,IAAIA,IAAI,CAACF,MAAL,KAAgB,CAApB,EAAuB,OAAOF,IAAP,CAAA;AAEvB,EAAA,IAAIK,CAAJ,CAAA;AACA,EAAA,IAAIC,GAAJ,CAAA;AACA,EAAA,IAAIL,GAAJ,CAAA;AAEA,EAAA,KAAKI,CAAC,GAAG,CAAJ,EAAOJ,GAAG,GAAGG,IAAI,CAACF,MAAvB,EAA+BG,CAAC,GAAGJ,GAAnC,EAAwCI,CAAC,EAAzC,EAA6C;AAC3CC,IAAAA,GAAG,GAAGF,IAAI,CAACG,UAAL,CAAgBF,CAAhB,CAAN,CAAA;IACAL,IAAI,GAAI,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAf,GAAuBM,GAA9B,CAAA;AACAN,IAAAA,IAAI,IAAI,CAAR,CAAA;AACD,GAAA;EAED,OAAOA,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAC,CAAnB,GAAuBA,IAA9B,CAAA;AACD,CAdD,CAAA;AAgBA,MAAMQ,UAAU,GAAG,CAACR,IAAD,EAAOlF,GAAP,EAAY2F,IAAZ,KAAqB;AACtC,EAAA,MAAMC,OAAO,GAAG,CAACV,IAAD,EAAOtE,GAAP,KAAeiF,SAAS,CAACX,IAAD,EAAOlF,GAAG,CAACY,GAAD,CAAV,EAAiBA,GAAjB,EAAsB+E,IAAtB,CAAxC,CAAA;AAEA,EAAA,OAAOlF,MAAM,CAACuC,IAAP,CAAYhD,GAAZ,CAAA,CAAiB8F,IAAjB,EAAA,CAAwBxE,MAAxB,CAA+BsE,OAA/B,EAAwCV,IAAxC,CAAP,CAAA;AACD,CAJD,CAAA;AAMA,MAAMW,SAAS,GAAG,CAACE,KAAD,EAAQlF,KAAR,EAAeD,GAAf,EAAoB+E,IAApB,KAA6B;EAC7C,MAAMT,IAAI,GAAGG,IAAI,CAACA,IAAI,CAACA,IAAI,CAACU,KAAD,EAAQnF,GAAR,CAAL,EAAmBoD,QAAQ,CAACnD,KAAD,CAA3B,CAAL,EAA0C,OAAOA,KAAjD,CAAjB,CAAA;EAEA,IAAIA,KAAK,KAAK,IAAd,EAAoB,OAAOwE,IAAI,CAACH,IAAD,EAAO,MAAP,CAAX,CAAA;EAEpB,IAAIrE,KAAK,KAAKE,SAAd,EAAyB,OAAOsE,IAAI,CAACH,IAAD,EAAO,WAAP,CAAX,CAAA;EAEzB,IAAI,OAAOrE,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,UAAlD,EAA8D;AAC5D,IAAA,IAAI8E,IAAI,CAAC7E,OAAL,CAAaD,KAAb,MAAwB,CAAC,CAA7B,EAAgC,OAAOwE,IAAI,CAACH,IAAD,EAAO,YAAA,GAAetE,GAAtB,CAAX,CAAA;IAEhC+E,IAAI,CAACK,IAAL,CAAUnF,KAAV,CAAA,CAAA;IAEA,MAAMoF,OAAO,GAAGP,UAAU,CAACR,IAAD,EAAOrE,KAAP,EAAc8E,IAAd,CAA1B,CAAA;IAEA,IAAI,EAAE,SAAa9E,IAAAA,KAAf,CAAyB,IAAA,OAAOA,KAAK,CAACqF,OAAb,KAAyB,UAAtD,EAAkED,CAAO;IAEzE,IAAI;MACF,OAAOZ,IAAI,CAACY,OAAD,EAAUE,MAAM,CAACtF,KAAK,CAACqF,OAAN,EAAD,CAAhB,CAAX,CAAA;KADF,CAGA,OAAOE,GAAP,EAAY;AACV,MAAA,OAAOf,IAAI,CAACY,OAAD,EAAU,qBAAyBG,IAAAA,GAAG,CAACC,KAAJ,IAAaD,GAAG,CAAC9F,OAA1C,CAAV,CAAX,CAAA;AACD,KAAA;AAEF,GAAA;EAED,OAAO+E,IAAI,CAACH,IAAD,EAAOrE,KAAK,CAACmD,QAAN,EAAP,CAAX,CAAA;AACD,CA1BD,CAAA;AA4BA,MAAMA,QAAQ,GAAIhE,GAAD,IAASS,MAAM,CAAC6F,SAAP,CAAiBtC,QAAjB,CAA0BuC,IAA1B,CAA+BvG,GAA/B,CAA1B,CAAA;AAOO,MAAMwG,OAAO,GAAIxG,GAAD,IAASiF,GAAG,CAACY,SAAS,CAAC,CAAD,EAAI7F,GAAJ,EAAS,EAAT,EAAa,EAAb,CAAT,CAA0BgE,QAA1B,CAAmC,EAAnC,CAAD,EAAyC,CAAzC;;AC7C5B,MAAMyC,WAAW,GAAG,CAACzG,GAAG,GAAG,EAAP,EAAWgD,IAAX,KAAoB;EAC7C,IAAI,CAACA,IAAL,EAAW,OAAO,CAAC,EAAD,EAAK,EAAE,GAAGhD,GAAAA;AAAL,GAAL,CAAP,CAAA;AAEX,EAAA,MAAM0G,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,CAAlB,CAAA;AACA,EAAA,MAAMC,WAAW,GAAGC,SAAS,CAAC5D,IAAD,CAA7B,CAAA;AAEA,EAAA,OAAO7B,KAAK,CAACnB,GAAD,CAAL,GACHiD,SAAS,CACTjD,GADS,EAET,CAACY,GAAD,EAAMsC,CAAN,EAASC,OAAT,KAAqB;AACnB0D,IAAAA,MAAM,CAACF,WAAW,CAACG,IAAZ,CAAiBC,CAAC,IAAIF,MAAM,CAACE,CAAD,CAAN,IAAaC,KAAK,CAACD,CAAD,CAAL,KAAanG,GAAhD,CAAD,CAAN,GACKuC,OAAO,CAAC,CAAD,CAAP,CAAWvC,GAAX,IAAkBZ,GAAG,CAACY,GAAD,CAD1B,GAEKuC,OAAO,CAAC,CAAD,CAAP,CAAWvC,GAAX,IAAkBZ,GAAG,CAACY,GAAD,CAF1B,CAAA;AAIA,IAAA,OAAOuC,OAAP,CAAA;AACD,GARQ,EASTuD,SATS,CADN,GAYHA,SAZJ,CAAA;AAaD;;AC3BYO,MAAAA,aAAa,GAAG,CAC3BjH,GAAG,GAACkH,QADuB,EAE3B9C,MAAM,GAAC8C,QAFoB,EAG3BC,IAAI,GAACD,QAHsB,KAIxB;EACH,MAAM;AAAEE,IAAAA,MAAM,GAAC,KAAA;AAAT,GAAA,GAAoBD,IAA1B,CAAA;AAEA,EAAA,OAAO1G,MAAM,CAACC,OAAP,CAAeV,GAAf,EACJsB,MADI,CACG,CAAC+F,GAAD,EAAM,CAACzG,GAAD,EAAMC,KAAN,CAAN,KAAsB;AAC5B,IAAA,MAAMyG,GAAG,GAAGlD,MAAM,CAACxD,GAAD,CAAN,KAAgB,CAACwG,MAAD,GAAUxG,GAAV,GAAgBG,SAAhC,CAAZ,CAAA;AACAuG,IAAAA,GAAG,KAAKD,GAAG,CAACC,GAAD,CAAH,GAAWzG,KAAhB,CAAH,CAAA;AAEA,IAAA,OAAOwG,GAAP,CAAA;GALG,EAMF,EANE,CAAP,CAAA;AAOD;;;;"}