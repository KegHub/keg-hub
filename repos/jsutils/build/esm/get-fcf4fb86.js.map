{"version":3,"file":"get-fcf4fb86.js","sources":["../../src/collection/updateColl.js","../../src/collection/get.js"],"sourcesContent":["/** @module Collection */\n\nimport { isFunc } from '../method/isFunc'\nimport { isArr } from '../array/isArr'\nimport { isColl } from './isColl'\n\n/**\n * Updates a collection by removing, getting, adding to it.\n * @private\n * @function\n * @param {Object} obj - Object to update\n * @param {String|Array} path - Dot notation or Array path to the property to be updated\n * @param {String} type - Type of update to make to the obj argument\n * @param {*} val - Value to set or return based on the type argument\n * @returns {*} - Relative to the type argument\n */\nexport const updateColl = (obj, path, type, val) => {\n  const org = obj\n  if (!isColl(obj) || !obj || !path) return (type !== 'set' && val) || undefined\n\n  // cloneDeep so we don't modify the reference\n  const parts = isArr(path) ? Array.from(path) : path.split('.')\n  const key = parts.pop()\n  let prop\n  let breakPath\n\n  while ((prop = parts.shift())) {\n    const next = obj[prop]\n\n    isColl(next) || isFunc(next)\n      ? (obj = next)\n      : (() => {\n          if (type === 'set') obj[prop] = {}\n          else breakPath = true\n          obj = obj[prop]\n        })()\n\n    if (breakPath) return val\n  }\n\n  return type === 'get'\n    ? // Get return the value\n    key in obj\n      ? obj[key]\n      : val\n    : type === 'unset'\n      ? // Unset, return if the key was removed\n      delete obj[key]\n      : // Set, updated object\n        ((obj[key] = val) && org) || org\n}\n","/** @module Collection */\n\nimport { updateColl } from './updateColl'\n\n/**\n * Searches an object based on the path param\n * <br/>I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br/>If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - Will search the object based on the path\n * @param {String|Array<string>} path - Dot notation string or Array of string keys of the object\n * @param {*} [fallback] - Separated string to search the object\n * @return {*} - The final value found from the path\n */\nexport const get = (obj, path, fallback) =>\n  updateColl(obj, path, 'get', fallback)\n"],"names":["updateColl","obj","path","type","val","org","isColl","undefined","parts","isArr","Array","from","split","key","pop","prop","breakPath","shift","next","isFunc","get","fallback"],"mappings":";;;;MAgBaA,UAAU,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,GAAlB,KAA0B;AAClD,QAAMC,GAAG,GAAGJ,GAAZ;AACA,MAAI,CAACK,MAAM,CAACL,GAAD,CAAP,IAAgB,CAACA,GAAjB,IAAwB,CAACC,IAA7B,EAAmC,OAAQC,IAAI,KAAK,KAAT,IAAkBC,GAAnB,IAA2BG,SAAlC,CAFe;AAKlD,QAAMC,KAAK,GAAGC,KAAK,CAACP,IAAD,CAAL,GAAcQ,KAAK,CAACC,IAAN,CAAWT,IAAX,CAAd,GAAiCA,IAAI,CAACU,KAAL,CAAW,GAAX,CAA/C;AACA,QAAMC,GAAG,GAAGL,KAAK,CAACM,GAAN,EAAZ;AACA,MAAIC,IAAJ;AACA,MAAIC,SAAJ;AAEA,SAAQD,IAAI,GAAGP,KAAK,CAACS,KAAN,EAAf,EAA+B;AAC7B,UAAMC,IAAI,GAAGjB,GAAG,CAACc,IAAD,CAAhB;AAEAT,IAAAA,MAAM,CAACY,IAAD,CAAN,IAAgBC,MAAM,CAACD,IAAD,CAAtB,GACKjB,GAAG,GAAGiB,IADX,GAEI,CAAC,MAAM;AACL,UAAIf,IAAI,KAAK,KAAb,EAAoBF,GAAG,CAACc,IAAD,CAAH,GAAY,EAAZ,CAApB,KACKC,SAAS,GAAG,IAAZ;AACLf,MAAAA,GAAG,GAAGA,GAAG,CAACc,IAAD,CAAT;AACD,KAJD,GAFJ;AAQA,QAAIC,SAAJ,EAAe,OAAOZ,GAAP;AAChB;AAED,SAAOD,IAAI,KAAK,KAAT;AAELU,EAAAA,GAAG,IAAIZ,GAAP,GACIA,GAAG,CAACY,GAAD,CADP,GAEIT,GAJC,GAKHD,IAAI,KAAK,OAAT;AAEA,SAAOF,GAAG,CAACY,GAAD,CAFV;AAIG,GAACZ,GAAG,CAACY,GAAD,CAAH,GAAWT,GAAZ,KAAoBC,GAArB,IAA6BA,GATnC;AAUD;;MC9BYe,GAAG,GAAG,CAACnB,GAAD,EAAMC,IAAN,EAAYmB,QAAZ,KACjBrB,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAY,KAAZ,EAAmBmB,QAAnB;;;;"}