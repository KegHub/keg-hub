{"version":3,"file":"get-b02e8c28.js","sources":["../../src/collection/get.js"],"sourcesContent":["/** @module Collection */\n\nimport { exists } from '../ext/exists'\nimport { isArr } from '../array/isArr'\n\n/**\n * Searches an object based on the path param\n * <br/>I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br/>If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - Will search the object based on the path\n * @param {String|Array<string>} path - Dot notation string or Array of string keys of the object\n * @param {*} [fallback] - Separated string to search the object\n * @return {*} - The final value found from the path\n */\nexport const get = (obj, path, fallback) => {\n  const parts = isArr(path) ? path : path.split('.')\n\n  const result = parts.reduce((obj, prop) => {\n    const type = typeof obj\n    if (type !== 'object' && type !== 'function') return undefined\n\n    prop = prop.startsWith('[') ? prop.replace(/\\D/g, '') : prop\n    return obj[prop]\n  }, obj)\n\n  return exists(result) ? result : fallback\n}\n"],"names":["get","obj","path","fallback","parts","isArr","split","result","reduce","prop","type","undefined","startsWith","replace","exists"],"mappings":";;;AAqBO,MAAMA,GAAG,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,QAAZ,KAAyB;AAC1C,EAAA,MAAMC,KAAK,GAAGC,KAAK,CAACH,IAAD,CAAL,GAAcA,IAAd,GAAqBA,IAAI,CAACI,KAAL,CAAW,GAAX,CAAnC,CAAA;EAEA,MAAMC,MAAM,GAAGH,KAAK,CAACI,MAAN,CAAa,CAACP,GAAD,EAAMQ,IAAN,KAAe;IACzC,MAAMC,IAAI,GAAG,OAAOT,GAApB,CAAA;IACA,IAAIS,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,UAAlC,EAA8C,OAAOC,SAAP,CAAA;AAE9CF,IAAAA,IAAI,GAAGA,IAAI,CAACG,UAAL,CAAgB,GAAhB,CAAuBH,GAAAA,IAAI,CAACI,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAvB,GAAiDJ,IAAxD,CAAA;IACA,OAAOR,GAAG,CAACQ,IAAD,CAAV,CAAA;GALa,EAMZR,GANY,CAAf,CAAA;AAQA,EAAA,OAAOa,MAAM,CAACP,MAAD,CAAN,GAAiBA,MAAjB,GAA0BJ,QAAjC,CAAA;AACD;;;;"}