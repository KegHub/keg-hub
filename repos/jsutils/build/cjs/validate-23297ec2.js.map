{"version":3,"file":"validate-23297ec2.js","sources":["../../src/validation/validate.js"],"sourcesContent":["/** @module Validation */\n\n/**\n * @type {Object}\n */\nconst OPTIONS = {\n  SHOULD_LOG: true,\n  SHOULD_THROW: false,\n  LOG_PREFIX: null,\n}\n\n// if no default or custom validator set for an arg, just assert it is valid\nconst defaultValidator = () => true\n\n/**\n *  Validates each key-value entry in argObj using the validator functions in validators with matching keys.\n *  <br/>For any failures, validate will console.error the reason.\n *  @param {Object} argObj - object, where keys are the name of the argument to validate, and value is its value\n *  @param {Object} validators - object, where keys match the argument and values are predicate functions (return true/false and are passed the arg with the same key).\n *     - Use the `$default` key to define a default validator, which will validate any argument that doesn't have a custom validator defined.\n *  @param {Object} options - contains `logs`, `throws`, and `prefix` props. When a validation fails, it will throw an error if `throws` is true. Else it logs error if `logs` is true. `prefix` prepends a string to the error messages.\n *  @returns {Array} - An entry with two values [ success, results ].<br/>\n *     - success: { Boolean } that is true if all arguments passed their validators, false otherwise<br/>\n *     - results: {Object} that holds the validation results for each argument, keyed by the same keys as in argObj. For each\n *                result object, the properties are: { success, key, value, validator, reason }.\n *  @function\n *  @example\n *    const elements = {}\n *    const name = 'michael'\n *    const address = '12345 E. Street'\n *    const [ isValid, results ] = validate(\n *      { elements, name, address },\n *      { elements: isArr, $default: isStr }\n *    )\n *    console.log(isValid) // false\n *    console.log(results.elements.success) // false\n */\nexport const validate = (argObj, validators = {}, options = {}) => {\n  const {\n    logs = OPTIONS.SHOULD_LOG,\n    throws = OPTIONS.SHOULD_THROW,\n    prefix = OPTIONS.LOG_PREFIX,\n  } = options\n\n  const validationCaseEntries = Object.entries(argObj)\n\n  // validate each argument\n  const validationResults = validationCaseEntries.map(([ argName, argValue ]) =>\n    validateArgument(\n      argName,\n      argValue,\n      validators[argName] || validators.$default || defaultValidator\n    )\n  )\n\n  // reduce the argument validation results into a single object of form { success, cases }.\n  // success is true if all arguments passed their validators. Cases holds each argument's validation results.\n  const reduceCases = (total, next) =>\n    validationReducer(total, next, { logs, throws, prefix })\n  const { success, cases } = validationResults.reduce(reduceCases, {\n    success: true,\n    cases: {},\n  })\n\n  return [ success, cases ]\n}\n\n/**\n * If you need to configure validation properties globally, you can do so here. These are overridden by the validate options arguments,\n * if one is defined in validate().\n * @function\n * @param {Object} options\n * @param {Boolean} options.logs - indicates you want validate() to log errors when a case fails\n * @param {Boolean} options.throws - indicates validate() should throw an error when a case fails\n * @param {String} options.prefix - a prefix to any console error logs or to messages of errors thrown\n */\nvalidate.setOptions = ({ logs, throws, prefix }) => {\n  if (logs !== undefined) {\n    OPTIONS.SHOULD_LOG = logs\n  }\n  if (throws !== undefined) {\n    OPTIONS.SHOULD_THROW = throws\n  }\n  if (prefix !== undefined) {\n    OPTIONS.LOG_PREFIX = prefix\n  }\n}\n\n/**\n * Resets the global validation options to their defaults\n * @function\n */\nvalidate.resetOptions = () => {\n  OPTIONS.SHOULD_LOG = true\n  OPTIONS.SHOULD_THROW = false\n  OPTIONS.LOG_PREFIX = null\n}\n\n/**\n * Helper for `validate`. Validates a single value given a validator\n * @param {*} key\n * @param {*} value\n * @param {Function} validator\n * @returns {Object} of form { success, reason }\n * @ignore\n */\nconst validateArgument = (key, value, validator) => {\n  const success = validator(value)\n\n  // if validator is a named function, use its name. If it is an inline anonymous arrow function, its name\n  // matches the argument key and it has no useful/descriptive name, so just stringify it\n  const shouldStringifyValidator =\n    !validator.name || validator.name === key || validator.name === '$default'\n  const validatorString = shouldStringifyValidator\n    ? validator.toString()\n    : validator.name\n\n  const reason = success\n    ? null\n    : [\n        `Argument \"${key}\" with value `,\n        value,\n        ` failed validator: ${validatorString}.`,\n      ]\n\n  return { success, key, value, validator, reason }\n}\n\n/**\n * Helper for `validate`. Reduces validations into a single object of form { success, cases }\n * @param {*} finalResult\n * @param {*} nextValidation\n * @ignore\n */\nconst validationReducer = (\n  finalResult,\n  nextValidation,\n  { logs, throws, prefix }\n) => {\n  // handle the failure\n  !nextValidation.success && handleFailure(nextValidation, logs, throws, prefix)\n\n  return {\n    success: finalResult.success && nextValidation.success,\n    cases: {\n      ...finalResult.cases,\n      [nextValidation.key]: nextValidation,\n    },\n  }\n}\n\n/**\n * Handles a validation failure given validation options\n * @param {Object} validation\n * @param {Boolean} shouldLog\n * @param {Boolean} shouldThrow\n * @param {String} prefix - optional prefix to any error or console log\n * @ignore\n */\nconst handleFailure = (validation, shouldLog, shouldThrow, prefix) => {\n  // prepend the prefix if one is defined\n  const reason = prefix ? [ prefix, ...validation.reason ] : validation.reason\n\n  if (shouldThrow) throw new Error(reason.join())\n\n  if (shouldLog) console.error(...reason)\n}\n"],"names":["OPTIONS","SHOULD_LOG","SHOULD_THROW","LOG_PREFIX","defaultValidator","validate","argObj","validators","options","logs","throws","prefix","validationCaseEntries","Object","entries","validationResults","map","argName","argValue","validateArgument","$default","reduceCases","total","next","validationReducer","success","cases","reduce","setOptions","undefined","resetOptions","key","value","validator","shouldStringifyValidator","name","validatorString","toString","reason","finalResult","nextValidation","handleFailure","validation","shouldLog","shouldThrow","Error","join","console","error"],"mappings":"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"}