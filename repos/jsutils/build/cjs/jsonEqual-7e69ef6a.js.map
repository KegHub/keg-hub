{"version":3,"file":"jsonEqual-7e69ef6a.js","sources":["../../src/object/hasOwn.js","../../src/object/isEntry.js","../../src/object/isArrMap.js","../../src/object/jsonEqual.js"],"sourcesContent":["/** @module Object */\n\n/**\n * Checks if prop exists on the object.\n * @function\n * @param {Object} obj - data to check\n * @param {String} prop - prop to check for\n * @returns {Boolean} T/F if the prop exists\n */\nexport const hasOwn = (obj, prop) =>\n  Object.prototype.hasOwnProperty.call(obj, prop)\n","/** @module Object */\n\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {*} maybeEntry - Item to check if it's an entry\n *\n * @returns {Boolean} - True if it is an entry, false otherwise\n */\nexport const isEntry = maybeEntry =>\n  isArr(maybeEntry) &&\n  maybeEntry.length === 2 &&\n  (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n","/** @module Object */\n\nimport { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every value is an array\n * @function\n * @param {Object|*} obj - data to check\n * @return {Boolean} - true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(values.length && values.every(isArr))\n}\n","/** @module Object */\n\n/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {Boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch (e) {\n    return false\n  }\n}\n"],"names":["hasOwn","obj","prop","Object","prototype","hasOwnProperty","call","isEntry","maybeEntry","isArr","length","isNum","isStr","isArrMap","isObj","values","toBool","every","jsonEqual","one","two","JSON","stringify","e"],"mappings":";;;;;;;;MASaA,MAAM,GAAG,CAACC,GAAD,EAAMC,IAAN,KACpBC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,GAArC,EAA0CC,IAA1C;;ACQWK,MAAAA,OAAO,GAAGC,UAAU,IAC/BC,WAAK,CAACD,UAAD,CAAL,IACAA,UAAU,CAACE,MAAX,KAAsB,CADtB,KAECC,WAAK,CAACH,UAAU,CAAC,CAAD,CAAX,CAAL,IAAwBI,WAAK,CAACJ,UAAU,CAAC,CAAD,CAAX,CAF9B;;ACPWK,MAAAA,QAAQ,GAAGZ,GAAG,IAAI;AAC7B,EAAA,IAAI,CAACa,WAAK,CAACb,GAAD,CAAV,EAAiB,OAAO,KAAP,CAAA;AACjB,EAAA,MAAMc,MAAM,GAAGZ,MAAM,CAACY,MAAP,CAAcd,GAAd,CAAf,CAAA;AACA,EAAA,OAAOe,aAAM,CAACD,MAAM,CAACL,MAAP,IAAiBK,MAAM,CAACE,KAAP,CAAaR,WAAb,CAAlB,CAAb,CAAA;AACD;;MCPYS,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;EACrC,IAAI;IACF,OAAOC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAwBE,KAAAA,IAAI,CAACC,SAAL,CAAeF,GAAf,CAA/B,CAAA;GADF,CAGA,OAAOG,CAAP,EAAU;AACR,IAAA,OAAO,KAAP,CAAA;AACD,GAAA;AACF;;;;;;;"}