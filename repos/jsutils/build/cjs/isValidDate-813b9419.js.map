{"version":3,"file":"isValidDate-813b9419.js","sources":["../../src/ext/typeOf.js","../../src/ext/isEmpty.js","../../src/ext/isSame.js","../../src/ext/isValidDate.js"],"sourcesContent":["/** @module Extra */\n\n/**\n * Gets the type of the passed in val.\n * @example\n * typeOf(1)\n * // Returns Number\n * @example\n * typeOf('')\n * // Returns String\n * @function\n * @param {*} val - value to get type for\n * @return {String} type of the value\n */\nexport const typeOf = val => Object.prototype.toString.call(val).slice(8, -1)\n","/** @module Extra */\n\nimport { isObj } from '../object/isObj'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\n\n/**\n * Checks if the value is empty.\n * @example\n * isEmpty('')\n * // Returns true\n * @example\n * isEmpty({})\n * // Returns true\n * @example\n * isEmpty([ 1 ])\n * // Returns false\n * @function\n * @param {*} val - value to check\n * @return {Boolean} if the value is empty\n */\nexport const isEmpty = val =>\n  isObj(val)\n    ? Object.keys(val).length === 0\n    : isArr(val)\n      ? val.length === 0\n      : isStr(val)\n        ? val.trim().length === 0\n        : isNum(val)\n          ? val < 1\n          : false\n","/** @module Extra */\n\n/**\n * Checks if the passed in values are exactly the same.\n * @example\n * isSame(1, 1)\n * // Returns true\n * @function\n * @param {*} val1 - value to compare\n * @param {*} val2 - value to compare\n * @return {Boolean} is the values are the same\n */\nexport const isSame = (val1, val2) =>\n  val1 === val2\n    ? val1 !== 0 || 1 / val1 === 1 / val2\n    : val1 !== val1 && val2 !== val2\n","/** @module Extra */\n\n/**\n * Checks is passed in date is a valid date.\n * @example\n * isValidDate(new Date())\n * // Returns true\n * @example\n * isValidDate(new Date().toString())\n * // Returns true\n * @example\n * isValidDate('12345678')\n * // Returns false\n * @function\n * @param { Date|String } date - value to check\n * @return {Boolean} T/F - if passed in date is a valid date\n */\nexport const isValidDate = date =>\n  !isNaN(((date instanceof Date && date) || new Date(date)).getTime())\n"],"names":["typeOf","val","Object","prototype","toString","call","slice","isEmpty","isObj","keys","length","isArr","isStr","trim","isNum","isSame","val1","val2","isValidDate","date","isNaN","Date","getTime"],"mappings":";;;;;;;AAcO,MAAMA,MAAM,GAAGC,GAAG,IAAIC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,CAAoCK,CAAAA,KAApC,CAA0C,CAA1C,EAA6C,CAAC,CAA9C;;ACQtB,MAAMC,OAAO,GAAGN,GAAG,IACxBO,WAAK,CAACP,GAAD,CAAL,GACIC,MAAM,CAACO,IAAP,CAAYR,GAAZ,CAAiBS,CAAAA,MAAjB,KAA4B,CADhC,GAEIC,WAAK,CAACV,GAAD,CAAL,GACEA,GAAG,CAACS,MAAJ,KAAe,CADjB,GAEEE,WAAK,CAACX,GAAD,CAAL,GACEA,GAAG,CAACY,IAAJ,EAAA,CAAWH,MAAX,KAAsB,CADxB,GAEEI,WAAK,CAACb,GAAD,CAAL,GACEA,GAAG,GAAG,CADR,GAEE;;ACnBCc,MAAAA,MAAM,GAAG,CAACC,IAAD,EAAOC,IAAP,KACpBD,IAAI,KAAKC,IAAT,GACID,IAAI,KAAK,CAAT,IAAc,CAAIA,GAAAA,IAAJ,KAAa,CAAA,GAAIC,IADnC,GAEID,IAAI,KAAKA,IAAT,IAAiBC,IAAI,KAAKA;;ACEzB,MAAMC,WAAW,GAAGC,IAAI,IAC7B,CAACC,KAAK,CAAC,CAAED,IAAI,YAAYE,IAAhB,IAAwBF,IAAzB,IAAkC,IAAIE,IAAJ,CAASF,IAAT,CAAnC,EAAmDG,OAAnD,EAAD;;;;;;;"}