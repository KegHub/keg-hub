{"version":3,"file":"joinRegex-c1d713c5.js","sources":["../../src/regex/isRegex.js","../../src/regex/getRegexSource.js","../../src/regex/joinRegex.js"],"sourcesContent":["/**\n * Checks if value is an instance of regex\n * @function\n * @param {*} val\n * @return {Boolean} true if val is an instance of RegExp\n * @example\n * isRegex(new RegExp('a')) // true\n * isRegex(/a/) // true\n * isRegex('a') // false\n */\nexport const isRegex = val => Boolean(val && val instanceof RegExp)\n","import { isRegex } from './isRegex'\nimport { isStr } from '../string'\n\n/**\n * Attempts to return a regex string from maybeRx.\n * @function\n * @param {*} maybeRx - any time\n * @return {string?} If maybeRx is a RegExp instance, returns its .source\n * property. If it is a string, returns it unchanged.\n * Otherwise, returns null.\n *\n * @example\n * getRegexSource(/[A-z]+/) // '[A-z]+'\n * getRegexSource('test') // 'test'\n * getRegexSource(34) // null\n */\nexport const getRegexSource = maybeRx =>\n  isRegex(maybeRx) ? maybeRx.source : isStr(maybeRx) ? maybeRx : null\n","import { isStr } from '../string'\nimport { isArr } from '../array'\nimport { getRegexSource } from './getRegexSource'\n\n/**\n * Helper for `joinRegex` that parses the args\n * @param {...*} args\n * @return {Array} [\n *  expressions array,\n *  options string\n * ]\n */\nconst parseArgs = args => {\n  if (isArr(args[0])) return [ args[0], args[1] ]\n  const last = args[args.length - 1]\n  const options = isStr(last) ? last : undefined\n  const expressions = options ? args.splice(0, args.length - 1) : args\n  return [ expressions, options ]\n}\n\n/**\n * Joins regex together in one expression\n * <br/>You can technically use strings as well\n * <br/>But be careful that it's not the last element of a spread call\n * <br/>Or that will be interpreted as the \"options\" string.\n * @function\n * @param {...RegExp} expressions array of regex instances.\n * @example\n * // calling using spread args\n * const joined = joinRegex(/[A-z]+/, /[0-9]/, 'g')\n * joined === /([A-z]+|[0-9])/g\n * @example\n * // calling with an array\n * const joined = joinRegex([ ...allMyRegEx ], 'gi')\n */\nexport const joinRegex = (...args) => {\n  const [ expressions, options ] = parseArgs(args)\n\n  // join the regex together in a capture group with the | operator\n  const source = expressions.reduce((joined, next) => {\n    const nextSource = getRegexSource(next)\n    return !nextSource\n      ? joined\n      : joined === ''\n        ? nextSource\n        : `${joined}|${nextSource}`\n  }, '')\n\n  return new RegExp(`(${source})`, options)\n}\n"],"names":["isRegex","val","Boolean","RegExp","getRegexSource","maybeRx","source","isStr","parseArgs","args","isArr","last","length","options","undefined","expressions","splice","joinRegex","reduce","joined","next","nextSource"],"mappings":";;;;;;;;MAUaA,OAAO,GAAGC,GAAG,IAAIC,OAAO,CAACD,GAAG,IAAIA,GAAG,YAAYE,MAAvB;;MCMxBC,cAAc,GAAGC,OAAO,IACnCL,OAAO,CAACK,OAAD,CAAP,GAAmBA,OAAO,CAACC,MAA3B,GAAoCC,WAAK,CAACF,OAAD,CAAL,GAAiBA,OAAjB,GAA2B;;ACLjE,MAAMG,SAAS,GAAGC,IAAI,IAAI;AACxB,MAAIC,WAAK,CAACD,IAAI,CAAC,CAAD,CAAL,CAAT,EAAoB,OAAO,CAAEA,IAAI,CAAC,CAAD,CAAN,EAAWA,IAAI,CAAC,CAAD,CAAf,CAAP;AACpB,QAAME,IAAI,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAjB;AACA,QAAMC,OAAO,GAAGN,WAAK,CAACI,IAAD,CAAL,GAAcA,IAAd,GAAqBG,SAArC;AACA,QAAMC,WAAW,GAAGF,OAAO,GAAGJ,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeP,IAAI,CAACG,MAAL,GAAc,CAA7B,CAAH,GAAqCH,IAAhE;AACA,SAAO,CAAEM,WAAF,EAAeF,OAAf,CAAP;AACD,CAND;MAuBaI,SAAS,GAAG,CAAC,GAAGR,IAAJ,KAAa;AACpC,QAAM,CAAEM,WAAF,EAAeF,OAAf,IAA2BL,SAAS,CAACC,IAAD,CAA1C,CADoC;AAIpC,QAAMH,MAAM,GAAGS,WAAW,CAACG,MAAZ,CAAmB,CAACC,MAAD,EAASC,IAAT,KAAkB;AAClD,UAAMC,UAAU,GAAGjB,cAAc,CAACgB,IAAD,CAAjC;AACA,WAAO,CAACC,UAAD,GACHF,MADG,GAEHA,MAAM,KAAK,EAAX,GACEE,UADF,GAEG,GAAEF,MAAO,IAAGE,UAAW,EAJ9B;AAKD,GAPc,EAOZ,EAPY,CAAf;AASA,SAAO,IAAIlB,MAAJ,CAAY,IAAGG,MAAO,GAAtB,EAA0BO,OAA1B,CAAP;AACD;;;;;;"}