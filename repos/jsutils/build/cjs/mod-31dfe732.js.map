{"version":3,"file":"mod-31dfe732.js","sources":["../../src/number/nth.js","../../src/number/toFloat.js","../../src/number/toInt.js","../../src/number/mod.js"],"sourcesContent":["/** @module Number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\nimport { toNum } from './toNum'\n\n/**\n * Finds the number ext base on the passed in number.\n * @example\n * nth(1)\n * // Returns 'st'\n * @example\n * nth(2)\n * // Returns 'nd'\n * @example\n * nth(5)\n * // Returns 'th'\n * @function\n * @param {Number} num - value to check\n * @return {String} ext of the number\n */\nexport const nth = num => {\n  if (!isNum(num)) {\n    num = getNums(num)\n    if (!num) return ''\n    num = toNum(num)\n    if (equalsNaN(num)) return ''\n  }\n\n  const mod = num % 100\n  if (mod >= 10 && mod <= 20) return 'th'\n\n  switch (num % 10) {\n  case 1:\n    return 'st'\n  case 2:\n    return 'nd'\n  case 3:\n    return 'rd'\n  default:\n    return 'th'\n  }\n}\n","/** @module Number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to a float.\n * @example\n * toFloat('1.34')\n * // Returns 1.34\n * @example\n * toFloat(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to an float\n */\nexport const toFloat = val =>\n  (val && !equalsNaN(val) && parseFloat((isNum(val) && val) || getNums(val))) ||\n  0\n","/** @module Number */\n\nimport { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to an integer.\n * @example\n * toInt('1')\n * // Returns 1\n * @example\n * toInt(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to a integer\n */\nexport const toInt = val =>\n  (val && !equalsNaN(val) && parseInt((isNum(val) && val) || getNums(val))) || 0\n","/** @module Number */\n\n/**\n * Returns the result of evaluation `num` modulo `divisor`.\n * Javascript's built-in modulo (%) operator does not process values\n * correctly when they are negative. This works properly with\n * negatives numbers.\n * @function\n * @param {Number} num\n * @param {Number} divisor\n * @return {number?} the modulo result. Should be equivalent to\n * return values from the `%` operator, except with negative `num` values.\n * @example\n * -1 % 10      // -1\n * mod(-1, 10)  // 9\n */\nexport const mod = (num, divisor) => {\n  return ((num % divisor) + divisor) % divisor\n}\n"],"names":["nth","num","isNum","getNums","toNum","equalsNaN","mod","toFloat","val","parseFloat","toInt","parseInt","divisor"],"mappings":";;;;;AAsBaA,MAAAA,GAAG,GAAGC,GAAG,IAAI;AACxB,EAAA,IAAI,CAACC,WAAK,CAACD,GAAD,CAAV,EAAiB;AACfA,IAAAA,GAAG,GAAGE,aAAO,CAACF,GAAD,CAAb,CAAA;AACA,IAAA,IAAI,CAACA,GAAL,EAAU,OAAO,EAAP,CAAA;AACVA,IAAAA,GAAG,GAAGG,WAAK,CAACH,GAAD,CAAX,CAAA;AACA,IAAA,IAAII,eAAS,CAACJ,GAAD,CAAb,EAAoB,OAAO,EAAP,CAAA;AACrB,GAAA;AAED,EAAA,MAAMK,GAAG,GAAGL,GAAG,GAAG,GAAlB,CAAA;EACA,IAAIK,GAAG,IAAI,EAAP,IAAaA,GAAG,IAAI,EAAxB,EAA4B,OAAO,IAAP,CAAA;EAE5B,QAAQL,GAAG,GAAG,EAAd;AACA,IAAA,KAAK,CAAL;AACE,MAAA,OAAO,IAAP,CAAA;AACF,IAAA,KAAK,CAAL;AACE,MAAA,OAAO,IAAP,CAAA;AACF,IAAA,KAAK,CAAL;AACE,MAAA,OAAO,IAAP,CAAA;AACF,IAAA;AACE,MAAA,OAAO,IAAP,CAAA;AARF,GAAA;AAUD;;ACzBYM,MAAAA,OAAO,GAAGC,GAAG,IACvBA,GAAG,IAAI,CAACH,eAAS,CAACG,GAAD,CAAjB,IAA0BC,UAAU,CAAEP,WAAK,CAACM,GAAD,CAAL,IAAcA,GAAf,IAAuBL,aAAO,CAACK,GAAD,CAA/B,CAArC,IACA;;ACFWE,MAAAA,KAAK,GAAGF,GAAG,IACrBA,GAAG,IAAI,CAACH,eAAS,CAACG,GAAD,CAAjB,IAA0BG,QAAQ,CAAET,WAAK,CAACM,GAAD,CAAL,IAAcA,GAAf,IAAuBL,aAAO,CAACK,GAAD,CAA/B,CAAnC,IAA6E;;MCHlEF,GAAG,GAAG,CAACL,GAAD,EAAMW,OAAN,KAAkB;AACnC,EAAA,OAAO,CAAEX,GAAG,GAAGW,OAAP,GAAkBA,OAAnB,IAA8BA,OAArC,CAAA;AACD;;;;;;;"}