{"version":3,"file":"identity-599bde17.js","sources":["../../src/method/isOrderable.js","../../src/method/compareTo.js","../../src/method/identity.js"],"sourcesContent":["/** @module Function */\n\nimport { isStr } from '../string'\nimport { isBool } from '../boolean'\nimport { isNum } from '../number'\n\n/**\n * Checks if param is an orderable primitive\n * @function\n * @param {*} x\n * @returns {bool} - true if x is a comparable primitive\n */\nexport const isOrderable = x => isStr(x) || isNum(x) || isBool(x)\n","/** @module Function */\n\nimport { isStr } from '../string'\nimport { isOrderable } from './isOrderable'\nimport { validate } from '../validation'\n\n/**\n * Generic compare to method that works for strings, numbers, and booleans\n * @function\n * @param {string | number | boolean} x\n * @param {string | number | boolean} y\n * @return { number | null } - returns a value < 0 if x is less than y, 0 if they are equal, and a value greater than 0 if x is greater than y. Returns null if the args are not comparable.\n */\nexport const compareTo = (x, y) => {\n  const [valid] = validate({ x, y }, { $default: isOrderable })\n  if (!valid) return null\n  return isStr(x) ? x.localeCompare(y) : x - y\n}\n","/** @module Function */\n\n/**\n * A function that simply returns its input\n * @function\n * @param {*} x\n * @returns {*} the input\n */\nexport const identity = x => x\n"],"names":["isOrderable","x","isStr","isNum","isBool","compareTo","y","valid","validate","$default","localeCompare","identity"],"mappings":";;;;;;;MAYaA,WAAW,GAAGC,CAAC,IAAIC,WAAK,CAACD,CAAD,CAAL,IAAYE,WAAK,CAACF,CAAD,CAAjB,IAAwBG,aAAM,CAACH,CAAD;;MCCjDI,SAAS,GAAG,CAACJ,CAAD,EAAIK,CAAJ,KAAU;AACjC,QAAM,CAACC,KAAD,IAAUC,iBAAQ,CAAC;AAAEP,IAAAA,CAAF;AAAKK,IAAAA;AAAL,GAAD,EAAW;AAAEG,IAAAA,QAAQ,EAAET;AAAZ,GAAX,CAAxB;AACA,MAAI,CAACO,KAAL,EAAY,OAAO,IAAP;AACZ,SAAOL,WAAK,CAACD,CAAD,CAAL,GAAWA,CAAC,CAACS,aAAF,CAAgBJ,CAAhB,CAAX,GAAgCL,CAAC,GAAGK,CAA3C;AACD;;MCTYK,QAAQ,GAAGV,CAAC,IAAIA;;;;;;"}