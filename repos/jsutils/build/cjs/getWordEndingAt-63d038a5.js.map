{"version":3,"file":"getWordEndingAt-63d038a5.js","sources":["../../src/string/buildPath.js","../../src/string/mapString.js","../../src/string/delimitString.js","../../src/string/snakeCase.js","../../src/string/capitalize.js","../../src/string/removeDot.js","../../src/string/cleanStr.js","../../src/string/camelCase.js","../../src/string/camelCasePath.js","../../src/string/containsStr.js","../../src/string/eitherStr.js","../../src/string/hyphenator.js","../../src/string/hashString.js","../../src/string/parseJSON.js","../../src/string/plural.js","../../src/string/singular.js","../../src/string/styleCase.js","../../src/string/trainCase.js","../../src/string/wordCaps.js","../../src/string/spaceJoin.js","../../src/string/template.js","../../src/string/validFilename.js","../../src/string/reverseStr.js","../../src/string/getWordStartingAt.js","../../src/string/getWordEndingAt.js"],"sourcesContent":["/** @module String */\n\n/**\n * Builds a string path from passed in args ( i.e. path/to/thing ).\n * @function\n * @return {String} - built path from arguments\n */\nexport const buildPath = (...args) => {\n  const built = args.reduce((path, arg) => {\n    let str = toStr(arg)\n\n    return `${path}${(str && '/' + str) || ''}`\n  }, '')\n\n  return built.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\n}\n","/** @module String */\n\nimport { isFunc } from '../method/isFunc'\nimport { isStr } from './isStr'\n\n/**\n * Maps a string by applying function `charMapper` to each character.\n * @function\n * @param {String} str - String to be mapped\n * @param {Function} charMapper - Function of form (character) => <some character or string>\n * @returns {String} - String with each character mapped by charMap.<br/>If str is not a string or charMapper not a function, just returns the passed in str argument\n * @example\n *  mapString(\"hello\", c => c === 'h' ? 'x' : c) // returns 'xello'\n */\nexport const mapString = (str, charMapper) => {\n  if (!isStr(str)) return str\n  if (!isFunc(charMapper)) return str\n  let result = ''\n  for (const char of str) {\n    result += charMapper(char)\n  }\n  return result\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { mapString } from './mapString'\nimport { isLowerCase } from './isLowerCase'\nimport { isUpperCase } from './isUpperCase'\n\n/**\n * Converts a string into a delimted script based on the passed in arguments\n * @function\n * @param {String} str - string of any casing\n * @param {String} delimiter - How the string should be split e.g. '_'\n * @param {Array<string>} [delimiters] - An array of delimiter characters on which this function searches and breaks.<br/>Defaults to checking -, _, and space\n * @returns {String} - A new string with the specified delimiter delimiting each word\n *\n * @example\n * delimitString('fooBar', '_') === 'foo_Bar'\n */\nexport const delimitString = (str, delimiter, delimiters = [ '-', '_', ' ' ]) => {\n  if (!isStr(str)) return str\n  const isDelimiter = c => delimiters.some(del => del === c)\n  let prevChar = '_'\n  return mapString(str, char => {\n    if (isDelimiter(char)) {\n      prevChar = delimiter\n      return delimiter\n    }\n\n    if (isUpperCase(char) && isLowerCase(prevChar) && !isDelimiter(prevChar)) {\n      prevChar = char\n      return delimiter + char\n    }\n\n    prevChar = char\n    return char\n  })\n}\n","/** @module String */\n\nimport { delimitString } from './delimitString'\n\n/**\n * Converts a string to snake_case.\n * @function\n * @param {String} str - String to be converted\n * @example\n * snakeCase('fooBar') === 'foo_bar'\n * @returns {String} - The string in snake_case, or the input if it is not a string\n */\nexport const snakeCase = str => {\n  const underscored = delimitString(str, '_')\n  return underscored.toLowerCase()\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts first letter of a string to be capitalized.\n * @function\n * @param {String} string\n * @param {Boolean} [lowercaseTail=true] - if true, will also lowercase the all characters except the first\n * @return {String} - Passed in string, but capitalized\n */\nexport const capitalize = (str, lowercaseTail = true) => {\n  if (!isStr(str) || !str[0]) return str\n  const tail = lowercaseTail ? str.slice(1).toLowerCase() : str.slice(1)\n  return `${str[0].toUpperCase()}${tail}`\n}\n","/** @module String */\n\n/**\n * Removes a `.` from the start and end of a string.\n * @function\n * @param {String} str - string to convert\n * @return {String} - string without the `.`\n */\nexport const removeDot = string => {\n  const noDot = string.indexOf('.') === 0 ? string.slice(1) : string\n  return noDot.indexOf('.') === noDot.length - 1 ? noDot.slice(0, -1) : noDot\n}\n","/** @module String */\n\nimport { removeDot } from './removeDot'\n\n/**\n * Converts `-` and `_` to white space and calls remove removeDot, to remove a period.\n * @function\n * @param {String} string to be converted\n * @return {String} - cleaned string\n */\nexport const cleanStr = str => {\n  return (str && removeDot(str).replace(/[-_]/gm, ' ')) || str\n}\n","/** @module String */\n\nimport { capitalize } from './capitalize'\nimport { cleanStr } from './cleanStr'\n\n/**\n * Converts a string to camel case.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in camel case format\n */\nexport const camelCase = (str, compCase) => {\n  return (\n    (str &&\n      cleanStr(str)\n        .split(/[\\s_-]/gm)\n        .reduce((cased, word, index) => {\n          if (!word) return cased\n          cased +=\n            ((index > 0 || compCase) && capitalize(word)) || word.toLowerCase()\n          return cased\n        }, '')) ||\n    str\n  )\n}\n","/** @module String */\n\nimport { capitalize } from './capitalize'\n\n/**\n * Turns a path string into a camel-cased string, if there is more than one\n * step in the path. If there isn't, just returns path.\n * @function\n * @param {String} path\n * @return {String} camel-cased string\n * @example\n * camelCasePath('settings.agendaMap.Count') -> 'settingsAgendaMapCount'\n * camelCasePath('settings') -> 'settings'\n */\nexport const camelCasePath = path => {\n  const split = path.split('.')\n  const camelCasedSplit = split.map((str, idx) =>\n    idx > 0 ? capitalize(str, false) : str\n  )\n\n  return camelCasedSplit.length > 1 ? camelCasedSplit.join('') : path\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { toStr } from './toStr'\n\n/**\n * Checks if a string contains another string.\n * @function\n * @param {String} string - value to be checked\n * @param {String} substring - value to search for\n * @param {Number} [fromIndex] - Index of the string to search from\n * @return {Boolean} - if the substring exists string\n */\nexport const containsStr = (str, substring, fromIndex) => {\n  str = (!isStr(str) && toStr(str)) || str\n  substring = (!isStr(substring) && toStr(substring)) || substring\n\n  return str.indexOf(substring, fromIndex) !== -1\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Checks if the first param is a string, and returns it.\n * <br/>If it's not a string, the second param is returned\n * @function\n * @param {String} str1 - return if is string\n * @param {String} str2 - use if first is not a string\n * @returns {String}\n */\nexport const eitherStr = (str1, str2) => (isStr(str1) && str1) || str2\n","/** @module String */\n\nconst uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\n/**\n * Hyphenator cache, that stores already hyphenated text to be reused\n * @private\n * @Object\n */\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @private\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => '-' + match.toLowerCase()\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { isNonNegative } from '../number/isNonNegative'\n/**\n * Creates a hash from a passed in string consistently\n * <br/>Not intended to be secure\n * <br/>Value comes from being a pure function\n * <br/>Given the same input, it will always return the same output\n * <br/>There is no expectation to convert back from the hash to the original string\n * @function\n * @param {String} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {String} - Hashed version of the string\n */\nexport const hashString = (str, maxLength) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse()\n    .join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    // Convert to positive 32bit integer\n    hash = `${Math.abs(hash & hash)}`\n  }\n\n  return isNonNegative(maxLength) ? hash.slice(0, maxLength) : hash\n}\n","/** @module String */\n\n/**\n * Convert JSON string into object, wrapped in a try / catch.\n * @function\n * @param {String} string\n * @return {Object} - JSON object\n */\nexport const parseJSON = (str, logErr = true) => {\n  try {\n    return JSON.parse(str)\n  }\n  catch (e) {\n    logErr && console.error(e.message)\n    return null\n  }\n}\n","/** @module String */\n\n/**\n * Adds an `s` to the end of a string, if one does not exist.\n * @function\n * @param {String} str - string to convert\n * @return {String} string as a plural\n */\nexport const plural = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] !== 's' ? str + 's' : str\n}\n","/** @module String */\n\n/**\n * Remove an `s` at the end of a string, if the last char is an `s`,\n * @function\n * @param {String} str - string to convert\n * @return {String} string as singular\n */\nexport const singular = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] === 's' ? str.slice(0, str.length - 1) : str\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { camelCase } from './camelCase'\n\n/**\n * Converts a string to css in js format.\n * Useful for converting css rules into js format, I.E. margin-top => marginTop.\n * @function\n * @param {String} str - string to be converted\n * @return {String} - string in style case format\n */\nexport const styleCase = str => {\n  if (!isStr(str)) return str\n\n  const cased = camelCase(str)\n  return `${cased[0].toLowerCase()}${cased.slice(1)}`\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Converts a string to train case, I.E. marginTop => margin-top.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in train case format\n */\nexport const trainCase = str =>\n  (isStr(str) &&\n    str\n      .split(/(?=[A-Z])|[\\s_-]/gm)\n      .join('-')\n      .toLowerCase()) ||\n  str\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { cleanStr } from './cleanStr'\nimport { capitalize } from './capitalize'\n\n/**\n * Converts all words in a string to be capitalized.\n * @function\n * @param {String} string to be converted\n * @return {String} - string with all words capitalized\n */\nexport const wordCaps = str => {\n  if (!isStr(str)) return str\n  let cleaned = cleanStr(str)\n  return cleaned\n    .split(' ')\n    .map(word => (word && capitalize(word)) || '')\n    .join(' ')\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Joins strings and array of string together with spaces\n * @function\n * @param {String} original - The default string that other strings get added to\n * @param {string|Array} toAdd - String of Array of Strings to add to the original\n *\n * @returns {String} Joined strings seperated by space\n */\nexport const spaceJoin = (original, toAdd) => {\n  toAdd = isArr(toAdd) ? toAdd : [toAdd]\n  return toAdd.reduce(\n    (joined, item) => {\n      return isStr(item)\n        ? `${joined ? joined + ' ' : ''}${item}`.trim()\n        : joined\n    },\n    isStr(original) ? original : ''\n  )\n}\n","/** @module String */\n\nimport { isFunc } from '../method/isFunc'\nimport { isColl } from '../collection/isColl'\nimport { get } from '../collection/get'\nimport { isStr } from './isStr'\n\n/**\n * Helper to wrap the template method, and allow passing a custom regex argument\n * Custom regex is used instead the default regex of the template method\n * @function\n * @example\n * template('${{ who }} in ${{ where }}!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n * @param {Object} [RegEx?] - Regular Express to replace the default\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const templateRx = (tempStr, data, fallback = '', rx) => {\n  const orgRx = template.regex\n  template.regex = rx || /{{([^}]*)}}/g\n  const resp = template(tempStr, data, fallback)\n  template.regex = orgRx\n\n  return resp\n}\n\n/**\n * Simple template replace for ES6 template strings\n * @function\n * @example\n * template('${ who } in ${ where }!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const template = (tempStr, data, fallback = '') => {\n  data = (isColl(data) && data) || {}\n  const regex = template.regex || /\\${(.*?)\\}/g\n\n  return isStr(tempStr)\n    ? tempStr.replace(regex, (match, exact) => {\n      const path = (exact || match.substr(2, match.length - 3)).trim()\n      const replaceWith = get(data, path, fallback)\n      return isFunc(replaceWith)\n        ? replaceWith(data, path, fallback)\n        : replaceWith\n    })\n    : console.error(`template requires a string as the first argument`) ||\n        tempStr\n}\n","/** @module String */\n\n/**\n * Checks whether a given string is a valid filename\n * @function\n * @param {String} fileName - The file name to check if valid\n *\n * @returns {Boolean}\n */\nexport const validFilename = fileName => {\n  if (!fileName) return false\n  // On Unix-like systems '/' is reserved\n  // and <>:\"/\\|?* as well as non-printable characters \\u0000-\\u001F on Windows\n  const regex = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g\n\n  // invalid Windows filenames\n  const windowsRegex = /^(con|prn|aux|nul|com\\d|lpt\\d)$/i\n\n  // starts with period\n  const periodRegex = /^\\.\\.?$/\n\n  return regex.test(fileName) ||\n    windowsRegex.test(fileName) ||\n    periodRegex.test(fileName)\n    ? false\n    : true\n}\n","/** @module String */\n\nimport { isStr } from './isStr'\n\n/**\n * Reverses string\n * @function\n * @param {String} str - string to reverse\n * @return {String} reversed str\n * @example\n * reverseStr('foo') // 'oof'\n */\nexport const reverseStr = str => {\n  if (!isStr(str)) return undefined\n  let reversed = ''\n  for (let char of str) {\n    reversed = char + reversed\n  }\n  return reversed\n}\n","/** @module String */\n\n/**\n * Helper for `getWordStartingAt` that finds the\n * index of the exclusive end of the word, given the available\n * ending delimiters\n * @function\n * @param {String} text\n * @param {Number} index\n * @param {Array<string>} delimiters\n */\nexport const getNearestDelimiterIndex = (text, index, delimiters = [' ']) => {\n  const indices = delimiters.map(str => text.indexOf(str, index)).sort()\n  return indices.find(idx => idx >= 0)\n}\n\n/**\n * Gets the word in text starting at index\n * @function\n * @param {String} text\n * @param {Number} index - the inclusive starting index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordStartingAt(text, 4)\n * word === 'bar'\n */\nexport const getWordStartingAt = (text, index, delimiters = [' ']) => {\n  const endingSpaceIdx = getNearestDelimiterIndex(text, index, delimiters)\n  return text.substring(\n    index,\n    endingSpaceIdx === -1 ? text.length : endingSpaceIdx\n  )\n}\n","/** @module String */\n\nimport { reverseStr } from './reverseStr'\nimport { getWordStartingAt } from './getWordStartingAt'\n\n/**\n * Gets the word in text ending at index (exclusive)\n * @function\n * @param {String} text\n * @param {Number} index - the exclusive ending index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit the start of words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordEndingAt(text, 3)\n * word === 'foo'\n */\nexport const getWordEndingAt = (text, index, delimiters = [' ']) => {\n  const reversed = reverseStr(text)\n  const reversedIndex = text.length - index\n  return reverseStr(getWordStartingAt(reversed, reversedIndex, delimiters))\n}\n"],"names":["buildPath","args","built","reduce","path","arg","str","toStr","replace","mapString","charMapper","isStr","isFunc","result","char","delimitString","delimiter","delimiters","isDelimiter","c","some","del","prevChar","isUpperCase","isLowerCase","snakeCase","underscored","toLowerCase","capitalize","lowercaseTail","tail","slice","toUpperCase","removeDot","string","noDot","indexOf","length","cleanStr","camelCase","compCase","split","cased","word","index","camelCasePath","camelCasedSplit","map","idx","join","containsStr","substring","fromIndex","eitherStr","str1","str2","uppercasePattern","msPattern","hyphenCache","toHyphenLower","match","hyphenator","rule","hasOwnProperty","hRule","test","hashString","maxLength","reverse","hash","i","charCodeAt","Math","abs","isNonNegative","parseJSON","logErr","JSON","parse","e","console","error","message","plural","singular","styleCase","trainCase","wordCaps","cleaned","spaceJoin","original","toAdd","isArr","joined","item","trim","templateRx","tempStr","data","fallback","rx","orgRx","template","regex","resp","isColl","exact","substr","replaceWith","get","validFilename","fileName","windowsRegex","periodRegex","reverseStr","undefined","reversed","getNearestDelimiterIndex","text","indices","sort","find","getWordStartingAt","endingSpaceIdx","getWordEndingAt","reversedIndex"],"mappings":"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"}