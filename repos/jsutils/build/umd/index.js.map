{"version":3,"file":"index.js","sources":["../../src/validation/validate.js","../../src/array/isArr.js","../../src/array/areFrequencyEqual.js","../../src/object/isObj.js","../../src/array/ensureArr.js","../../src/method/isFunc.js","../../src/object/deepFreeze.js","../../src/ext/noOps.js","../../src/ext/exists.js","../../src/array/flatArr.js","../../src/method/applyToFunc.js","../../src/method/pipeline.js","../../src/string/isStr.js","../../src/string/mapString.js","../../src/string/isLowerCase.js","../../src/string/isUpperCase.js","../../src/string/delimitString.js","../../src/string/capitalize.js","../../src/string/removeDot.js","../../src/string/cleanStr.js","../../src/string/camelCase.js","../../src/string/toStr.js","../../src/string/hyphenator.js","../../src/number/equalsNaN.js","../../src/number/isNum.js","../../src/number/isNonNegative.js","../../src/string/sanitize.js","../../src/collection/isColl.js","../../src/collection/updateColl.js","../../src/collection/get.js","../../src/string/template.js","../../src/string/isQuoted.js","../../src/string/reverseStr.js","../../src/string/getWordStartingAt.js","../../src/boolean/isBool.js","../../src/boolean/isStrBool.js","../../src/boolean/convertToStrBool.js","../../src/boolean/softFalsy.js","../../src/boolean/toBool.js","../../src/number/getNums.js","../../src/number/toNum.js","../../src/method/isOrderable.js","../../src/method/compareTo.js","../../src/method/identity.js","../../src/object/hasOwn.js","../../src/method/cloneFunc.js","../../src/collection/deepClone.js","../../src/method/uuid.js","../../src/ext/typeOf.js","../../src/method/match.js","../../src/ext/isEmpty.js","../../src/array/findExtrema.js","../../src/array/uniqArr.js","../../src/collection/cleanColl.js","../../src/collection/set.js","../../src/collection/deepEqual.js","../../src/ext/strToType.js","../../src/log/log.js","../../src/object/clearObj.js","../../src/object/deepMerge.js","../../src/object/isEntry.js","../../src/object/mapEntries.js","../../src/object/reduceObj.js","../../src/promise/promisify.js","../../src/promise/promisifyAll.js","../../src/regex/isRegex.js","../../src/regex/getRegexSource.js","../../src/url/queryToObj.js","../../src/object/applyToCloneOf.js","../../src/array/areSetEqual.js","../../src/string/buildPath.js","../../src/string/camelCasePath.js","../../src/method/checkCall.js","../../src/array/cloneArr.js","../../src/object/cloneJson.js","../../src/method/complement.js","../../src/string/containsStr.js","../../src/method/debounce.js","../../src/method/doIt.js","../../src/ext/either.js","../../src/array/eitherArr.js","../../src/method/eitherFunc.js","../../src/object/eitherObj.js","../../src/string/eitherStr.js","../../src/object/everyEntry.js","../../src/object/filterObj.js","../../src/array/findMax.js","../../src/array/findMin.js","../../src/array/flatMap.js","../../src/array/flatUnion.js","../../src/url/getURLParam.js","../../src/string/getWordEndingAt.js","../../src/method/hasDomAccess.js","../../src/string/hashString.js","../../src/object/isArrMap.js","../../src/string/isEmail.js","../../src/collection/isEmptyColl.js","../../src/number/isFloat.js","../../src/number/isInt.js","../../src/number/isNegative.js","../../src/string/isPhone.js","../../src/number/isPositive.js","../../src/ext/isSame.js","../../src/string/isUrl.js","../../src/string/isUuid.js","../../src/ext/isValidDate.js","../../src/url/isValidUrl.js","../../src/regex/joinRegex.js","../../src/object/jsonEqual.js","../../src/object/keyMap.js","../../src/method/limbo.js","../../src/collection/mapColl.js","../../src/collection/mapFind.js","../../src/object/mapKeys.js","../../src/object/mapObj.js","../../src/method/memorize.js","../../src/number/mod.js","../../src/method/noOp.js","../../src/number/nth.js","../../src/url/objToQuery.js","../../src/object/omitKeys.js","../../src/array/omitRange.js","../../src/method/parseErrorMessage.js","../../src/string/parseJSON.js","../../src/object/pickKeys.js","../../src/string/plural.js","../../src/array/randomArr.js","../../src/array/randomizeArr.js","../../src/collection/reduceColl.js","../../src/collection/repeat.js","../../src/method/runSeq.js","../../src/object/sanitizeCopy.js","../../src/collection/shallowEqual.js","../../src/string/singular.js","../../src/string/snakeCase.js","../../src/object/someEntry.js","../../src/string/spaceJoin.js","../../src/object/splitByKeys.js","../../src/string/styleCase.js","../../src/method/throttle.js","../../src/method/throttleLast.js","../../src/method/timedRun.js","../../src/number/toFloat.js","../../src/number/toInt.js","../../src/object/toObj.js","../../src/string/trainCase.js","../../src/object/trimStringFields.js","../../src/collection/unset.js","../../src/string/validFilename.js","../../src/promise/wait.js","../../src/string/wordCaps.js"],"sourcesContent":["/**\n * @type {Object}\n */\nconst OPTIONS = {\n  SHOULD_LOG: true,\n  SHOULD_THROW: false,\n  LOG_PREFIX: null,\n}\n\n// if no default or custom validator set for an arg, just assert it is valid\nconst defaultValidator = () => true\n\n/**\n *  Validates each key-value entry in argObj using the validator functions in validators with matching keys.\n *  <br/>For any failures, validate will console.error the reason.\n *  @param {Object} argObj - object, where keys are the name of the argument to validate, and value is its value\n *  @param {Object} validators - object, where keys match the argument and values are predicate functions (return true/false and are passed the arg with the same key).\n *     - Use the `$default` key to define a default validator, which will validate any argument that doesn't have a custom validator defined.\n *  @param {Object} options - contains `logs`, `throws`, and `prefix` props. When a validation fails, it will throw an error if `throws` is true. Else it logs error if `logs` is true. `prefix` prepends a string to the error messages.\n *  @returns {Array} - An entry with two values [ success, results ].<br/>\n *     - success: { Boolean } that is true if all arguments passed their validators, false otherwise<br/>\n *     - results: {Object} that holds the validation results for each argument, keyed by the same keys as in argObj. For each\n *                result object, the properties are: { success, key, value, validator, reason }.\n *  @function\n *  @example\n *    const elements = {}\n *    const name = 'michael'\n *    const address = '12345 E. Street'\n *    const [ isValid, results ] = validate(\n *      { elements, name, address },\n *      { elements: isArr, $default: isStr }\n *    )\n *    console.log(isValid) // false\n *    console.log(results.elements.success) // false\n */\nexport const validate = (argObj, validators = {}, options = {}) => {\n  const {\n    logs = OPTIONS.SHOULD_LOG,\n    throws = OPTIONS.SHOULD_THROW,\n    prefix = OPTIONS.LOG_PREFIX,\n  } = options\n\n  const validationCaseEntries = Object.entries(argObj)\n\n  // validate each argument\n  const validationResults = validationCaseEntries.map(([ argName, argValue ]) =>\n    validateArgument(\n      argName,\n      argValue,\n      validators[argName] || validators.$default || defaultValidator\n    )\n  )\n\n  // reduce the argument validation results into a single object of form { success, cases }.\n  // success is true if all arguments passed their validators. Cases holds each argument's validation results.\n  const reduceCases = (total, next) =>\n    validationReducer(total, next, { logs, throws, prefix })\n  const { success, cases } = validationResults.reduce(reduceCases, {\n    success: true,\n    cases: {},\n  })\n\n  return [ success, cases ]\n}\n\n/**\n * If you need to configure validation properties globally, you can do so here. These are overridden by the validate options arguments,\n * if one is defined in validate().\n * @function\n * @param {Object} options\n * @param {Boolean} options.logs - indicates you want validate() to log errors when a case fails\n * @param {Boolean} options.throws - indicates validate() should throw an error when a case fails\n * @param {String} options.prefix - a prefix to any console error logs or to messages of errors thrown\n */\nvalidate.setOptions = ({ logs, throws, prefix }) => {\n  if (logs !== undefined) {\n    OPTIONS.SHOULD_LOG = logs\n  }\n  if (throws !== undefined) {\n    OPTIONS.SHOULD_THROW = throws\n  }\n  if (prefix !== undefined) {\n    OPTIONS.LOG_PREFIX = prefix\n  }\n}\n\n/**\n * Resets the global validation options to their defaults\n * @function\n */\nvalidate.resetOptions = () => {\n  OPTIONS.SHOULD_LOG = true\n  OPTIONS.SHOULD_THROW = false\n  OPTIONS.LOG_PREFIX = null\n}\n\n/**\n * Helper for `validate`. Validates a single value given a validator\n * @param {*} key\n * @param {*} value\n * @param {Function} validator\n * @returns {Object} of form { success, reason }\n * @ignore\n */\nconst validateArgument = (key, value, validator) => {\n  const success = validator(value)\n\n  // if validator is a named function, use its name. If it is an inline anonymous arrow function, its name\n  // matches the argument key and it has no useful/descriptive name, so just stringify it\n  const shouldStringifyValidator =\n    !validator.name || validator.name === key || validator.name === '$default'\n  const validatorString = shouldStringifyValidator\n    ? validator.toString()\n    : validator.name\n\n  const reason = success\n    ? null\n    : [\n        `Argument \"${key}\" with value `,\n        value,\n        ` failed validator: ${validatorString}.`,\n      ]\n\n  return { success, key, value, validator, reason }\n}\n\n/**\n * Helper for `validate`. Reduces validations into a single object of form { success, cases }\n * @param {*} finalResult\n * @param {*} nextValidation\n * @ignore\n */\nconst validationReducer = (\n  finalResult,\n  nextValidation,\n  { logs, throws, prefix }\n) => {\n  // handle the failure\n  !nextValidation.success && handleFailure(nextValidation, logs, throws, prefix)\n\n  return {\n    success: finalResult.success && nextValidation.success,\n    cases: {\n      ...finalResult.cases,\n      [nextValidation.key]: nextValidation,\n    },\n  }\n}\n\n/**\n * Handles a validation failure given validation options\n * @param {Object} validation\n * @param {Boolean} shouldLog\n * @param {Boolean} shouldThrow\n * @param {String} prefix - optional prefix to any error or console log\n * @ignore\n */\nconst handleFailure = (validation, shouldLog, shouldThrow, prefix) => {\n  // prepend the prefix if one is defined\n  const reason = prefix ? [ prefix, ...validation.reason ] : validation.reason\n\n  if (shouldThrow) throw new Error(reason.join())\n\n  if (shouldLog) console.error(...reason)\n}\n","/**\n * Checks if passed in value is an array.\n * @function\n * @example\n * isArr([1,2,3])\n * // Returns true\n * @param {any} value - value to be check if is an array\n * @return {Boolean} - T/F value is an array\n */\nexport const isArr = value => Array.isArray(value)\n","import { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Builds a map of elements mapped to their frequency counts\n * @function\n * @param {Array<*>} arr\n * @return {Map<*, number>}\n */\nexport const buildElementCountMap = arr => {\n  const counts = new Map()\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i]\n    const count = counts.get(element) ?? 0\n    counts.set(element, count + 1)\n  }\n  return counts\n}\n\n/**\n * Returns true if the maps\n * @function\n * @param {Map<*, number>} mapA\n * @param {Map<*, number>} mapB\n * @returns {Boolean} - True if the item count it equal between mapA and mapB\n */\nexport const areCountMapsEqual = (mapA, mapB) => {\n  if (mapA.size !== mapB.size) return false\n\n  for (let [ key, count ] of mapA) {\n    const otherCount = mapB.get(key)\n    if (otherCount !== count) return false\n  }\n\n  return true\n}\n\n/**\n * Checks if arrays are frequency equal. Does this\n * by making only one pass over each array and using an auxillary map.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n * @returns {Boolean} - True if otherArr contains exactly the same elements as arr, where order does not matter, but frequency does\n */\nexport const areFrequencyEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n  if (arr.length !== otherArr.length) return false\n\n  const arrCounts = buildElementCountMap(arr)\n  const otherCounts = buildElementCountMap(otherArr)\n\n  return areCountMapsEqual(arrCounts, otherCounts)\n}\n","/**\n * Checks if data is an object and not an array.\n * @function\n * @param {Object} obj - data to check\n * @returns {Boolean}\n */\nexport const isObj = obj =>\n  typeof obj === 'object' && !Array.isArray(obj) && obj !== null\n","import { isArr } from './isArr'\n\n/**\n * Ensures the passed in value is an array, else it returns it in an array\n * @function\n * @param {Array|*} val - Value to check if its an array\n *\n * @example\n * const foo = eitherArr('hi') // returns ['hi']\n * const bar = eitherArr([ 2 ]) // returns [ 2 ]\n *\n * @returns {Array} val if it's an array, or val in an array\n */\nexport const ensureArr = val => (isArr(val) ? val : [val])\n","/**\n * Check if the passed in item is a function.\n * @example\n * isFunc(() => {})\n * // Returns true\n * @example\n * isFunc('bar')\n * // Returns false\n * @function\n * @param {*} test\n * @return {Boolean} is a function\n */\nexport const isFunc = func => typeof func === 'function'\n","import { isFunc } from '../method/isFunc'\n\n/**\n * Recursively freezes and object.\n * @function\n * @param {Object} obj\n * @return {Object} - frozen Object\n */\nexport const deepFreeze = obj => {\n  Object.freeze(obj)\n  Object.getOwnPropertyNames(obj).map(prop => {\n    obj.hasOwnProperty(prop) &&\n      obj[prop] !== null &&\n      (typeof obj[prop] === 'object' || isFunc(obj[prop])) &&\n      !Object.isFrozen(obj[prop]) &&\n      deepFreeze(obj[prop])\n  })\n\n  return obj\n}\n","import { deepFreeze } from '../object/deepFreeze'\n\n/**\n * Reuseable empty, frozen object\n * @object\n * @type {Object}\n */\nexport const noOpObj = Object.freeze({})\n\n/**\n * Reusable frozen object that contains a `content` object. Useful\n * @object\n * for themes that rely on the content key.\n * @type {Object}\n */\nexport const noPropObj = deepFreeze({ content: {} })\n\n/**\n * Reusable, empty frozen array\n * @array\n * @type {Array}\n */\nexport const noPropArr = deepFreeze([])\n\n/**\n * Reusable, empty frozen array.\n * Renamed for consistency\n * @array\n * @type {Array}\n */\nexport const noOpArr = noPropArr\n","/**\n * Checks if a value exists. NOT undefined || null\n * @function\n * @example\n * exists(0)\n * // Returns true\n * @example\n * exists(null)\n * // Returns false\n * exists('')\n * // Returns true\n * exists(NaN)\n * // Returns false\n * @param {*} value - Item to check if exists\n *\n * @returns {Boolean} - If the item exists or not\n */\nexport const exists = value =>\n  value === value && value !== undefined && value !== null\n","import { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\nimport { noOpObj } from '../ext/noOps'\nimport { exists } from '../ext/exists'\n\n/**\n * Helper method to flatten and mutate the passed in array based on options\n * @function\n * @private\n * @param {Array|*} arr - Array to be flattened\n * @param {Array} result - Flattened array values\n * @param {Array} opts - Options to modify how the array is flattened\n *\n * @return {Array} - Mutated arr or result, but flattened based on options\n */\nconst flatten = (arr, result, opts) => {\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i]\n\n    isArr(value)\n      ? flatten(value, result, opts)\n      : (opts.exists && !exists(value)) || (opts.truthy && !value)\n          ? result\n          : result.push(value)\n  }\n\n  if (!opts.mutate) return result\n\n  Object.assign(arr, result).splice(result.length)\n\n  return arr\n}\n\n/**\n * Flattens an array to a single level\n * @function\n * @param {Array|*} arr - Array to be flattened\n * @param {Object} [opts={}] - Options to modify how the array is flattened\n * @param {Boolean} [opts.truthy] - Only include truthy values when flattening\n * @param {Boolean} [opts.exists] - Only include values that exist when flattening\n * @param {Boolean} [opts.mutate] - Mutates the original array\n *\n * @example\n * const arr = flatArr([[ 'flat', '' ], [ 'array' ]]) // returns ['flat', '', 'array']\n * const arrTruthy = flatArr([ 0, 2, [ false ] ], { truthy: true }) // returns [ 2 ]\n * const arrExist = flatArr([ 0, 2, [ false ] ], { exists: true }) // returns [ 0, 2, false ]\n * const mutateArr = [ [1], [2] ]\n * flatArr(mutateArr, { mutate: true }) === mutateArr\n * // Evaluates to true, but mutateArr value is [ 1, 2 ]\n *\n * @return {Array} - Mutated original array now flattened, or a new flattened array based on options\n */\nexport const flatArr = (arr, opts) =>\n  flatten(arr, [], isObj(opts) ? opts : noOpObj)\n","import { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\n\n/**\n * Helper for pipeline. Passes 'item' into 'expression' as its first argument.\n * <br/>Expression may be a function or an array of form: [function, ...remainingArguments].\n * @function\n * @param {*} item\n * @param {*} expression\n */\nexport const applyToFunc = (item, expression) => {\n  if (isArr(expression)) {\n    const [ func, ...args ] = expression\n    return func(item, ...args)\n  }\n  else if (isFunc(expression)) {\n    return expression(item)\n  }\n  else {\n    console.error(\n      `Pipeline expected either a function or an array (for function expressions). Found ${typeof expression}`\n    )\n    return item\n  }\n}\n","import { applyToFunc } from './applyToFunc'\n\n/**\n * Function for making repeated nested function calls (the 'pipeline') succinct. Passes \"item\" into\n * <br/>the first function (as its first argument), takes its result and passes that into the next function, and repeats.\n * <br/>Continues until no functions remain, at which point it returns the value returned by the last function.\n * <br/> - you can also pass in an array in place of a function to specify a function to be called with some arguments. E.g.: [foo, 2, 3] would return foo(item, 2, 3)\n * @example: pipeline(1, addFour, subtract3, (x) => x * x) // would return 4\n * @function\n * @param {*} item - the starting input. If it is a function, it will be executed immediately and the result will be piped into the remaining functions.\n * @param {...Function} functions - Functions to be iterated over one after the other\n * @returns {*} - the final result of calling the pipeline of functions , starting with item as input\n */\nexport const pipeline = (item, ...functions) => {\n  return functions.reduce((result, fn) => applyToFunc(result, fn), item)\n}\n","/**\n * Check if passed in value is a string.\n * @function\n * @param {*} str - param to check if type is a string\n * @return {Boolean} - True if it's a string\n */\nexport const isStr = str => typeof str === 'string'\n","import { isFunc } from '../method/isFunc'\nimport { isStr } from './isStr'\n\n/**\n * Maps a string by applying function `charMapper` to each character.\n * @function\n * @param {String} str - String to be mapped\n * @param {Function} charMapper - Function of form (character) => <some character or string>\n * @returns {String} - String with each character mapped by charMap.<br/>If str is not a string or charMapper not a function, just returns the passed in str argument\n * @example\n *  mapString(\"hello\", c => c === 'h' ? 'x' : c) // returns 'xello'\n */\nexport const mapString = (str, charMapper) => {\n  if (!isStr(str)) return str\n  if (!isFunc(charMapper)) return str\n  let result = ''\n  for (const char of str) {\n    result += charMapper(char)\n  }\n  return result\n}\n","/**\n * Checks if a string is all lowercase letters\n * @function\n * @param {String} str - String to check if it's lowercase\n * @returns {Boolean} - True if str is lowercase\n */\nexport const isLowerCase = str => str === str.toLowerCase()\n","/**\n * Checks if a string is all capital letters\n * @function\n * @param {String} str - String to check if it's uppercase\n * @returns {Boolean} - True if str is uppercase\n */\nexport const isUpperCase = str => str === str.toUpperCase()\n","import { isStr } from './isStr'\nimport { mapString } from './mapString'\nimport { isLowerCase } from './isLowerCase'\nimport { isUpperCase } from './isUpperCase'\n\n/**\n * Converts a string into a delimted script based on the passed in arguments\n * @function\n * @param {String} str - string of any casing\n * @param {String} delimiter - How the string should be split e.g. '_'\n * @param {Array<string>} [delimiters] - An array of delimiter characters on which this function searches and breaks.<br/>Defaults to checking -, _, and space\n * @returns {String} - A new string with the specified delimiter delimiting each word\n *\n * @example\n * delimitString('fooBar', '_') === 'foo_Bar'\n */\nexport const delimitString = (str, delimiter, delimiters = [ '-', '_', ' ' ]) => {\n  if (!isStr(str)) return str\n  const isDelimiter = c => delimiters.some(del => del === c)\n  let prevChar = '_'\n  return mapString(str, char => {\n    if (isDelimiter(char)) {\n      prevChar = delimiter\n      return delimiter\n    }\n\n    if (isUpperCase(char) && isLowerCase(prevChar) && !isDelimiter(prevChar)) {\n      prevChar = char\n      return delimiter + char\n    }\n\n    prevChar = char\n    return char\n  })\n}\n","import { isStr } from './isStr'\n\n/**\n * Converts first letter of a string to be capitalized.\n * @function\n * @param {String} string\n * @param {Boolean} [lowercaseTail=true] - if true, will also lowercase the all characters except the first\n * @return {String} - Passed in string, but capitalized\n */\nexport const capitalize = (str, lowercaseTail = true) => {\n  if (!isStr(str) || !str[0]) return str\n  const tail = lowercaseTail ? str.slice(1).toLowerCase() : str.slice(1)\n  return `${str[0].toUpperCase()}${tail}`\n}\n","/**\n * Removes a `.` from the start and end of a string.\n * @function\n * @param {String} str - string to convert\n * @return {String} - string without the `.`\n */\nexport const removeDot = string => {\n  const noDot = string.indexOf('.') === 0 ? string.slice(1) : string\n  return noDot.indexOf('.') === noDot.length - 1 ? noDot.slice(0, -1) : noDot\n}\n","import { removeDot } from './removeDot'\n\n/**\n * Converts `-` and `_` to white space and calls remove removeDot, to remove a period.\n * @function\n * @param {String} string to be converted\n * @return {String} - cleaned string\n */\nexport const cleanStr = str => {\n  return (str && removeDot(str).replace(/[-_]/gm, ' ')) || str\n}\n","import { capitalize } from './capitalize'\nimport { cleanStr } from './cleanStr'\n\n/**\n * Converts a string to camel case.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in camel case format\n */\nexport const camelCase = (str, compCase) => {\n  return (\n    (str &&\n      cleanStr(str)\n        .split(/[\\s_-]/gm)\n        .reduce((cased, word, index) => {\n          if (!word) return cased\n          cased +=\n            ((index > 0 || compCase) && capitalize(word)) || word.toLowerCase()\n          return cased\n        }, '')) ||\n    str\n  )\n}\n","import { isStr } from './isStr'\n\n/**\n * Converts a passed in value to a string.\n * @function\n * @param {*} val - value to be converted\n * @return {String} - value converted into a string\n */\nexport const toStr = val =>\n  val === null || val === undefined\n    ? ''\n    : isStr(val)\n      ? val\n      : JSON.stringify(val)\n","const uppercasePattern = /[A-Z]/g\nconst msPattern = /^ms-/\n\n/**\n * Hyphenator cache, that stores already hyphenated text to be reused\n * @private\n * @Object\n */\nconst hyphenCache = {}\n\n/**\n * Converts a matching style rule to lowercase with hyphen\n * External hyphenator helpers, created outside the method to improve performance\n * @function\n * @private\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Lowercase style rule with hyphen at the start\n */\nconst toHyphenLower = match => '-' + match.toLowerCase()\n\n/**\n * Converts a camelCase style rule into a hyphenated style rule\n * <br/>Caches the response to make future conversions faster\n * @function\n * @param {String} str - camelCase style rule rule\n *\n * @returns {String} - Hyphenated style rule\n */\nexport const hyphenator = rule => {\n  if (hyphenCache.hasOwnProperty(rule)) return hyphenCache[rule]\n\n  const hRule = rule.replace(uppercasePattern, toHyphenLower)\n  return (hyphenCache[rule] = msPattern.test(hRule) ? '-' + hRule : hRule)\n}\n","/**\n * Checks if a value is NaN.\n * @example\n * equalsNaN(NaN)\n * // Returns true\n * @example\n * equalsNaN(1)\n * // Returns false\n * @example\n * equalsNaN('')\n * // Returns false\n * @function\n * @param {Number} val - value to check if is NaN\n * @return {Boolean} T/F - if value is a number\n */\nexport const equalsNaN = val => typeof val === 'number' && val != val\n","import { equalsNaN } from './equalsNaN'\n\n/**\n * Checks is value is a number.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt(NaN)\n * // Returns false\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {*} val - value to check if is a number\n * @return {Boolean} T/F - if value is a number\n */\nexport const isNum = val => typeof val === 'number' && !equalsNaN(val)\n","import { isNum } from './isNum'\n\n/**\n * Checks if val is a non-negative number\n * @param {*} val - To be checked it it's a non-negative number\n * @example\n *  isNonNegative(0) // true\n *  isNonNegative(1) // true\n *  isNonNegative(-1) // false\n * @function\n * @returns {Boolean} - True if val is non negative number\n */\nexport const isNonNegative = val => isNum(val) && val >= 0\n","import { isStr } from './isStr'\n\n/**\n * Sanitize a string of HTML content.\n * @function\n * @param {String} string\n * @return {String} - cleaned string\n */\nexport const sanitize = str =>\n  (isStr(str) &&\n    str.replace(/&/g, '&amp;').replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')) ||\n  str\n","/**\n * Checks if the value is a collection ( object || array ).\n * @example\n * isColl([1,2,3])\n * // Returns true\n * @example\n * isColl({ foo: 'bar' })\n * // Returns true\n * @example\n * isColl(null)\n * // Returns false\n * @function\n * @param {*} val - Value to check\n * @return {Boolean} True if the value is a collection (Object || Array)\n */\nexport const isColl = val => typeof val === 'object' && val !== null\n","import { isFunc } from '../method/isFunc'\nimport { isArr } from '../array/isArr'\nimport { isColl } from './isColl'\n\n/**\n * Updates a collection by removing, getting, adding to it.\n * @private\n * @function\n * @param {Object} obj - Object to update\n * @param {String|Array} path - Dot notation or Array path to the property to be updated\n * @param {String} type - Type of update to make to the obj argument\n * @param {*} val - Value to set or return based on the type argument\n * @returns {*} - Relative to the type argument\n */\nexport const updateColl = (obj, path, type, val) => {\n  const org = obj\n  if (!isColl(obj) || !obj || !path) return (type !== 'set' && val) || undefined\n\n  // cloneDeep so we don't modify the reference\n  const parts = isArr(path) ? Array.from(path) : path.split('.')\n  const key = parts.pop()\n  let prop\n  let breakPath\n\n  while ((prop = parts.shift())) {\n    const next = obj[prop]\n\n    isColl(next) || isFunc(next)\n      ? (obj = next)\n      : (() => {\n          if (type === 'set') obj[prop] = {}\n          else breakPath = true\n          obj = obj[prop]\n        })()\n\n    if (breakPath) return val\n  }\n\n  return type === 'get'\n    ? // Get return the value\n    key in obj\n      ? obj[key]\n      : val\n    : type === 'unset'\n      ? // Unset, return if the key was removed\n      delete obj[key]\n      : // Set, updated object\n        ((obj[key] = val) && org) || org\n}\n","import { updateColl } from './updateColl'\n\n/**\n * Searches an object based on the path param\n * <br/>I.E. path = 'data.foo.bar' => will return obj.data.foo.bar.\n * <br/>If bar does not exist, then will return obj.data.foo\n * @example\n * get(obj, 'data.foo.bar')\n * // Returns the value of bar\n * @example\n * get(obj, ['data', 'foo', 'bar'])\n * // Returns the value of bar\n * @function\n * @param {Object} obj - Will search the object based on the path\n * @param {String|Array<string>} path - Dot notation string or Array of string keys of the object\n * @param {*} [fallback] - Separated string to search the object\n * @return {*} - The final value found from the path\n */\nexport const get = (obj, path, fallback) =>\n  updateColl(obj, path, 'get', fallback)\n","import { isFunc } from '../method/isFunc'\nimport { isColl } from '../collection/isColl'\nimport { get } from '../collection/get'\nimport { isStr } from './isStr'\n\n/**\n * Helper to wrap the template method, and allow passing a custom regex argument\n * Custom regex is used instead the default regex of the template method\n * @function\n * @example\n * template('${{ who }} in ${{ where }}!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n * @param {Object} [RegEx?] - Regular Express to replace the default\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const templateRx = (tempStr, data, fallback = '', rx) => {\n  const orgRx = template.regex\n  template.regex = rx || /{{([^}]*)}}/g\n  const resp = template(tempStr, data, fallback)\n  template.regex = orgRx\n\n  return resp\n}\n\n/**\n * Simple template replace for ES6 template strings\n * @function\n * @example\n * template('${ who } in ${ where }!', { who: 'goats', where: 'boats' })\n * // Returns \"goats in boats\"\n * @param {String} template - String with ES6 syntax items to be replaced\n * @param {Object|Array} data - Data used to replace the ES6 placeholders\n * @param {any} fallback - Used it data does not contain key to be replaced\n *\n * @returns {String} - template with placeholder values filled\n */\nexport const template = (tempStr, data, fallback = '') => {\n  data = (isColl(data) && data) || {}\n  const regex = template.regex || /\\${(.*?)\\}/g\n\n  return isStr(tempStr)\n    ? tempStr.replace(regex, (match, exact) => {\n      const path = (exact || match.substr(2, match.length - 3)).trim()\n      const replaceWith = get(data, path, fallback)\n      return isFunc(replaceWith)\n        ? replaceWith(data, path, fallback)\n        : replaceWith\n    })\n    : console.error(`template requires a string as the first argument`) ||\n        tempStr\n}\n","import { isStr } from './isStr'\n\nconst quoteSymbols = [ '\"', \"'\" ]\n\n/**\n * Checks if the string contains quoted text\n * @function\n * @param {String} str - string to check\n * @param {Array<string>?} [quotes] - optional array of valid quote strings to check with. Defaults to single and double quote characters.\n * @return {Boolean} true if `str` is a quoted string\n * @example\n * isQuoted('foo') // false\n * @example\n * isQuoted('\"foo\"') // true\n */\nexport const isQuoted = (str, quotes = quoteSymbols) => {\n  return (\n    isStr(str) &&\n    quotes.some(quote => str.startsWith(quote) && str.endsWith(quote))\n  )\n}\n","import { isStr } from './isStr'\n\n/**\n * Reverses string\n * @function\n * @param {String} str - string to reverse\n * @return {String} reversed str\n * @example\n * reverseStr('foo') // 'oof'\n */\nexport const reverseStr = str => {\n  if (!isStr(str)) return undefined\n  let reversed = ''\n  for (let char of str) {\n    reversed = char + reversed\n  }\n  return reversed\n}\n","/**\n * Helper for `getWordStartingAt` that finds the\n * index of the exclusive end of the word, given the available\n * ending delimiters\n * @function\n * @param {String} text\n * @param {Number} index\n * @param {Array<string>} delimiters\n */\nexport const getNearestDelimiterIndex = (text, index, delimiters = [' ']) => {\n  const indices = delimiters.map(str => text.indexOf(str, index)).sort()\n  return indices.find(idx => idx >= 0)\n}\n\n/**\n * Gets the word in text starting at index\n * @function\n * @param {String} text\n * @param {Number} index - the inclusive starting index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordStartingAt(text, 4)\n * word === 'bar'\n */\nexport const getWordStartingAt = (text, index, delimiters = [' ']) => {\n  const endingSpaceIdx = getNearestDelimiterIndex(text, index, delimiters)\n  return text.substring(\n    index,\n    endingSpaceIdx === -1 ? text.length : endingSpaceIdx\n  )\n}\n","/**\n * Checks is value is a boolean.\n * @function\n * @example\n * isBool([1,2,3])\n * // Returns false\n * @example\n * isBool(true)\n * // Returns true\n * @param {*} val - value to check if is a number\n * @return {Boolean} True if val is a boolean\n */\nexport const isBool = val => typeof val === 'boolean'\n","/**\n * Checks is value is a boolean as a string.\n * @function\n * @example\n * isStrBool(\"true\")\n * // Returns true\n * @example\n * isStrBool(true)\n * // Returns false\n * @param {*} val - value to check if boolean as a string\n * @return {Boolean} True if val is a string boolean\n */\nexport const isStrBool = val => val === 'false' || val === 'true'\n","import { toStr } from '../string/toStr'\nimport { isBool } from './isBool'\n\n/**\n * Converts a value to a boolean as a string.\n * @function\n * @example\n * convertToStrBool(true)\n * // Returns 'true'\n * @param {*} val - value to convert to string boolean\n * @return {String} 'true' || 'false' based on passed in value\n */\nexport const convertToStrBool = val =>\n  isBool(val)\n    ? toStr(val)\n    : !val || val === 'false' || val === '0'\n        ? 'false'\n        : 'true'\n","/**\n * Checks if a value is falsy, excluding empty string and 0.\n * @function\n * @example\n * softFalsy('')\n * // Returns true\n * @example\n * softFalsy(0)\n * // Returns true\n * @example\n * softFalsy(null)\n * // Returns false\n * @param {*} val - value to check\n * @return {Boolean} - True if val is truthy, an empty string or 0\n */\nexport const softFalsy = val => Boolean(val || val === '' || val === 0)\n","import { isStrBool } from './isStrBool'\nimport { convertToStrBool } from './convertToStrBool'\n\n/**\n * Converts a value to a boolean.\n * @function\n * @example\n * toBool(null)\n * // Returns false\n * @example\n * toBool('false')\n * // Returns false\n * @example\n * toBool('true')\n * // Returns true\n * @param {*} val - value to convert\n * @return {Boolean} true or false based on passed in value.\n */\nexport const toBool = val =>\n  isStrBool(val) ? val === 'true' : convertToStrBool(val) === 'true'\n","import { toStr } from '../string/toStr'\n\n/**\n * Gets numbers and floats (.) from a string.\n * @example\n * getNums('$1.23')\n * // Returns '1.23'\n * @function\n * @param {*} val - value to pull numbers from\n * @return {String} Numbers found in value\n */\nexport const getNums = val => toStr(val).replace(/([^.\\d])/gm, '')\n","import { equalsNaN } from './equalsNaN'\nimport { getNums } from './getNums'\nimport { isNum } from './isNum'\n\n/**\n * Converts passed in value to a number.\n * @example\n * toNum(\"23\")\n * // Returns 23\n * @example\n * toNum(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to a float\n */\nexport const toNum = val =>\n  isNum(val) ? val : (val && !equalsNaN(val) && Number(getNums(val))) || 0\n","import { isStr } from '../string'\nimport { isBool } from '../boolean'\nimport { isNum } from '../number'\n\n/**\n * Checks if param is an orderable primitive\n * @function\n * @param {*} x\n * @returns {bool} - true if x is a comparable primitive\n */\nexport const isOrderable = x => isStr(x) || isNum(x) || isBool(x)\n","import { isStr } from '../string'\nimport { isOrderable } from './isOrderable'\nimport { validate } from '../validation'\n\n/**\n * Generic compare to method that works for strings, numbers, and booleans\n * @function\n * @param {string | number | boolean} x\n * @param {string | number | boolean} y\n * @return { number | null } - returns a value < 0 if x is less than y, 0 if they are equal, and a value greater than 0 if x is greater than y. Returns null if the args are not comparable.\n */\nexport const compareTo = (x, y) => {\n  const [valid] = validate({ x, y }, { $default: isOrderable })\n  if (!valid) return null\n  return isStr(x) ? x.localeCompare(y) : x - y\n}\n","/**\n * A function that simply returns its input\n * @function\n * @param {*} x\n * @returns {*} the input\n */\nexport const identity = x => x\n","/**\n * Checks if prop exists on the object.\n * @function\n * @param {Object} obj - data to check\n * @param {String} prop - prop to check for\n * @returns {Boolean} T/F if the prop exists\n */\nexport const hasOwn = (obj, prop) =>\n  Object.prototype.hasOwnProperty.call(obj, prop)\n","import { get } from '../collection/get'\n\n/**\n * Clones a function using the Function constructor and calling toString on the passed in function\n * @example\n * const func = () => { console.log('test') }\n * const clone = cloneFunc(func)\n * // clone !== func\n * @function\n * @param {Function} func - function to clone\n *\n * @returns {Object} cloned function\n */\nexport const cloneFunc = func => {\n  const funcClone = function (...args) {\n    return func instanceof funcClone\n      ? (() => {\n          return new func(...args)\n        })()\n      : get(func.prototype, 'constructor.name')\n        ? new func(...args)\n        : func.apply(func, args)\n  }\n\n  for (let key in func) func.hasOwnProperty(key) && (funcClone[key] = func[key])\n\n  Object.defineProperty(funcClone, 'name', {\n    value: func.name,\n    configurable: true,\n  })\n  funcClone.toString = () => func.toString()\n\n  return funcClone\n}\n","import { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\n\n/**\n * Recursively clones an object or array.\n * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const clone = deepClone(test)\n * console.log(test === clone)) // prints false\n * console.log(test.foo === clone.foo) // prints false\n * @example\n * // Works with array too\n * deepClone([ [ [ 0 ] ] ])\n * // Returns copy of the passed in collection item\n * @function\n * @param {Object} obj - Object to clone\n * @return {Object} - Cloned Object\n */\nexport const deepClone = (obj, hash = new WeakMap()) => {\n  if (Object(obj) !== obj) return obj\n  if (obj instanceof Set) return new Set(obj)\n  if (hash.has(obj)) return hash.get(obj)\n  if (isArr(obj)) return obj.map(x => deepClone(x))\n  if (isFunc(obj)) return cloneFunc(obj)\n\n  const result =\n    obj instanceof Date\n      ? new Date(obj)\n      : obj instanceof RegExp\n        ? new RegExp(obj.source, obj.flags)\n        : !obj.constructor\n            ? Object.create(null)\n            : null\n\n  // if result is null, object has a constructor and wasn't an instance of Date nor RegExp\n  if (result === null) return cloneObjWithPrototypeAndProperties(obj)\n\n  hash.set(obj, result)\n\n  if (obj instanceof Map)\n    return Array.from(obj, ([ key, val ]) =>\n      result.set(key, deepClone(val, hash))\n    )\n\n  return Object.assign(\n    result,\n    ...Object.keys(obj).map(key => ({ [key]: deepClone(obj[key], hash) }))\n  )\n}\n\n/**\n * Helper for deepClone. Deeply clones the object, including its properties, and preserves the prototype and isFrozen and isSealed state\n * @function\n * @ignore\n * @param {Object} objectWithPrototype - any object that has a prototype\n * @returns {Object} the cloned object\n */\nexport const cloneObjWithPrototypeAndProperties = objectWithPrototype => {\n  if (!objectWithPrototype) return objectWithPrototype\n\n  const prototype = Object.getPrototypeOf(objectWithPrototype)\n  const sourceDescriptors =\n    Object.getOwnPropertyDescriptors(objectWithPrototype)\n\n  for (const [ key, descriptor ] of Object.entries(sourceDescriptors)) {\n    descriptor.value &&\n      (sourceDescriptors[key].value = deepClone(descriptor.value))\n  }\n\n  const clone = Object.create(prototype, sourceDescriptors)\n\n  if (Object.isFrozen(objectWithPrototype)) Object.freeze(clone)\n  if (Object.isSealed(objectWithPrototype)) Object.seal(clone)\n\n  return clone\n}\n","/**\n * Creates a uuid, unique up to around 20 million iterations.\n * @example\n * uuid()\n * // New uuid as a string\n * @function\n * @param {Number} [start] of the uuid\n * @return {String} - build uuid\n */\nexport const uuid = a =>\n  a\n    ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\n    : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid)\n","/**\n * Gets the type of the passed in val.\n * @example\n * typeOf(1)\n * // Returns Number\n * @example\n * typeOf('')\n * // Returns String\n * @function\n * @param {*} val - value to get type for\n * @return {String} type of the value\n */\nexport const typeOf = val => Object.prototype.toString.call(val).slice(8, -1)\n","import { isArr } from '../array/isArr'\nimport { typeOf } from '../ext/typeOf'\nimport { isFunc } from './isFunc'\n\n/**\n * Pattern matching function. Iterates through the entries,\n * <br/>which have the form [ check value or predicate, return value ], and\n * <br/>when it encounters an entry whose check value matches the matchArg\n * <br/>(or the predicate returns true when passed the matchArg), it returns\n * <br/>the return value of that entry.\n *\n * For the default case: use [ match.default, <your default value> ]\n * @function\n *\n * @param {*} matchArg - the argument to match against the cases\n * @param {Array} entries - the cases to match against the matchArg\n * @returns {*} - the return value of the first entry with a matching check value, else null\n *\n * @example\n * const value = 1\n * match(value,\n *  [ 1, \"hello\" ],\n *  [ x => x > 2, \"greater\" ]\n *  [ match.default, \"defaulted\"]\n * )\n * => returns \"hello\"\n *\n * @example\n * const value = 3\n * match(value,\n *  [ 1, \"hello\" ],\n *  [ x => x > 2, \"greater\" ]\n * )\n * => returns \"greater\"\n *\n * @example\n * // react reducer:\n *function todoReducer(state, action) {\n *   const reducer = match(action.type,\n *       [ 'ADD-TODO', addTodo ],\n *       [ 'REMOVE-TODO', removeTodo ],\n *       [ 'UPDATE-TODO', updateTodo ],\n *       [ match.default, state ]\n *   )\n *\n *   return reducer(state, action)\n *}\n */\nexport const match = (matchArg, ...args) => {\n  if (!args.length) return null\n\n  // check all cases and return a value if a match is found\n  for (let entry of args) {\n    if (!isArr(entry)) {\n      console.error(\n        `Matching case must be an entry (a 2-element array). Found: ${typeOf(\n          entry\n        )}`,\n        entry\n      )\n      break\n    }\n    const [ caseValueOrPredicate, valueOnMatch ] = entry\n    if (isFunc(caseValueOrPredicate) && caseValueOrPredicate(matchArg))\n      return valueOnMatch\n    if (caseValueOrPredicate === matchArg) return valueOnMatch\n  }\n\n  return null\n}\n\n/**\n * The default case function you can use with match. Just returns true so the case value can be used.\n * @function\n * @example\n * match(foo\n *    [ 100, 'a' ],\n *    [ 200, 'b' ],\n *    [ match.default, 'default value' ]\n * )\n */\nmatch.default = () => true\n","import { isObj } from '../object/isObj'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\n\n/**\n * Checks if the value is empty.\n * @example\n * isEmpty('')\n * // Returns true\n * @example\n * isEmpty({})\n * // Returns true\n * @example\n * isEmpty([ 1 ])\n * // Returns false\n * @function\n * @param {*} val - value to check\n * @return {Boolean} if the value is empty\n */\nexport const isEmpty = val =>\n  isObj(val)\n    ? Object.keys(val).length === 0\n    : isArr(val)\n      ? val.length === 0\n      : isStr(val)\n        ? val.trim().length === 0\n        : isNum(val)\n          ? val < 1\n          : false\n","import { isArr } from './isArr'\nimport { isFunc } from '../method'\nimport { validate } from '../validation'\n\n/**\n * Finds the extremum (e.g. max, min) element within array `arr` as defined by the `comparator` function\n * @function\n * @param {Array<*>} arr\n * @param {Function} comparator - comparison function like the compareFunction in sort: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n * @returns {*} the element in `arr` that is the extremum as defined by `comparator`. If arr is empty, this function returns null.\n * @example\n * const max = findExtrema([ { a: 1 }, { a: 2} ], (x, y) => x.a - y.a)\n * // max === { a: 2 }\n */\n// export const findExtrema = (arr, comparator) => {\n//   const [valid] = validate(\n//     { arr, comparator },\n//     { arr: isArr, $default: isFunc }\n//   )\n//   if (!valid) return null\n\n//   return arr.length\n//     ? arr.reduce((extremaSoFar, next) =>\n//       comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n//     )\n//     : null\n// }\n\nexport const findExtrema = (arr, comparator) => {\n  const [valid] = validate(\n    { arr, comparator },\n    { arr: isArr, $default: isFunc }\n  )\n  if (!valid) return null\n\n  return arr.length\n    ? arr.reduce((extremaSoFar, next) =>\n      comparator(extremaSoFar, next) > 0 ? extremaSoFar : next\n    )\n    : null\n}\n","import { isArr } from './isArr'\n\n/**\n * Removes duplicates from an array, checking by reference-equality\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @param {array} arr - array to remove duplicates from\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArrByReference = arr => {\n  return !isArr(arr) ? arr : arr.filter((e, i, arr) => arr.indexOf(e) == i)\n}\n\n/**\n *\n * @param {*} arr\n * @param {*} selector\n */\n/**\n * Removes duplicates from an array.\n * @function\n * @example\n * uniqArr([1,1,2,3,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n * uniqArr([ {a: 1} , { a: 1 }], element => element.a)\n * // Returns array [ { a: 1 } ]\n * @param {array} arr - array to remove duplicates from\n * @param {Function} [selector] - optional function to specify the property uniqArr should use to check if another element exists\n * @return {array} copy of passed in array, with duplicates removed\n */\nexport const uniqArr = (arr, selector) => {\n  if (!selector) return uniqArrByReference(arr)\n\n  // loop over each element in one pass,\n  // only including in the unique array elements\n  // we haven't encountered before\n  // by checking with `selector` and the set\n  const { unique } = arr.reduce(\n    (data, element, index) => {\n      const id = selector(element, index)\n      !data.set.has(id) && data.unique.push(element)\n      data.set.add(id)\n      return data\n    },\n    {\n      unique: [],\n      set: new Set(),\n    }\n  )\n\n  return unique\n}\n","import { isObj } from '../object/isObj'\nimport { isColl } from './isColl'\n\n/**\n * Cleans a collection by creating a new collection\n * With the null and undefined values removed\n * @function\n * @param {Object|Array} coll - Collection to remove empty values from\n * @param {Boolean} [recursive=true] - Should recursively clean child values\n *\n * @returns {Object|Array} - Cleaned collection\n */\nexport const cleanColl = (coll, recursive = true) => {\n  return isColl(coll)\n    ? Object.keys(coll).reduce((cleaned, key) => {\n      const value = coll[key]\n      if (value === null || value === undefined) return cleaned\n\n      cleaned[key] = recursive && isColl(value) ? cleanColl(value) : value\n\n      return cleaned\n    }, (isObj(coll) && {}) || [])\n    : console.error(`cleanColl requires a collection as the first argument`) ||\n        coll\n}\n","import { updateColl } from './updateColl'\n\n/**\n * Adds a path to an object.\n * <br/>If the path already exists, but not in the correct format it will be replaced.\n * <br/>The path is built from a `.` separated string.\n * <br/>I.E. path = 'data.foo.bar' => obj.data.foo.bar will be created on the object.\n * @example\n * set(obj, [ 'foo', 'bar' ], 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @example\n * set(obj, 'foo.bar', 'baz')\n * // Returns the passed in obj, with the value of bar set to baz\n * @function\n * @param {Object} obj - Object to have the path added to it\n * @param {String|Array} path - Path that should be created on the object, separated by .\n * @param {*} finalValue - When ever the final value of the path should be\n * @return {Object} - The obj with the passed in value set to the passed in path\n */\nexport const set = (obj, path, val) => updateColl(obj, path, 'set', val)\n","// Cache the prototype methods for faster access\nconst isArray = Array.isArray\nconst keyList = Object.keys\nconst hasProp = Object.prototype.hasOwnProperty\n\n/**\n * Recursively checks if two collections are equal\n * <br/>Faster the JSON.stringify checks\n * <br/>See https://jsperf.com/fast-deep-equal-vs-json-stringify\n * @example\n * const test = { foo: [ { bar: 'baz' } ] }\n * const test2 = { foo: [ { bar: 'baz' } ] }\n * console.log(test === test2)) // prints false\n * deepEqual(test, test2) // returns true\n * @example\n * // Works with arrays too\n * deepClone([ [ [ 0 ] ] ], [ [ [ 0 ] ] ]) // returns true\n * @function\n * @param {Object|Array} a - Object to check\n * @param {Object|Array} b - Object to check against\n */\nexport const deepEqual = (a, b) => {\n  if (a === b) return true\n\n  if (!a || !b || typeof a != 'object' || typeof b != 'object')\n    return a !== a && b !== b\n\n  const arrA = isArray(a)\n  const arrB = isArray(b)\n  let i\n  let length\n  let key\n\n  // If both are arrays\n  if (arrA && arrB) {\n    length = a.length\n    // If unequal length, then not equal\n    if (length != b.length) return false\n    // Loop the arrays and check the contents of both\n    for (i = length; i-- !== 0;) if (!deepEqual(a[i], b[i])) return false\n\n    return true\n  }\n\n  // If on is an array and the other is not, then return false\n  if (arrA != arrB) return false\n\n  // Validate date objects\n  const dateA = a instanceof Date\n  const dateB = b instanceof Date\n  if (dateA != dateB) return false\n  if (dateA && dateB) return a.getTime() == b.getTime()\n\n  // Validate RegExp objects\n  const regexpA = a instanceof RegExp\n  const regexpB = b instanceof RegExp\n  if (regexpA != regexpB) return false\n  if (regexpA && regexpB) return a.toString() == b.toString()\n\n  // Cache the keys and length for faster iteration\n  const keys = keyList(a)\n  length = keys.length\n\n  // If unequal key length then return false\n  if (length !== keyList(b).length) return false\n\n  // Ensure both objects have the same keys\n  for (i = length; i-- !== 0;) if (!hasProp.call(b, keys[i])) return false\n\n  // Check the value of the object keys\n  for (i = length; i-- !== 0;) {\n    key = keys[i]\n    if (!deepEqual(a[key], b[key])) return false\n  }\n\n  return true\n}\n","import { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { toNum } from '../number/toNum'\nimport { isStrBool } from '../boolean/isStrBool'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Converts a string to its own type if possible.\n * @example\n * strToType('12345678')\n * // Returns 12345678\n * @example\n * strToType('{}')\n * // Returns {}\n * @example\n * strToType('[]')\n * // Returns []\n * @function\n * @param {*} val - value to convert\n * @return { any | string } converted value || string if can't convert\n */\nexport const strToType = val => {\n  return !val || !isStr(val)\n    ? val\n    : isStrBool(val)\n      ? toBool(val)\n      : isNum(val)\n        ? toNum(val)\n        : (() => {\n            try {\n              return JSON.parse(val)\n            }\n            catch (e) {\n              return val\n            }\n          })()\n}\n","'use strict'\n\nlet SHOW_LOGS\nlet METH_DEF = 'dir'\nlet PREFIX = 'type'\nconst LOG_TYPES = [ 'error', 'info', 'log', 'dir', 'warn' ]\nconst isTest = process.env.NODE_ENV === 'test'\n\n/**\n * Turns logs on || off.\n * <br/>Set the default log method.\n * <br/>Add a prefix to all log message\n * @example\n * setLogs(true, 'dir', '[ DEV MODE ]')\n * @function\n * @param {Boolean} log - log values\n * @param {String} [methDef] - default log method\n * @param {String} [prefix] - string to add to all logs\n * @return { void }\n */\nexport const setLogs = (log, methDef, prefix) => {\n  SHOW_LOGS = log\n  METH_DEF = methDef || METH_DEF || 'log'\n  PREFIX = prefix || PREFIX || 'type'\n}\n\n/**\n * Resets log settings to default\n * @example\n * resetLogs()\n * // Resets settings set from the `setLogs method`\n * @function\n * @return { void }\n */\nexport const resetLogs = () => {\n  SHOW_LOGS = undefined\n  METH_DEF = 'log'\n  PREFIX = 'type'\n}\n\n/**\n * Logs a string to the inspector, uses the last argument to determine the log type\n * @example\n * logData('data to log', 'error')\n * // Will call console.error('data to log')\n * @function\n * @param {Array} args - to be passed to the log call\n * @return { void }\n */\nexport const logData = (...args) => {\n  if (!args.length) return\n\n  let type = args.length === 1 ? METH_DEF : args.pop()\n  if (!SHOW_LOGS && type !== 'error') return\n  else if (typeof args[0] === 'string') {\n    if (PREFIX === 'type') args[0] = `[ ${type.toUpperCase()} ] ${args[0]}`\n    else if (PREFIX) args[0] = `${PREFIX} ${args[0]}`\n  }\n\n  LOG_TYPES.indexOf(type) !== -1\n    ? console[type](...args)\n    : console[METH_DEF](...args, type)\n}\n\nisTest && (module.exports.getShowLogs = () => SHOW_LOGS)\n","/**\n * Removes all properties from an object.\n * @function\n * @param {Object} obj - object to remove properties from\n * @param {Array} [filter] - list of keys to not remove\n * @returns {void}\n */\nexport const clearObj = (obj, filter) => {\n  obj &&\n    Object.entries(obj).map(([ key, value ]) => {\n      if (filter && filter.indexOf(key) !== -1) return\n      if (typeof value === 'object') clearObj(value)\n      obj[key] = undefined\n      delete obj[key]\n    })\n}\n","import { isFunc } from '../method/isFunc'\nimport { cloneFunc } from '../method/cloneFunc'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { deepClone } from '../collection/deepClone'\nimport { isColl } from '../collection/isColl'\n\n/**\n * Deep merges an array of objects together.\n * @function\n * @param {Array} sources - array of objects to join\n * @returns {Object|Array} - merged object or array\n */\nexport const deepMerge = (...sources) => {\n  return sources.reduce((merged, source) => {\n    const srcCopy = deepClone(source)\n    return isArr(srcCopy)\n      ? // Check if it's array, and join the arrays\n        [ ...((isArr(merged) && merged) || []), ...srcCopy ]\n      : // Check if it's an object, and loop the properties\n      isObj(srcCopy)\n        ? // Loop the entries of the object, and add them to the merged object\n        Object.entries(srcCopy).reduce(\n          (joined, [ key, value ]) => ({\n            ...joined,\n            // Check it's a function, and if so, clone it\n            [key]: isFunc(value)\n              ? cloneFunc(value)\n              : // Check if the value is an object of if key is in the object\n              isColl(value) && key in joined\n                ? // Set to value or deepMerge the object with the current merged object\n                deepMerge(joined[key], value)\n                : // Otherwise just clone and set the value\n                deepClone(value),\n            // Pass in merged at the joined object\n          }),\n          merged\n        )\n        : // If it's not an array or object, just return the merge object\n        merged\n    // Check the first source to decide what to merged value should start as\n  }, (isArr(sources[0]) && []) || {})\n}\n","import { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if the input is a valid entry - a 2-element array, like what Object.entries produces.\n * Expects the first element in the entry to be either a string or a number.\n * @function\n * @example isEntry([1, 2]) // true\n * @example isEntry([\"id\", 87]) // true\n * @example isEntry([new Date(), 2]) // false, first element not string or number\n * @example isEntry([1, 2, 3]) // false, too many elements\n * @param {*} maybeEntry - Item to check if it's an entry\n *\n * @returns {Boolean} - True if it is an entry, false otherwise\n */\nexport const isEntry = maybeEntry =>\n  isArr(maybeEntry) &&\n  maybeEntry.length === 2 &&\n  (isNum(maybeEntry[0]) || isStr(maybeEntry[0]))\n","import { isFunc } from '../method/isFunc'\nimport { set } from '../collection/set'\nimport { isArr } from '../array/isArr'\nimport { isObj } from './isObj'\nimport { isEntry } from './isEntry'\n\n/**\n * Returns a new object, each entry of which is the result of applying the cb function to input's corresponding entry\n * @param {Object|Array} obj - regular object or array\n * @param {Function} cb  - function of form: (key, value) => [nextKey, nextValue]\n *  - the return type here is an array of two elements, key and value, where `key` must be either a string or a number\n *  - if a cb does not return an entry, then the original [key, value] pair that was passed into cb will be used instead\n * @example mapObj({a: 2, b: 3}, (k, v) => [k, v * v]) returns: {a: 4, b: 9}\n * @example mapObj({a: 1}, (k, v) => ['b', v]) returns: {b: 1}\n * @function\n *\n * @returns {Object} - new object with mapping applied, or the original obj if input was invalid\n */\nexport const mapEntries = (obj, cb) => {\n  if (!isArr(obj) && !isObj(obj)) {\n    console.error(obj, `Expected array or object for obj. Found ${typeof obj}`)\n    return obj\n  }\n\n  if (!isFunc(cb)) {\n    console.error(`Expected function for cb. Found ${typeof cb}`)\n    return obj\n  }\n\n  const entries = Object.entries(obj)\n\n  const initialValue = isArr(obj) ? [] : {}\n\n  return entries.reduce((obj, [ key, value ]) => {\n    const result = cb(key, value)\n    if (!isEntry(result)) {\n      console.error(\n        `Callback function must return entry. Found: ${result}. Using current entry instead.`\n      )\n      return set(obj, key, value)\n    }\n    return set(obj, result[0], result[1])\n  }, initialValue)\n}\n","import { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Loop over and objects props and values and reduce to new object.\n * @function\n * @param {Object} obj - Object to reduce over it's properties\n * @param {Function} cb - Method to call on each property of the obj argument\n * @param {Object} [start] - Starting accumulator object passed to the reduce method\n * @return {Object} - updated object after running the reduce method\n */\nexport const reduceObj = (obj, cb, start = {}) =>\n  (isObj(obj) &&\n    isFunc(cb) &&\n    Object.entries(obj).reduce(\n      (data, [ key, value ]) => cb(key, value, data),\n      start\n    )) ||\n  start\n","import { isFunc } from '../method/isFunc'\n\n/**\n * Converts a standard callback method into Promise\n * @param {Function} method - Function to convert into a promise\n * @function\n *\n * @return {Promise<Function>} - Passed in method converted into a promise\n */\nexport const promisify = method => {\n  if (!isFunc(method)) throw `Argument must be a function`\n\n  return (...args) => {\n    return new Promise((res, rej) => {\n      // If the last arg is not a function, just return the resolved method\n      if (!isFunc(args[args.length - 1])) return res(method(...args))\n\n      // Remove the callback method\n      args.pop()\n      // Replace it with the promise resolve / reject\n      args.push((...cbData) => {\n        // If the cbData first arg is not falsy, then reject the promise\n        // Otherwise resolve it\n        return cbData && cbData[0] ? rej(...cbData) : res(...cbData)\n      })\n\n      // Call the method, and return it\n      return method(...args)\n    })\n  }\n}\n","import { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\nimport { promisify } from './promisify'\n\n/**\n * Creates an array of Object default properties not to convert into promises\n * @ignore\n */\nconst defObjProps = Array.from([\n  'caller',\n  'callee',\n  'arguments',\n  'apply',\n  'bind',\n  'call',\n  'toString',\n  '__proto__',\n  '__defineGetter__',\n  '__defineSetter__',\n  'hasOwnProperty',\n  '__lookupGetter__',\n  '__lookupSetter__',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'valueOf',\n  'toLocaleString',\n])\n  .concat(Object.getOwnPropertyNames(Object.prototype))\n  .reduce((map, functionName) => {\n    map[functionName] = true\n    return map\n  }, {})\n\n/**\n * Loops an object and looks for any methods that belong to the object, then add an Async version\n * @param {Object} object\n * @return {Object} - object with Async methods added\n */\nconst addAsync = object => {\n  if (!object.__IS_PROMISIFIED__) {\n    for (const prop of Object.getOwnPropertyNames(object)) {\n      const isAsync = prop.indexOf('Async') !== -1 || object[`${prop}Async`]\n      if (isAsync || defObjProps[prop]) continue\n\n      if (isFunc(object[prop])) object[`${prop}Async`] = promisify(object[prop])\n      else {\n        const getValue = Object.getOwnPropertyDescriptor(object, prop).get\n        if (isFunc(getValue)) object[`${prop}Async`] = promisify(getValue)\n      }\n    }\n    object.__IS_PROMISIFIED__ = true\n  }\n\n  return object\n}\n\n/**\n * Converts Objects method properties into promiseAsync. allow using promisifyAll\n * @function\n * @param {Object} object\n * @return {Object} - promisified object\n */\nexport const promisifyAll = object => {\n  if (!isObj(object)) return object\n\n  addAsync(object)\n  const proto = Object.getPrototypeOf(object)\n\n  proto && Object.getPrototypeOf(proto) !== null && addAsync(proto)\n\n  return object\n}\n","/**\n * Checks if value is an instance of regex\n * @function\n * @param {*} val\n * @return {Boolean} true if val is an instance of RegExp\n * @example\n * isRegex(new RegExp('a')) // true\n * isRegex(/a/) // true\n * isRegex('a') // false\n */\nexport const isRegex = val => Boolean(val && val instanceof RegExp)\n","import { isRegex } from './isRegex'\nimport { isStr } from '../string'\n\n/**\n * Attempts to return a regex string from maybeRx.\n * @function\n * @param {*} maybeRx - any time\n * @return {string?} If maybeRx is a RegExp instance, returns its .source\n * property. If it is a string, returns it unchanged.\n * Otherwise, returns null.\n *\n * @example\n * getRegexSource(/[A-z]+/) // '[A-z]+'\n * getRegexSource('test') // 'test'\n * getRegexSource(34) // null\n */\nexport const getRegexSource = maybeRx =>\n  isRegex(maybeRx) ? maybeRx.source : isStr(maybeRx) ? maybeRx : null\n","import { isArr } from '../array/isArr'\n\n/**\n * takes a raw querystring input and converts it to an object\n * @param {String} string - querystring to parse into an object\n * @function\n * @returns {Object}\n */\nexport const queryToObj = string => {\n  const currentQueryItems = {}\n  const stringSplit = string.split('?')\n  const querystring = stringSplit[stringSplit.length - 1]\n\n  if (!querystring) return currentQueryItems\n\n  const split = querystring.split('&')\n\n  split.length &&\n    split.map(item => {\n      const components = item.split('=')\n      if (components.length <= 1) return currentQueryItems\n\n      // split on the first instance of '=', so we join the rest if any\n      const itemSplit = [ components.shift(), components.join('=') ]\n\n      if (itemSplit.length === 2) {\n        // if the value contains special char ',' then make it into an array\n        const array = decodeURIComponent(itemSplit[1]).split(',')\n        if (array && array.length > 1) currentQueryItems[itemSplit[0]] = array\n        // check if key already exists\n        else if (itemSplit[0] in currentQueryItems) {\n          // convert to array or append to it\n          const val = currentQueryItems[itemSplit[0]]\n          currentQueryItems[itemSplit[0]] = isArr(val)\n            ? val.push(decodeURIComponent(itemSplit[1]))\n            : [ val, decodeURIComponent(itemSplit[1]) ]\n        }\n        else\n          currentQueryItems[itemSplit[0]] = decodeURIComponent(itemSplit[1])\n      }\n    })\n\n  return currentQueryItems\n}\n","import { isFunc } from '../method/isFunc'\nimport { deepClone } from '../collection/deepClone'\nimport { isObj } from './isObj'\n\n/**\n * Deep clones Object obj, then returns the result of calling function mutatorCb with the clone as its argument\n * @example\n * const obj = {}\n * const clone = applyToCloneOf(obj, (clone) => { clone.test = 'foo'; return clone })\n * console.log(obj === clone) // prints false\n * console.log(clone.test === 'foo') // prints true\n * @function\n * @param {Object} obj - object\n * @param {Function} mutatorCb - a callback that accepts one argument, the cloned obj, and mutates it in some way\n * @returns {Object|Array} the mutated clone\n */\nexport const applyToCloneOf = (obj, mutatorCb) => {\n  let error\n  if (!obj) error = 'object (Argument 1) in applyToCloneOf, must be defined!'\n\n  if (!isObj(obj))\n    error = 'object (Argument 1) in applyToCloneOf, must be an object!'\n\n  if (!mutatorCb)\n    error = 'mutator (Argument 2) in applyToCloneOf, must be defined!'\n\n  if (!isFunc(mutatorCb))\n    error = 'mutator (Argument 2) arg in applyToCloneOf, must be a function!'\n\n  if (error) {\n    console.warn(error)\n\n    return obj\n  }\n\n  const clone = deepClone(obj)\n  mutatorCb(clone)\n\n  return clone\n}\n","import { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Checks if arrays are set-equal: they contain the same elements,\n * but element frequencies don't matter.\n * Does this with one pass over each array and an auxilliary set.\n * @function\n * @param {Array<*>} arr\n * @param {Array<*>} otherArr\n */\nexport const areSetEqual = (arr, otherArr) => {\n  const [valid] = validate({ arr, otherArr }, { $default: isArr })\n  if (!valid) return null\n\n  if (arr === otherArr) return true\n\n  const [ longest, shortest ] =\n    arr.length > otherArr.length ? [ arr, otherArr ] : [ otherArr, arr ]\n\n  const arrSet = new Set(shortest)\n\n  for (let i = 0; i < longest.length; i++) {\n    const element = longest[i]\n    if (!arrSet.has(element)) return false\n  }\n\n  return true\n}\n","/**\n * Builds a string path from passed in args ( i.e. path/to/thing ).\n * @function\n * @return {String} - built path from arguments\n */\nexport const buildPath = (...args) => {\n  const built = args.reduce((path, arg) => {\n    let str = toStr(arg)\n\n    return `${path}${(str && '/' + str) || ''}`\n  }, '')\n\n  return built.replace(/([^:\\/]|^)\\/{2,}/g, '$1/')\n}\n","import { capitalize } from './capitalize'\n\n/**\n * Turns a path string into a camel-cased string, if there is more than one\n * step in the path. If there isn't, just returns path.\n * @function\n * @param {String} path\n * @return {String} camel-cased string\n * @example\n * camelCasePath('settings.agendaMap.Count') -> 'settingsAgendaMapCount'\n * camelCasePath('settings') -> 'settings'\n */\nexport const camelCasePath = path => {\n  const split = path.split('.')\n  const camelCasedSplit = split.map((str, idx) =>\n    idx > 0 ? capitalize(str, false) : str\n  )\n\n  return camelCasedSplit.length > 1 ? camelCasedSplit.join('') : path\n}\n","import { isFunc } from './isFunc'\n\n/**\n * Check if the passed in method is a function, and calls it\n * @example\n * checkCall((param1) => { return param1 }, 'foo')\n * // Returns 'foo'\n * @function\n * @param {Function} method - function to call\n * @param {Object} params - params to pass to the method on call\n * @return {*} - whatever the passed in method returns\n */\nexport const checkCall = (method, ...params) => {\n  return isFunc(method) ? method(...params) : undefined\n}\n","import { isArr } from './isArr'\nimport { isObj } from '../object/isObj'\n\n/**\n * Creates a copy of the passed in array.\n * <br/>Returns empty array, if param is not an array.\n * @function\n * @example\n * cloneArr([1,2,3])\n * // Returns copy of the passed on array\n * @param {Array} arr - array to be copied\n * @return {Array} - copy of passed in array\n */\nexport const cloneArr = arr =>\n  Array.from([\n    // If arr is not an array or object, just use empty array, so we don't throw!\n    ...((isArr(arr) && arr) || (isObj(arr) && Object.entries(arr)) || []),\n  ])\n","import { logData } from '../log'\n\n/**\n * Clones an object by converting to JSON string and back.\n * @function\n * @param {Object} obj - object to clone\n * @returns {Object} copy of original object\n */\nexport const cloneJson = obj => {\n  try {\n    return JSON.parse(JSON.stringify(obj))\n  }\n  catch (e) {\n    logData(e.message, 'error')\n    return null\n  }\n}\n","import { validate } from '../validation'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Returns a new function that is the complement of predicate function `predicate`\n * @function\n * @param {Function} predicate\n * @returns {Function?} the complement of `predicate`, if it's a function, otherwise null\n * @example\n * const isNegative = x => (x < 0)\n * const isNonNegative = complement(isNegative)\n * isNonNegative(1) // true\n */\nexport const complement = predicate => {\n  const [valid] = validate({ predicate }, { predicate: isFunc })\n  return valid ? (...args) => !predicate(...args) : null\n}\n","import { isStr } from './isStr'\nimport { toStr } from './toStr'\n\n/**\n * Checks if a string contains another string.\n * @function\n * @param {String} string - value to be checked\n * @param {String} substring - value to search for\n * @param {Number} [fromIndex] - Index of the string to search from\n * @return {Boolean} - if the substring exists string\n */\nexport const containsStr = (str, substring, fromIndex) => {\n  str = (!isStr(str) && toStr(str)) || str\n  substring = (!isStr(substring) && toStr(substring)) || substring\n\n  return str.indexOf(substring, fromIndex) !== -1\n}\n","import { isFunc } from './isFunc'\n\n/**\n * Limits the amount of calls to a function over time\n * @example\n * debounce(myFunction)\n * // Calls myFunction after the default 250 ms\n * @example\n * debounce(myFunction, 500)\n * // Calls myFunction after 500 ms\n * @example\n * debounce(myFunction, 500, true)\n * // Calls myFunction immediately\n * @function\n * @param {Function} func - function to call\n * @param {Number} wait - how long to wait between function calls\n * @param {Boolean} immediate - should call immediately\n * @return { void }\n */\nexport const debounce = (func, wait = 250, immediate = false) => {\n  let timeout\n  function wrapFunc(...args) {\n    if (!isFunc(func)) return null\n\n    const context = this\n    const later = () => {\n      timeout = null\n      !immediate && func.apply(context, args)\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) return isFunc(func) && func.apply(context, args)\n  }\n  return wrapFunc\n}\n","import { isNum } from '../number/isNum'\nimport { isFunc } from './isFunc'\n\n/**\n * Execute a method n times.\n * <br/>Callback params - does not include number || callback method\n * @function\n * @example\n * doIt(10, window, [], (index, arr) => { arr.push(index) }) === [ 0,1,2 ... 8,9 ]\n * @param {Number} args.0 - number of times to call the callback\n * @param {parent} args.1 - value to bind the method call to ( this )\n * @param {Function} last arg of args array - method to call\n * @return { void }\n */\nexport const doIt = (...args) => {\n  const params = args.slice()\n  const num = params.shift()\n  const bindTo = params.shift()\n  const cb = params.pop()\n  if (!isNum(num) || !isFunc(cb)) return []\n\n  const doItAmount = new Array(num)\n  const responses = []\n  for (let i = 0; i < doItAmount.length; i++) {\n    const data = cb.call(bindTo, i, ...params)\n    if (data === false) break\n    responses.push(data)\n  }\n\n  return responses\n}\n","import { softFalsy } from '../boolean/softFalsy'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Determines the correct value to return, by calling the passed in check function.\n * <br/>If no check function, then it uses the softFalsy method.\n * @example\n * either(0, 2)\n * // Returns 0\n * @example\n * either(null, 2)\n * // Returns 2\n * @example\n * either(1, 2, (val1, val2) => { return true })\n * // Returns 1\n * @function\n * @param {*} [val1] - return if passes in check method return true\n * @param {*} [val2] - return if passed in check method returns false\n * @param {Function} [check] - called to determine which value to return\n * @returns {*}\n */\nexport const either = (val1, val2, check) =>\n  !isFunc(check)\n    ? (softFalsy(val1) && val1) || val2\n    : (check(val1, val2) && val1) || val2\n","import { isArr } from './isArr'\n\n/**\n * Returns a if it is an Array, else returns b\n * @function\n * @param {*} a\n * @param {*} b\n * @returns {*} either a, if it's an array, or b\n *\n * @example\n * const foo = eitherArr('hi', 1) // returns 1\n * const bar = eitherArr([ 2 ], 1) // returns [ 2 ]\n */\nexport const eitherArr = (a, b) => (isArr(a) ? a : b)\n","import { isFunc } from './isFunc'\n\n/**\n * Returns the first param if it's a function.\n * <br/>If first param is not a function, returns second param.\n * @example\n * eitherFunc(() => {}, 'bar')\n * // Returns first param because it's a function.\n * @example\n * eitherFunc('foo', 'bar')\n * // Returns 'bar'\n * @function\n * @param {Function} func1 - return if is func\n * @param {Function} func2 - use if first is not an object\n * @returns {Function}\n */\nexport const eitherFunc = (func1, func2) => (isFunc(func1) && func1) || func2\n","import { isObj } from './isObj'\n\n/**\n * Returns the first param if correct type of second param.\n * @function\n * @param {Object} obj1 - return if is object\n * @param {Object} obj2 - use if first is not an object\n * @returns {Object}\n */\nexport const eitherObj = (obj1, obj2) => (isObj(obj1) && obj1) || obj2\n","import { isStr } from './isStr'\n\n/**\n * Checks if the first param is a string, and returns it.\n * <br/>If it's not a string, the second param is returned\n * @function\n * @param {String} str1 - return if is string\n * @param {String} str2 - use if first is not a string\n * @returns {String}\n */\nexport const eitherStr = (str1, str2) => (isStr(str1) && str1) || str2\n","import { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"every\" for arrays, but operates across each entry in an object\n * @function\n * @param {Object} obj - Object to the it's entries iterated on\n * @param {Function} predicate - Function of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - Boolean indicating that every entry satisfied the predicate or not\n */\nexport const everyEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.every(([ key, value ]) => predicate(key, value))\n  )\n}\n","import { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Returns a new object, consisting of every key-value pair from obj that, when passed into the predicate, returned true\n * @function\n * @param {Object} obj - Object that should have it's properties filtered\n * @param {Function} predicate  - function of form: (key, value) => Boolean\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Object} - Object consisting of a subset of the entries from obj\n * @example: filterObj({a: 2, b: 3}, (k, v) => (v > 2)) returns: {b: 3}\n */\nexport const filterObj = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return obj\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return obj\n  }\n\n  return reduceObj(\n    obj,\n    (key, value, data) => {\n      if (predicate(key, value)) data[key] = value\n      return data\n    },\n    {}\n  )\n}\n","import { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the maximum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 3 }\n */\nexport const findMax = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(x), propSelector(y)))\n","import { identity, compareTo } from '../method'\nimport { findExtrema } from './findExtrema'\n\n/**\n * Returns the minimum element in arr\n * @function\n * @param {Array<Object>} arr\n * @param {Function?} propSelector - optional property selector for choosing the property to compare with\n * @example\n * const items = [ { num: 1 }, { num: 3 } ]\n * findMax(items, item => item.num) // returns { num: 1 }\n */\nexport const findMin = (arr = [], propSelector = identity) =>\n  findExtrema(arr, (x, y) => compareTo(propSelector(y), propSelector(x)))\n","import { isArr } from './isArr'\nimport { isFunc } from '../method/isFunc'\nimport { validate } from '../validation'\n\n/**\n * Maps each element using mapping function `mapFn`, but returns the result as a flattened array.\n * It is equivalent to map() followed by flattening to depth 1, but flatMap is a useful shortcut,\n * and merging both steps into one method (with one pass over the array) is slightly more efficient.\n * @function\n * @example\n * [1, 2].map(x => [x * 2]) // returns [[2], [4]]\n * flatMap([1, 2], x => [x * 2]) // returns [2, 4]\n * @param {Array} arr - array to map across\n * @param {Function} mapFn - function for mapping\n */\nexport const flatMap = (arr, mapFn) => {\n  const [inputIsValid] = validate({ arr, mapFn }, { arr: isArr, mapFn: isFunc })\n  if (!inputIsValid) return arr\n\n  // iterate across the array, calling mapFn on each element, then flattening into final array\n  return arr.reduce((finalArr, current) => {\n    const result = mapFn(current)\n    isArr(result) ? result.map(el => finalArr.push(el)) : finalArr.push(result)\n    return finalArr\n  }, [])\n}\n","import { isArr } from './isArr'\nimport { uniqArr } from './uniqArr'\nimport { flatArr } from './flatArr'\nimport { isFunc } from '../method/isFunc'\n\n/**\n * Flattens the passed in array arguments and removes duplicates\n * Also removes non-existing values such as undefined and null\n * If the last argument is a function, it will be used as the comparison when checking for duplicates\n * @function\n * @example\n * flatUnion([1,1,2], [1,2,3])\n * // Returns array with only unique values [ 1, 2, 3 ]\n * @example\n *  flatUnion([{a: 1}, { a: 3 }], [{a: 4}, { a: 1 }], item => item.a)\n * // Returns array with only unique values [ { a: 1 }, { a: 3 }, { a: 4 } ]\n * @param {Array} arr - array to remove duplicates from\n * @param {Function?} selector - optional function to specify the property to check if another element exists\n *\n * @return {Array} - Flattened copy of passed in array arguments, with duplicates removed\n */\nexport const flatUnion = (...args) => {\n  const last = args.pop()\n  const opts = { exists: true }\n  const compare = isFunc(last) ? last : args.push(last) && undefined\n\n  return args.reduce((merged, arr) => {\n    if (!isArr(arr)) return merged\n\n    return uniqArr(flatArr([ ...merged, ...arr ], opts), compare)\n  }, [])\n}\n","import { queryToObj } from './queryToObj'\nimport { validate } from '../validation/validate'\nimport { isStr } from '../string/isStr'\n\n/**\n * Gets the value for the URL parameter, if it's available.\n * Can be safely called on platforms without a global document object,\n * in which case this always returns null.\n * @function\n * @param {String} paramKey - a url param key\n * @return {string?} - value for the url parameter\n * @example\n * for www.test.com/?x=1&y=2\n * getURLParam('x') // 1\n * getURLParam('y') // 2\n */\nexport const getURLParam = paramKey => {\n  const [valid] = validate({ paramKey }, { paramKey: isStr })\n  if (!valid) return null\n\n  const doc = typeof document !== 'undefined' ? document : null\n\n  const search = doc?.location?.search\n\n  return isStr(search) ? queryToObj(search)?.[paramKey] ?? null : null\n}\n","import { reverseStr } from './reverseStr'\nimport { getWordStartingAt } from './getWordStartingAt'\n\n/**\n * Gets the word in text ending at index (exclusive)\n * @function\n * @param {String} text\n * @param {Number} index - the exclusive ending index of the word to get\n * @param {Array<string>?} delimiters - optional array of strings that delimit the start of words. Defaults to the space character.\n * @example\n * const text = 'foo bar bin'\n * const word = getWordEndingAt(text, 3)\n * word === 'foo'\n */\nexport const getWordEndingAt = (text, index, delimiters = [' ']) => {\n  const reversed = reverseStr(text)\n  const reversedIndex = text.length - index\n  return reverseStr(getWordStartingAt(reversed, reversedIndex, delimiters))\n}\n","/**\n * Checks if there is access to the dom\n * @function\n * @example\n * // In Browser\n * hasDomAccess() === true\n * // In Node\n * hasDomAccess() === false\n * @return {Boolean} True if executed in a browser\n */\nexport const hasDomAccess = () => {\n  try {\n    return !!(\n      typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement\n    )\n  }\n  catch (error) {\n    return false\n  }\n}\n","import { isStr } from './isStr'\nimport { isNonNegative } from '../number/isNonNegative'\n/**\n * Creates a hash from a passed in string consistently\n * <br/>Not intended to be secure\n * <br/>Value comes from being a pure function\n * <br/>Given the same input, it will always return the same output\n * <br/>There is no expectation to convert back from the hash to the original string\n * @function\n * @param {String} str - String to be hashed\n * @param {number=} maxLength - Max length of the returned hash\n *\n * @returns {String} - Hashed version of the string\n */\nexport const hashString = (str, maxLength) => {\n  if (!isStr(str) || str.length == 0) return 0\n\n  str = str.split('').reverse()\n    .join('')\n\n  let hash = 0\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    // Convert to positive 32bit integer\n    hash = `${Math.abs(hash & hash)}`\n  }\n\n  return isNonNegative(maxLength) ? hash.slice(0, maxLength) : hash\n}\n","import { isObj } from './isObj'\nimport { isArr } from '../array/isArr'\nimport { toBool } from '../boolean/toBool'\n\n/**\n * Returns true if the input is an object and every value is an array\n * @function\n * @param {Object|*} obj - data to check\n * @return {Boolean} - true if input is an array map\n */\nexport const isArrMap = obj => {\n  if (!isObj(obj)) return false\n  const values = Object.values(obj)\n  return toBool(values.length && values.every(isArr))\n}\n","import { isStr } from './isStr'\n\n/**\n * Check if string is a email.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a email\n */\nexport const isEmail = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/\n  return Boolean(regex.test(str))\n}\n","import { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Checks if passed in obj || array is empty.\n * @example\n * isEmptyColl({})\n * // Returns true\n * @example\n * isEmptyColl({ foo: 'bar' })\n * // Returns false\n * @example\n * isEmptyColl([])\n * // Returns true\n * @function\n * @param {*} obj - Object to check if empty\n * @return {Boolean} - True if the passed in collection is empty\n */\nexport const isEmptyColl = obj =>\n  isArr(obj)\n    ? obj.length === 0\n    : isColl(obj) && Object.getOwnPropertyNames(obj).length === 0\n","import { isNum } from './isNum'\n\n/**\n * Checks if a number is a Float.\n * @example\n * isFloat(1.23)\n * // Returns true\n * @example\n * isFloat('1.2')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Float\n */\nexport const isFloat = val => isNum(val) && val % 1 !== 0\n","import { isNum } from './isNum'\n\n/**\n * Checks if a number is an integer.\n * @example\n * isInt(1)\n * // Returns true\n * @example\n * isInt('1')\n * // Returns false ( because it's a string )\n * @function\n * @param {Number} num - value to check\n * @return {Boolean} true or false - value is an Int\n */\nexport const isInt = val => isNum(val) && val % 1 === 0\n","import { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a negative number\n * @example isNegative(-1) // true\n * @example isNegative(0) // false\n */\nexport const isNegative = x => isNum(x) && x < 0\n","import { isStr } from './isStr'\n\n/**\n * Check if string is a phone number.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - True if str is a phone number\n */\nexport const isPhone = str => {\n  if (!str || !isStr(str)) return false\n  const regex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im\n  return Boolean(regex.test(str)) && str.replace(/\\D/g, '').length < 11\n}\n","import { isNum } from './isNum'\n\n/**\n * @function\n * @param {*} x\n * @returns { boolean } true if x is a positive number\n * @example isPositive(0) // false\n * @example isPositive(1) // true\n */\nexport const isPositive = x => isNum(x) && x > 0\n","/**\n * Checks if the passed in values are exactly the same.\n * @example\n * isSame(1, 1)\n * // Returns true\n * @function\n * @param {*} val1 - value to compare\n * @param {*} val2 - value to compare\n * @return {Boolean} is the values are the same\n */\nexport const isSame = (val1, val2) =>\n  val1 === val2\n    ? val1 !== 0 || 1 / val1 === 1 / val2\n    : val1 !== val1 && val2 !== val2\n","/**\n * Check if string is a url.\n * @function\n * @param {String} string to check\n * @return {Boolean} - if it's a url\n */\nexport const isUrl = str => {\n  const regex =\n    /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/\n  return Boolean(regex.test(str))\n}\n","import { isStr } from './isStr'\n\n/**\n * Check if string is a uuid.\n * @function\n * @param {String} str - string to check\n * @return {Boolean} - if it's a uuid\n */\nexport const isUuid = str => {\n  if (!str || !isStr(str)) return false\n  const regex =\n    /^[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i\n  return Boolean(regex.test(str))\n}\n","/**\n * Checks is passed in date is a valid date.\n * @example\n * isValidDate(new Date())\n * // Returns true\n * @example\n * isValidDate(new Date().toString())\n * // Returns true\n * @example\n * isValidDate('12345678')\n * // Returns false\n * @function\n * @param { Date|String } date - value to check\n * @return {Boolean} T/F - if passed in date is a valid date\n */\nexport const isValidDate = date =>\n  !isNaN(((date instanceof Date && date) || new Date(date)).getTime())\n","/**\n * Checks if the given string is a valid URL\n * Must begin with ftp/http/https\n * @param {String} str - any string to check if it's a valid url\n * @function\n * @returns {Boolean}\n */\nexport const isValidUrl = str => {\n  var regexp =\n    /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/\n\n  return regexp.test(str)\n}\n","import { isStr } from '../string'\nimport { isArr } from '../array'\nimport { getRegexSource } from './getRegexSource'\n\n/**\n * Helper for `joinRegex` that parses the args\n * @param {...*} args\n * @return {Array} [\n *  expressions array,\n *  options string\n * ]\n */\nconst parseArgs = args => {\n  if (isArr(args[0])) return [ args[0], args[1] ]\n  const last = args[args.length - 1]\n  const options = isStr(last) ? last : undefined\n  const expressions = options ? args.splice(0, args.length - 1) : args\n  return [ expressions, options ]\n}\n\n/**\n * Joins regex together in one expression\n * <br/>You can technically use strings as well\n * <br/>But be careful that it's not the last element of a spread call\n * <br/>Or that will be interpreted as the \"options\" string.\n * @function\n * @param {...RegExp} expressions array of regex instances.\n * @example\n * // calling using spread args\n * const joined = joinRegex(/[A-z]+/, /[0-9]/, 'g')\n * joined === /([A-z]+|[0-9])/g\n * @example\n * // calling with an array\n * const joined = joinRegex([ ...allMyRegEx ], 'gi')\n */\nexport const joinRegex = (...args) => {\n  const [ expressions, options ] = parseArgs(args)\n\n  // join the regex together in a capture group with the | operator\n  const source = expressions.reduce((joined, next) => {\n    const nextSource = getRegexSource(next)\n    return !nextSource\n      ? joined\n      : joined === ''\n        ? nextSource\n        : `${joined}|${nextSource}`\n  }, '')\n\n  return new RegExp(`(${source})`, options)\n}\n","/**\n * Compares two objects by converting to JSON, and checking string equality.\n * @function\n * @param { object | array } one - object to compare with param two\n * @param { object | array } two - object to compare with param one\n * @return {Boolean} status of equality\n */\nexport const jsonEqual = (one, two) => {\n  try {\n    return JSON.stringify(one) === JSON.stringify(two)\n  }\n  catch (e) {\n    return false\n  }\n}\n","import { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts an array of strings to a matching key/value pair object.\n * @function\n * @param {Array} arr - to be converted to object\n * @param {Boolean} toUpperCase - converts the key and value to uppercase\n * @return {Object} built object\n */\nexport const keyMap = (arr, toUpperCase) =>\n  (isArr(arr) &&\n    arr.reduce((obj, key) => {\n      if (!isStr(key)) return obj\n\n      const use = (toUpperCase && key.toUpperCase()) || key\n      obj[use] = use\n\n      return obj\n    }, {})) ||\n  {}\n","import { isFunc } from './isFunc'\n\n/**\n * Response returned from a limbo promise\n * @typedef TLimboResponse\n * @type {Array}\n */\n\n/**\n * Adds catch to a promise for better error handling of await functions\n * <br/>Removes the need for wrapping await in a try / catch\n * <br/>First argument is an Error when the promise throws or null when it resolves\n * <br/>Second argument is the response from the resolved promise\n * @example\n * const [ err, data ] = await limbo(promiseFunction())\n * // returns an array\n * // * err will be undefined if no error was thrown\n * // * data will be the response from the promiseFunction\n * @function\n * @param {Promise<Function>} promise - Promise to be resolved\n * @return {Promise<TLimboResponse>} - Slot 1 => error, Slot 2 => response from promise\n */\nexport const limbo = promise => {\n  return !promise || !isFunc(promise.then)\n    ? [\n        new Error(`A promise or thenable is required as the first argument!`),\n        null,\n      ]\n    : promise.then(data => [ null, data ]).catch(err => [ err, undefined ])\n}\n","import { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over a collection and calls a passed in function for each one.\n * @example\n * mapColl([1, 2, 3], (key, val, coll) => { console.log(key) })\n * // Will log all keys of the collection\n * @function\n * @param {Array|Object} coll - Collection to loop over\n * @return {Array|Object} returns the same type of collection passed in\n */\nexport const mapColl = (coll, cb) =>\n  isFunc(cb) && isColl(coll)\n    ? Object.keys(coll).map(key => cb(key, coll[key], coll))\n    : isArr(coll)\n      ? []\n      : {}\n","import { isColl } from './isColl'\nimport { isObj } from '../object/isObj'\nimport { isFunc } from '../method/isFunc'\nimport { exists } from '../ext/exists'\nimport { validate } from '../validation'\n\n/**\n * Helper for mapFind, handling the array case\n * @private\n * @param {Array} arr\n * @param {Function} mapper\n * @param {Function} testFunc\n * @returns {*}\n */\nconst mapFindArr = (arr, mapper, testFunc) => {\n  // iterate over each value in the array,\n  // returning when a mapped value is found that passes `testFunc`\n  for (let i = 0; i < arr.length; i++) {\n    const mappedValue = mapper(arr[i], i, i)\n    if (testFunc(mappedValue, i, i)) return mappedValue\n  }\n\n  return null\n}\n\n/**\n * Helper for mapFind, handling the object case\n * @private\n * @param {Object} obj\n * @param {Function} mapper\n * @param {Function} testFunc\n * @returns {*}\n */\nconst mapFindObj = (obj, mapper, testFunc) => {\n  let idx = 0\n\n  // iterate over each property in the object\n  // returning when a mapped value is found that passes `testFunc`\n  for (let key in obj) {\n    if (!obj.hasOwnProperty(key)) continue\n\n    const value = obj[key]\n    const mappedValue = mapper(value, key, idx)\n    if (testFunc(mappedValue, key, idx)) return mappedValue\n\n    idx++\n  }\n\n  return null\n}\n\n/**\n * Finds the first element in coll whose mapped value passes the testFunc function, then returns\n * the **mapped** value.\n * It will not map the entire array or object; only the subset needed to find the first passing element.\n * @function\n * @param {Array|Object} coll - Elements to map and find\n * @param {Function} mapper - Mapping function of form: (value, key, idx) -> *. \"key\" is the index when coll is an array. \"idx\" is the index of the array value or object entry.\n * @param {Function?} testFunc - Predicate function of form: (mappedValue, key, idx) -> true/false. Defaults to checking if the mapped value is defined. \"key\" is the index when coll is an array.\n * @returns {*} - The first passing mapped value\n *\n * @example\n * // Find the first file path that can be required from disk\n * const filePaths = [...]\n * const loadedFile = mapFind(filePaths, tryRequireSync)\n *\n * @example\n * // Find the first file path whose required value is an object\n * const filePaths = [...]\n * const loadedFile = mapFind(filePaths, tryRequireSync, isObj)\n *\n * @example\n * // Find the first file path whose required value is an object\n * const filePaths = { document: \"foo/bar/doc.txt\", image: \"foo/bar/pic.img\"}\n * const loadedFile = mapFind(filePaths, (value, key) => tryRequireSync(value), isObj)\n */\nexport const mapFind = (coll, mapper, testFunc = exists) => {\n  const [valid] = validate(\n    { coll, mapper, testFunc },\n    { coll: isColl, $default: isFunc }\n  )\n  if (!valid) return undefined\n\n  return isObj(coll)\n    ? mapFindObj(coll, mapper, testFunc)\n    : mapFindArr(coll, mapper, testFunc)\n}\n","import { isObj } from './isObj'\nimport { isFunc } from '../method/isFunc'\nimport { mapEntries } from './mapEntries'\n\n/**\n * Shortcut helper for mapping just the keys of an object.\n * @function\n * @param {Object} obj - Object to have it's property keys mapped\n * @param {Function} keyMapper - Function of shape (key) => nextKey\n * @returns {Object} - The new object with each key mapped to the response of keyMapper\n */\nexport const mapKeys = (obj, keyMapper) => {\n  if (!isObj(obj) || !isFunc(keyMapper)) return obj\n\n  return mapEntries(obj, (key, value) => [ keyMapper(key), value ])\n}\n","import { isFunc } from '../method/isFunc'\nimport { isObj } from './isObj'\n\n/**\n * Map over and objects props and values.\n * @function\n * @param {Object} obj - Object to map over\n * @param {Function} cb - Method to call for each entry in the passed in obj\n * @return {Array} -  returned values from callback || The entries of the passed in obj\n */\nexport const mapObj = (obj, cb) => {\n  if (!isObj(obj)) return []\n\n  const entries = Object.entries(obj)\n  return isFunc(cb) ? entries.map(([ key, value ]) => cb(key, value)) : entries\n}\n","import { isNum } from '../number/isNum'\nimport { hasOwn } from '../object/hasOwn'\nimport { isFunc } from './isFunc'\n\n/**\n * Creates a method to memorize passed in methods output\n * @example\n * memorize(myFunction, cacheKeyFunction)\n * @example\n * memorize(myFunction, cacheKeyFunction, 100)\n * @function\n * @param {Function} func - method to memorize output of\n * @param {Function} getCacheKey - gets the key to save cached output\n *\n * @return {Function} memorized function with cache\n */\nexport const memorize = (func, getCacheKey, limit = 1) => {\n  if (!isFunc(func) || (getCacheKey && !isFunc(getCacheKey)))\n    return console.error('Error: Expected a function', func, getCacheKey)\n\n  let memorized = function () {\n    const cache = memorized.cache\n    const key = getCacheKey ? getCacheKey.apply(this, arguments) : arguments[0]\n\n    if (hasOwn(cache, key)) return cache[key]\n\n    const result = func.apply(this, arguments)\n\n    isNum(limit) && Object.keys(cache).length < limit\n      ? (cache[key] = result)\n      : (memorized.cache = { [key]: result })\n\n    return result\n  }\n\n  memorized.cache = {}\n  memorized.destroy = () => {\n    getCacheKey = undefined\n    memorized.cache = undefined\n    memorized.destroy = undefined\n    memorized = undefined\n  }\n\n  return memorized\n}\n","/**\n * Returns the result of evaluation `num` modulo `divisor`.\n * Javascript's built-in modulo (%) operator does not process values\n * correctly when they are negative. This works properly with\n * negatives numbers.\n * @function\n * @param {Number} num\n * @param {Number} divisor\n * @return {number?} the modulo result. Should be equivalent to\n * return values from the `%` operator, except with negative `num` values.\n * @example\n * -1 % 10      // -1\n * mod(-1, 10)  // 9\n */\nexport const mod = (num, divisor) => {\n  return ((num % divisor) + divisor) % divisor\n}\n","/**\n * Reusable empty function that is a no-op\n * @function\n * @returns {void}\n */\nexport const noOp = () => {}\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\nimport { toNum } from './toNum'\n\n/**\n * Finds the number ext base on the passed in number.\n * @example\n * nth(1)\n * // Returns 'st'\n * @example\n * nth(2)\n * // Returns 'nd'\n * @example\n * nth(5)\n * // Returns 'th'\n * @function\n * @param {Number} num - value to check\n * @return {String} ext of the number\n */\nexport const nth = num => {\n  if (!isNum(num)) {\n    num = getNums(num)\n    if (!num) return ''\n    num = toNum(num)\n    if (equalsNaN(num)) return ''\n  }\n\n  const mod = num % 100\n  if (mod >= 10 && mod <= 20) return 'th'\n\n  switch (num % 10) {\n  case 1:\n    return 'st'\n  case 2:\n    return 'nd'\n  case 3:\n    return 'rd'\n  default:\n    return 'th'\n  }\n}\n","import { reduceObj } from '../object/reduceObj'\nimport { isStr } from '../string/isStr'\nimport { isNum } from '../number/isNum'\nimport { isBool } from '../boolean/isBool'\nimport { isColl } from '../collection/isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Converts the input object to url querystring\n * @param {Object} obj - object with kvp to convert into a querystring\n * @function\n * @returns {String} querystring\n */\nexport const objToQuery = obj => {\n  let firstSet\n  return reduceObj(\n    obj,\n    (key, value, urlStr) => {\n      if (!value) return urlStr\n\n      const useVal =\n        isStr(value) || isNum(value) || isBool(value)\n          ? value\n          : isColl(value)\n            ? isArr(value)\n              ? value.join(',')\n              : JSON.stringify(value)\n            : null\n\n      if (!useVal) return urlStr\n\n      urlStr = !firstSet\n        ? `?${encodeURIComponent(key)}=${encodeURIComponent(useVal)}`\n        : `${urlStr}&${encodeURIComponent(key)}=${encodeURIComponent(useVal)}`\n      firstSet = true\n\n      return urlStr\n    },\n    ''\n  )\n}\n","import { isObj } from './isObj'\nimport { reduceObj } from './reduceObj'\n\n/**\n * Creates a new object from passed in object with keys not defined from array.\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @return {Object} new object with only keys not in array\n */\nexport const omitKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    reduceObj(\n      obj,\n      (key, _, updated) => {\n        keys.indexOf(key) === -1 && (updated[key] = obj[key])\n\n        return updated\n      },\n      {}\n    )) ||\n  {}\n","import { isNonNegative } from '../number/isNonNegative'\nimport { validate } from '../validation'\nimport { isArr } from './isArr'\n\n/**\n * Returns a new array with the same elements as arr, excluding `count` elements beginning at index `startIndex`\n * @function\n * @param {Array} arr\n * @param {Number} startIndex\n * @param {Number} count\n */\nexport const omitRange = (arr, startIndex, count) => {\n  const [inputIsValid] = validate(\n    { arr, startIndex, count },\n    { arr: isArr, $default: isNonNegative }\n  )\n\n  if (!inputIsValid) return arr\n\n  const nextArr = [...arr]\n\n  nextArr.splice(startIndex, count)\n\n  return nextArr\n}\n","import { isStr } from '../string/isStr'\nimport { isObj } from '../object/isObj'\nimport { isEmpty } from '../ext/isEmpty'\n\n/**\n * Extracts the message from the exception, whether string or object\n * @function\n * @param {*} exception - Error to be extracted\n * @return {string?} - The message or null if no message is present\n * @example\n * try {\n *   throwSomeException()\n * }\n * catch (err) {\n *   const message = parseErrorMessage(err) || 'Error'\n * }\n */\nexport const parseErrorMessage = exception => {\n  return isStr(exception) && !isEmpty(exception)\n    ? exception\n    : isObj(exception)\n      ? exception.message\n      : null\n}\n","/**\n * Convert JSON string into object, wrapped in a try / catch.\n * @function\n * @param {String} string\n * @return {Object} - JSON object\n */\nexport const parseJSON = (str, logErr = true) => {\n  try {\n    return JSON.parse(str)\n  }\n  catch (e) {\n    logErr && console.error(e.message)\n    return null\n  }\n}\n","import { isObj } from './isObj'\n\n/**\n * Creates a new object from passed in object with keys defined from array.\n * @function\n * @param {Object} obj - object to pull keys from\n * @param {Array} keys - keys to add to new object\n * @return {Object} new object with only keys from passed in keys array\n */\nexport const pickKeys = (obj = {}, keys = []) =>\n  (isObj(obj) &&\n    keys.reduce((updated, key) => {\n      key in obj && (updated[key] = obj[key])\n\n      return updated\n    }, {})) ||\n  {}\n","/**\n * Adds an `s` to the end of a string, if one does not exist.\n * @function\n * @param {String} str - string to convert\n * @return {String} string as a plural\n */\nexport const plural = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] !== 's' ? str + 's' : str\n}\n","import { isArr } from './isArr'\n\n/**\n * Randomly selects values from a passed in array.\n * @function\n * @example\n * randomArr([1,2,3], 1)\n * // Returns an array with one of the values in the passed in array\n * @param {Array} arr - array to select values from\n * @param {Number} [amount] - number of values to select from the array\n * @return {Array} - randomly sorted array\n */\nexport const randomArr = (arr, amount) => {\n  if (!isArr(arr)) return arr\n\n  const useAmount = amount || 1\n  const randoms = []\n  for (let i = 0; i < useAmount; i++) {\n    randoms.push(arr[Math.floor(Math.random() * arr.length)])\n  }\n\n  return !amount ? randoms[0] : randoms\n}\n","import { isArr } from './isArr'\n\n/**\n * Randomly sorts an arrays items.\n * @function\n * @example\n * randomizeArr([1,2,3])\n * // Returns an array randomly sorted\n * @param {Array} arr - array to randomly sorted\n * @return {Array} - randomly sorted array\n */\nexport const randomizeArr = arr =>\n  (!isArr(arr) && arr) || arr.sort(() => 0.5 - Math.random())\n","import { isFunc } from '../method/isFunc'\nimport { isColl } from './isColl'\nimport { isArr } from '../array/isArr'\n\n/**\n * Loops over collection and calls reduce.\n * @example\n * reduceColl([1, 2, 3], (key, val, coll) => { console.log(key) }, {})\n * // Returns what ever is returned from the last iteration of the reduce loop\n * @function\n * @param {Object|Array} obj - Object to loop over its keys\n * @param {Function} cb - Predicate function to call for each key of the collection\n * @param {*} [reduce] - Starting data passed to reduce method\n * @return {Object} - Last returned data from the loop\n */\nexport const reduceColl = (coll, cb, reduce) =>\n  isFunc(cb) && isColl(coll)\n    ? Object.keys(coll).reduce(\n      (data, key) => cb(key, coll[key], coll, data),\n      reduce\n    )\n    : isArr(coll)\n      ? []\n      : {}\n","import { deepClone } from './deepClone'\nimport { isFunc } from '../method/isFunc'\nimport { isNum } from '../number/isNum'\n\n/**\n * Returns an array composed of element repeated \"times\" times. If element is a function, it will be called.\n * <br/>Note: if you simply want to run a function some number of times, without returning an array of its results, @see Method.doIt\n * @param {*} element - A value or a function. If it is a function, repeat will call it each repeated time\n * @param {Number} times - Number of times that element should be included/called for the resulting array. Anything less than or equal to 0, or not a number, will return an empty array.\n * @function\n * @param {Boolean} cloneDeep - If true, it will deeply clone the element for every instance in the resulting array\n * @returns {Array} - An array of repeated elements or results from the function call\n * @example repeat(1, 3) // returns [1, 1, 1]\n * @example repeat(() => 2 * 2, 3) // returns [4, 4, 4]\n */\nexport const repeat = (element, times, cloneDeep = false) => {\n  if (!times || times <= 0) return []\n  if (!isNum(times)) {\n    console.error('Times argument must be a number')\n    return []\n  }\n  const arr = []\n  for (let i = 0; i < times; i++) {\n    const value = isFunc(element)\n      ? element()\n      : cloneDeep\n        ? deepClone(element)\n        : element\n    arr.push(value)\n  }\n  return arr\n}\n","import { validate } from '../validation/validate'\nimport { isArr } from '../array/isArr'\nimport { isFunc } from './isFunc'\nimport { deepClone } from '../collection/deepClone'\n\n/**\n * Calls each promise-returning function in array `asyncFns`,\n * but awaits each before calling the next. Will pass the\n * index and resolved values of complete functions to each subsequent\n * function, in case any need them.\n * @function\n * @param {Array<Function>} asyncFns - array of functions to call in sequence.\n * Each will be passed (currentIndex, resultsSoFar)\n * @param {boolean?} [options.cloneResults=false] - if true, each function will be\n * passed a deep clone of the results array, rather than the reference to it.\n * @param {boolean?} [options.returnOriginal=true] - if true, any member of asyncFns that\n * is not a function will have its corresponding value in the return array be itself.\n * If this is false, that value will be undefined.\n * @return {Promise<Array<*>>} - returns a promise that resolves to an array of all the\n * asyncFns' return values\n * @example\n * const results = await runSeq(asyncFunctions)\n * @example\n * const results = await runSeq(asyncFunctions, { cloneResults: true, returnOriginal: false })\n */\nexport const runSeq = async (asyncFns = [], options = {}) => {\n  const [valid] = validate({ asyncFns }, { asyncFns: isArr })\n  if (!valid) return []\n\n  const { cloneResults = false, returnOriginal = true } = options\n\n  const results = []\n\n  for (const fn of asyncFns) {\n    const result = isFunc(fn)\n      ? await fn(results.length, cloneResults ? deepClone(results) : results)\n      : returnOriginal\n        ? fn\n        : undefined\n    results.push(result)\n  }\n\n  return results\n}\n","import { sanitize } from '../string/sanitize'\n\n/**\n * Sanitizes all html strings in an object's properties.\n * @function\n * @param {Object} obj - Object to be sanitize\n * @return {Object} - obj with strings sanitized\n */\nexport const sanitizeCopy = obj => JSON.parse(sanitize(JSON.stringify(obj)))\n","import { get } from './get'\nimport { isArr } from '../array/isArr'\nimport { isStr } from '../string/isStr'\nimport { isColl } from './isColl'\n\n/**\n * Compares a collection's keys / values with another collections keys / values\n * @example\n * shallowEqual({ foo: 'bar' }, { foo: 'bar' })\n * // Returns true\n * @example\n * shallowEqual({ foo: 'bar', baz: {} }, { foo: 'bar', baz: {} })\n * // Returns false, because the baz values are different objects\n * @example\n * // Works with array too\n * shallowEqual([ 1, 2 ], [ 1, 2 ])\n * // Returns true\n * @example\n * shallowEqual([{ foo: 'bar' }], [{ foo: 'bar' }])\n * // Returns false, because the objects in index 0 are different\n * @example\n * // Pass a path to compare instead of the root\n * shallowEqual({ foo: { bar: { baz: 'biz' }}}, { foo: { bar: { baz: 'biz' }}}, 'foo.bar')\n * // Returns true, because the bar object is compared\n * @function\n * @param {Object|Array} col1 - Collection to compare\n * @param {Object|Array} col2 - Collection to compare\n * @param {Array|string} path - Path of object to compare. Uses the get method to find the path\n *\n * @returns {Boolean} - true or false if the objects keys values are equal\n */\nexport const shallowEqual = (col1, col2, path) => {\n  // If a path is passed in, update the collections to be that path\n  if (path && (isArr(path) || isStr(path))) {\n    col1 = get(col1, path)\n    col2 = get(col2, path)\n  }\n\n  // If the objects are the same, so return true\n  if (col1 === col2) return true\n\n  // Ensure the objects exist, and they have keys we can compare\n  if (!col1 || !isColl(col1) || !col2 || !isColl(col2)) return false\n\n  // If they have different key lengths, then they are not equal\n  if (Object.keys(col1).length !== Object.keys(col2).length) return false\n\n  // Loop the keys, and ensure the other collection has the key and it's value is the same\n  for (const key in col1) if (col1[key] !== col2[key]) return false\n\n  // Keys and values are equal, so return true\n  return true\n}\n","/**\n * Remove an `s` at the end of a string, if the last char is an `s`,\n * @function\n * @param {String} str - string to convert\n * @return {String} string as singular\n */\nexport const singular = str => {\n  if (!str || !str.length) return str\n  return str[str.length - 1] === 's' ? str.slice(0, str.length - 1) : str\n}\n","import { delimitString } from './delimitString'\n\n/**\n * Converts a string to snake_case.\n * @function\n * @param {String} str - String to be converted\n * @example\n * snakeCase('fooBar') === 'foo_bar'\n * @returns {String} - The string in snake_case, or the input if it is not a string\n */\nexport const snakeCase = str => {\n  const underscored = delimitString(str, '_')\n  return underscored.toLowerCase()\n}\n","import { isFunc } from '../method/isFunc'\nimport { pipeline } from '../method/pipeline'\nimport { isObj } from './isObj'\n\n/**\n * Like \"some\" for arrays, but operates across each entry in obj\n * @function\n * @param {Object} obj - Object to have it's properties checked\n * @param {Function} predicate of form (key, value) => boolean. Returns true or false for the entry\n * @param {Boolean} [logError=true] - Boolean indicating if errors should be logged\n * @returns {Boolean} - True if at least one entry satisfied the predicate, false if not\n */\nexport const someEntry = (obj, predicate, logError = true) => {\n  if (!isObj(obj)) {\n    logError && console.error(`First argument ${obj} must be an object.`)\n    return false\n  }\n\n  if (!isFunc(predicate)) {\n    logError && console.error(`Second argument ${predicate}, must a function`)\n    return false\n  }\n\n  return pipeline(obj, Object.entries, entries =>\n    entries.some(([ key, value ]) => predicate(key, value))\n  )\n}\n","import { isStr } from './isStr'\nimport { isArr } from '../array/isArr'\n\n/**\n * Joins strings and array of string together with spaces\n * @function\n * @param {String} original - The default string that other strings get added to\n * @param {string|Array} toAdd - String of Array of Strings to add to the original\n *\n * @returns {String} Joined strings seperated by space\n */\nexport const spaceJoin = (original, toAdd) => {\n  toAdd = isArr(toAdd) ? toAdd : [toAdd]\n  return toAdd.reduce(\n    (joined, item) => {\n      return isStr(item)\n        ? `${joined ? joined + ' ' : ''}${item}`.trim()\n        : joined\n    },\n    isStr(original) ? original : ''\n  )\n}\n","import { isObj } from './isObj'\nimport { exists } from '../ext/exists'\nimport { toStr } from '../string/toStr'\nimport { reduceObj } from './reduceObj'\nimport { ensureArr } from '../array/ensureArr'\n\n/**\n * Creates an intersection of the passed in object, based on the passed in keys\n * @function\n * @param {Object} target - object to pull keys from\n * @param {Array} keys - keys to not add to new object\n * @example\n * const [matching, nonMatching] = splitByKeys({ 1: 'match', 2: 'non-matching' }, [ 1 ])\n * matching === { 1: 'match' } === true\n * nonMatching === { 2: 'non-matching' }  === true\n *\n * @return {Array<Object>} - First object contains keys matching keys of the keys argument\n *                          - Second object contains keys not matching keys of the keys argument\n */\nexport const splitByKeys = (obj = {}, keys) => {\n  if (!keys) return [{}, { ...obj }]\n\n  const intersect = [{}, {}]\n  const compareKeys = ensureArr(keys)\n\n  return isObj(obj)\n    ? reduceObj(\n      obj,\n      (key, _, updated) => {\n        exists(compareKeys.find(k => exists(k) && toStr(k) === key))\n          ? (updated[0][key] = obj[key])\n          : (updated[1][key] = obj[key])\n\n        return updated\n      },\n      intersect\n    )\n    : intersect\n}\n","import { isStr } from './isStr'\nimport { camelCase } from './camelCase'\n\n/**\n * Converts a string to css in js format.\n * Useful for converting css rules into js format, I.E. margin-top => marginTop.\n * @function\n * @param {String} str - string to be converted\n * @return {String} - string in style case format\n */\nexport const styleCase = str => {\n  if (!isStr(str)) return str\n\n  const cased = camelCase(str)\n  return `${cased[0].toLowerCase()}${cased.slice(1)}`\n}\n","/**\n * Throttle function calls to only execute once over a wait period\n * @example\n * throttle(() => console.log('throttled'), 50)()\n * @function\n * @param {*} func - method to call after wait\n * @param {Number} [wait=100] time to wait between calls\n * @return {Function} throttled function\n */\nexport const throttle = (func, wait = 100) => {\n  let waiting = false\n  return function (...args) {\n    if (waiting) return\n    waiting = true\n    func.apply(this, args)\n    return setTimeout(() => {\n      waiting = false\n    }, wait)\n  }\n}\n","/**\n * Ensures the last call to the throttled function get called.\n * <br/>Will wait the allotted time, before calling the last call to it.\n * <br/>The final call will not execute until no more calls are made,\n * <br/>Accepts a callback to call each time the throttle called,\n * @example\n * throttleLast(() => {}, () => {})()\n * // throttle function\n * @function\n * @param {Function} func - method to call after wait\n * @param {Function} cb - method to call after throttle function is called\n * @param {Number} [wait=100] time to wait until executing func param\n * @return {Function} throttled function\n */\nexport const throttleLast = (func, cb, wait = 100) => {\n  let throttleTimeout\n  return function (...args) {\n    // If the throttle already exists clear it, and create it again\n    if (throttleTimeout) clearTimeout(throttleTimeout)\n    // Store a reference to the timeout\n    // Will wait the allotted time until calling the final call to it\n    throttleTimeout = setTimeout(() => {\n      func.apply(this, args)\n      clearTimeout(throttleTimeout)\n    }, wait)\n    typeof cb === 'function' && cb()\n  }\n}\n","import { validate } from '../validation/validate'\nimport { isFunc } from './isFunc'\n\n/**\n * Executes and times the function `fn`.\n * @function\n * @param {Function} fn\n * @param {...*?} args - any number of arguments to pass to fn when it is called\n * @return {Promise<Array<*, number>>} [ fn output, execution time in ms ]\n * @example\n * const [ result, executionTime ] = timedRun(() => http.get(url)))\n * @example\n * const [ result, executionTime ] = timedRun(http.get, url)\n */\nexport const timedRun = async (fn, ...args) => {\n  const [valid] = validate({ fn }, { fn: isFunc })\n  if (!valid) return [ undefined, -1 ]\n\n  const startTime = new Date()\n  const result = await fn(...args)\n  return [ result, new Date() - startTime ]\n}\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to a float.\n * @example\n * toFloat('1.34')\n * // Returns 1.34\n * @example\n * toFloat(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to an float\n */\nexport const toFloat = val =>\n  (val && !equalsNaN(val) && parseFloat((isNum(val) && val) || getNums(val))) ||\n  0\n","import { equalsNaN } from './equalsNaN'\nimport { isNum } from './isNum'\nimport { getNums } from './getNums'\n\n/**\n * Converts passed in value to an integer.\n * @example\n * toInt('1')\n * // Returns 1\n * @example\n * toInt(NaN)\n * // Returns 0\n * @function\n * @param {*} val - value to convert\n * @return {Number} value converted to a integer\n */\nexport const toInt = val =>\n  (val && !equalsNaN(val) && parseInt((isNum(val) && val) || getNums(val))) || 0\n","import { isStr } from '../string/isStr'\nimport { isArr } from '../array/isArr'\nimport { strToType } from '../ext/strToType'\n\n/**\n * Converts an array or string into an object.\n * @function\n * @param { array | string } val - to be converted to object\n * @param {String} [divider] - if string, what divides key from value\n * @param {String} [split] - if string, what splits each key/value pair\n * @return {Object} - Converted object\n */\nexport const toObj = (val, divider, split) => {\n  if (isArr(val))\n    return Object.keys(val).reduce((obj, key) => {\n      obj[key] = val[key]\n\n      return obj\n    }, {})\n\n  if (!isStr(val)) return {}\n\n  divider = divider || '='\n  split = split || '&'\n  return val\n    .toString()\n    .split(split)\n    .reduce((obj, item) => {\n      const sep = item.split(divider)\n      obj[sep[0].trim()] = strToType(sep[1].trim())\n\n      return obj\n    }, {})\n}\n","import { isStr } from './isStr'\n\n/**\n * Converts a string to train case, I.E. marginTop => margin-top.\n * @function\n * @param {String} string to be converted\n * @return {String} - string in train case format\n */\nexport const trainCase = str =>\n  (isStr(str) &&\n    str\n      .split(/(?=[A-Z])|[\\s_-]/gm)\n      .join('-')\n      .toLowerCase()) ||\n  str\n","import { isStr } from '../string/isStr'\n\n/**\n * Trims objects string fields.\n * @function\n * @param {Object} object\n * @return {Object} - object with string fields trimmed\n */\nexport const trimStringFields = object =>\n  Object.entries(object).reduce((cleaned, [ key, value ]) => {\n    cleaned[key] = isStr(value) ? value.trim() : value\n    return cleaned\n  }, object)\n","import { updateColl } from './updateColl'\n\n/**\n * Removes a path from an object.\n * @example\n * unset(obj, 'foo.bar')\n * // Returns the passed in obj, with the value of bar set to undefined\n * @function\n * @param {Object} obj - Object to have the attribute removed\n * @param {String|Array} path - Path of attribute to be removed, separated by string\n * @return {Object} - The passed in object, with the attribute found at the path removed\n */\nexport const unset = (obj, path) => updateColl(obj, path, 'unset')\n","/**\n * Checks whether a given string is a valid filename\n * @function\n * @param {String} fileName - The file name to check if valid\n *\n * @returns {Boolean}\n */\nexport const validFilename = fileName => {\n  if (!fileName) return false\n  // On Unix-like systems '/' is reserved\n  // and <>:\"/\\|?* as well as non-printable characters \\u0000-\\u001F on Windows\n  const regex = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g\n\n  // invalid Windows filenames\n  const windowsRegex = /^(con|prn|aux|nul|com\\d|lpt\\d)$/i\n\n  // starts with period\n  const periodRegex = /^\\.\\.?$/\n\n  return regex.test(fileName) ||\n    windowsRegex.test(fileName) ||\n    periodRegex.test(fileName)\n    ? false\n    : true\n}\n","'use strict'\n\n/**\n * Stops execution for a given amount of time\n * @function\n * @param {Number} time - Amount of time to wait\n * @return { void }\n */\nexport const wait = time =>\n  new Promise(res => setTimeout(() => res(true), time))\n","import { isStr } from './isStr'\nimport { cleanStr } from './cleanStr'\nimport { capitalize } from './capitalize'\n\n/**\n * Converts all words in a string to be capitalized.\n * @function\n * @param {String} string to be converted\n * @return {String} - string with all words capitalized\n */\nexport const wordCaps = str => {\n  if (!isStr(str)) return str\n  let cleaned = cleanStr(str)\n  return cleaned\n    .split(' ')\n    .map(word => (word && capitalize(word)) || '')\n    .join(' ')\n}\n"],"names":["OPTIONS","SHOULD_LOG","SHOULD_THROW","LOG_PREFIX","defaultValidator","validate","argObj","validators","options","logs","throws","prefix","validationResults","Object","entries","map","argName","argValue","validateArgument","$default","success","cases","reduce","total","next","validationReducer","setOptions","undefined","resetOptions","key","value","validator","validatorString","name","toString","reason","finalResult","nextValidation","handleFailure","validation","shouldLog","shouldThrow","Error","join","console","error","isArr","Array","isArray","buildElementCountMap","arr","counts","Map","i","length","element","count","get","set","areCountMapsEqual","mapA","mapB","size","isObj","obj","ensureArr","val","isFunc","func","deepFreeze","freeze","getOwnPropertyNames","prop","hasOwnProperty","isFrozen","noOpObj","noPropObj","content","noPropArr","noOpArr","exists","flatten","result","opts","truthy","push","mutate","assign","splice","flatArr","applyToFunc","item","expression","args","pipeline","functions","fn","isStr","str","mapString","charMapper","char","isLowerCase","toLowerCase","isUpperCase","toUpperCase","delimitString","delimiter","delimiters","isDelimiter","c","some","del","prevChar","capitalize","lowercaseTail","tail","slice","removeDot","string","noDot","indexOf","cleanStr","replace","camelCase","compCase","split","cased","word","index","toStr","JSON","stringify","uppercasePattern","msPattern","hyphenCache","toHyphenLower","match","equalsNaN","isNum","isNonNegative","sanitize","isColl","updateColl","path","type","org","parts","from","pop","breakPath","shift","fallback","template","tempStr","data","regex","exact","substr","trim","replaceWith","quoteSymbols","reverseStr","reversed","getNearestDelimiterIndex","text","sort","find","idx","getWordStartingAt","endingSpaceIdx","substring","isBool","isStrBool","convertToStrBool","softFalsy","Boolean","toBool","getNums","toNum","Number","isOrderable","x","compareTo","y","valid","localeCompare","identity","hasOwn","prototype","call","cloneFunc","funcClone","apply","defineProperty","configurable","deepClone","hash","WeakMap","Set","has","Date","RegExp","source","flags","constructor","create","cloneObjWithPrototypeAndProperties","keys","objectWithPrototype","getPrototypeOf","sourceDescriptors","getOwnPropertyDescriptors","descriptor","clone","isSealed","seal","uuid","a","Math","random","typeOf","matchArg","entry","caseValueOrPredicate","valueOnMatch","default","isEmpty","findExtrema","comparator","extremaSoFar","uniqArrByReference","filter","e","uniqArr","selector","unique","id","add","cleanColl","coll","recursive","cleaned","keyList","hasProp","deepEqual","b","arrA","arrB","dateA","dateB","getTime","regexpA","regexpB","strToType","parse","SHOW_LOGS","METH_DEF","PREFIX","LOG_TYPES","logData","clearObj","deepMerge","sources","merged","srcCopy","joined","isEntry","maybeEntry","mapEntries","cb","initialValue","reduceObj","start","promisify","method","Promise","res","rej","cbData","defObjProps","concat","functionName","addAsync","object","__IS_PROMISIFIED__","getValue","getOwnPropertyDescriptor","isRegex","getRegexSource","maybeRx","queryToObj","currentQueryItems","stringSplit","querystring","components","itemSplit","array","decodeURIComponent","mutatorCb","warn","otherArr","arrCounts","otherCounts","longest","shortest","arrSet","arg","camelCasedSplit","params","message","predicate","fromIndex","wait","immediate","timeout","context","this","callNow","clearTimeout","setTimeout","num","bindTo","doItAmount","responses","val1","val2","check","func1","func2","obj1","obj2","str1","str2","logError","every","propSelector","mapFn","inputIsValid","finalArr","current","el","last","compare","paramKey","doc","document","search","location","_doc$location","_queryToObj","reversedIndex","window","createElement","maxLength","reverse","charCodeAt","abs","rule","hRule","test","values","quotes","quote","startsWith","endsWith","date","isNaN","expressions","parseArgs","nextSource","one","two","use","promise","then","catch","err","mapper","testFunc","mappedValue","mapFindObj","mapFindArr","keyMapper","getCacheKey","limit","memorized","cache","arguments","destroy","divisor","mod","firstSet","urlStr","useVal","encodeURIComponent","_","updated","startIndex","nextArr","exception","logErr","proto","amount","useAmount","randoms","floor","times","cloneDeep","async","asyncFns","cloneResults","returnOriginal","results","log","methDef","col1","col2","original","toAdd","intersect","compareKeys","k","rx","orgRx","resp","waiting","throttleTimeout","startTime","parseFloat","parseInt","divider","sep","fileName","time"],"mappings":"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"}