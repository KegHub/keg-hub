{"version":3,"file":"useOutsideDetect.js","sources":["../../../src/hooks/useOutsideDetect/useOutsideDetect.js"],"sourcesContent":["import { useEffect } from 'react'\n\n/**\n *\n * @param {Event} evt - event object\n * @param {RefObject} ref - element to check\n * @returns {boolean} - true if event occured outside of element stored at ref.current\n */\nconst eventIsOutside = (evt, ref) => {\n  return ref?.current && !ref.current.contains(evt.target)\n}\n\n/**\n * Listens for the user clicking outside the element stored in `ref`. If it detects a click,\n * then it calls onOutsideClick.\n * @param {RefObject} ref - ref object storing a DOM Node\n * @param {Function?} onOutsideClick - fn of form (event) => {}\n */\nexport const useOutsideDetect = (ref, onOutsideClick) => {\n  useEffect(() => {\n    // alert if clicked outside of element stored at ref\n    const handleClickOutside = event =>\n      eventIsOutside(event, ref) && onOutsideClick?.(event)\n\n    document.addEventListener('mousedown', handleClickOutside)\n\n    return () => document.removeEventListener('mousedown', handleClickOutside)\n  }, [ ref, onOutsideClick ])\n}\n"],"names":["eventIsOutside","evt","ref","current","contains","target","useOutsideDetect","onOutsideClick","useEffect","handleClickOutside","event","document","addEventListener","removeEventListener"],"mappings":";;;;;;AAQA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,GAAN,EAAc;AACnC,SAAO,CAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEC,OAAL,KAAgB,CAACD,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqBH,GAAG,CAACI,MAAzB,CAAxB;AACD,CAFD;IAUaC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,GAAD,EAAMK,cAAN,EAAyB;AACvDC,EAAAA,eAAS,CAAC,YAAM;AAEd,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK;AAAA,aAC9BV,cAAc,CAACU,KAAD,EAAQR,GAAR,CAAd,KAA8BK,cAA9B,aAA8BA,cAA9B,uBAA8BA,cAAc,CAAGG,KAAH,CAA5C,CAD8B;AAAA,KAAhC;AAGAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCH,kBAAvC;AAEA,WAAO;AAAA,aAAME,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CJ,kBAA1C,CAAN;AAAA,KAAP;AACD,GARQ,EAQN,CAAEP,GAAF,EAAOK,cAAP,CARM,CAAT;AASD;;;;"}