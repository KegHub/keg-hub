{"version":3,"file":"withScrollIntoView.js","sources":["../../../src/hocs/withScrollIntoView.js"],"sourcesContent":["import React, { useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { getPlatform } from 'KegGetPlatform'\nimport { useScrollIntoView } from 'KegHooks'\n\n/**\n * Wraps `Component` such that it is\n * scrolled into view within its surrounding list\n * if the caller passes in a `scrollIntoView={true}` prop\n * @param {Function} Component - component to wrap. Must be a component that accepts a ref,\n * pointing to the underlying Element.\n * @param {boolean|Object} defaultOptions - Default scroll options.\n *  See: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView#parameters\n * @return {Function} - wrapped component, with same props as `Component` and two additional:\n *   - scrollIntoView: if true, this component will scroll into view\n *   - scrollOptions: if defined, will overwrite defaultOptions\n */\nexport const withScrollIntoView = (Component, defaultOptions = true) => {\n  // This hoc is unsupported on native platforms, nor should it be needed.\n  // On native, the user scrolls via swiping. There\n  // isn't a keyboard arrow cluster for secondary scrolling.\n  if (getPlatform() !== 'web') return Component\n\n  const Wrapped = props => {\n    const {\n      scrollIntoView = false,\n      scrollOptions = undefined,\n      ...clientProps\n    } = props\n\n    const options = scrollOptions !== undefined ? scrollOptions : defaultOptions\n\n    const ref = useRef()\n\n    useScrollIntoView(ref, scrollIntoView, options)\n\n    return <Component\n      ref={ref}\n      {...clientProps}\n    />\n  }\n\n  Wrapped.propTypes = {\n    ...Component.propTypes,\n    scrollIntoView: PropTypes.bool,\n    scrollOptions: PropTypes.oneOfType([ PropTypes.bool, PropTypes.object ]),\n  }\n\n  return Wrapped\n}\n"],"names":["withScrollIntoView","Component"],"mappings":";;;;;;;;;;;;;IAiBaA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAsC;AAItE,EAA6B,OAAOA,SAAP;AA4B9B;;;;"}