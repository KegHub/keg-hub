{"version":3,"file":"svgIcon.native-c05f2e64.js","sources":["../../../src/components/svgIcon/svgIcon.native.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useMemo } from 'react'\nimport Svg, { Path } from 'react-native-svg'\nimport { isArr, isStr, noPropObj, eitherArr } from '@keg-hub/jsutils'\nimport { getPlatform } from 'KegGetPlatform'\nconst isWeb = getPlatform() === 'web'\n\nconst defClass = 'keg-svg-icon'\n\n/**\n * Custom hook to get the classes for the SVG component on web\n * @param {Array|string=} className - Class name(s) to add\n *\n * @returns {Object} - Contains a className prop if on a web platform, otherwise it's empty\n */\nconst useClassName = className => {\n  if (!isWeb) return noPropObj\n\n  const deps = eitherArr(className, [className]).join(' ')\n  return useMemo(() => {\n    const classes = isArr(className)\n      ? className.join(' ')\n      : isStr(className)\n        ? className\n        : ''\n    return {\n      className: classes.includes(defClass)\n        ? classes\n        : `${defClass} ${classes}`,\n    }\n  }, [deps])\n}\n\n/**\n * SvgIcon\n * @param {object} props\n * @param {string} props.border - Used as the stroke color when no stroke prop is passed\n * @param {string=} props.color - Color of the Svg component\n *                              - Used as the stroke color when no stroke prop is passed\n *                              - Used as the fill color when no fill prop is passed\n * @param {string=} props.clipRule - Svg rule for clipping\n * @param {string=} props.delta - Path definition for the Svg Component. If omitted, no Path element is rendered.\n * @param {string=} props.fill - Fill color of the path element\n * @param {string=} props.fillRule - Svg rule for the fill attribute\n * @param {string=} props.size - Size of the Svg Component\n * @param {string=} props.stroke - Color of the stroke for the path element\n * @param {Object=} props.style - Style object used to apply custom styles to the component\n * @param {string=} props.style.border - Used as the stroke color when no stroke or border prop is passed\n * @param {string=} props.style.color - Used as the fill color when no fill or color prop is passed\n * @param {string=} props.svgFill - Fill color of the parent SVG element\n * @param {string=} props.viewBox - View box size of the parent SVG element\n *\n */\nexport const SvgIcon = React.forwardRef((props, ref) => {\n  const {\n    className,\n    clipRule,\n    delta,\n    fill,\n    fillRule,\n    height,\n    stroke,\n    strokeWidth,\n    strokeLinecap,\n    strokeLinejoin,\n    style = noPropObj,\n    svgFill,\n    viewBox,\n    width,\n    children,\n    ...attrs\n  } = props\n\n  const classProps = useClassName(className)\n\n  return (\n    <Svg\n      {...attrs}\n      {...classProps}\n      height={height}\n      width={width}\n      fill={svgFill}\n      viewBox={viewBox}\n      style={style}\n    >\n      { delta && (\n        <Path\n          clipRule={clipRule}\n          d={delta}\n          fill={fill}\n          fillRule={fillRule}\n          stroke={stroke}\n          strokeWidth={strokeWidth}\n          strokeLinecap={strokeLinecap}\n          strokeLinejoin={strokeLinejoin}\n        />\n      ) }\n      { children }\n    </Svg>\n  )\n})\n\nSvgIcon.propTypes = {\n  border: PropTypes.string,\n  className: PropTypes.oneOfType([ PropTypes.string, PropTypes.array ]),\n  color: PropTypes.string,\n  clipRule: PropTypes.string,\n  delta: PropTypes.string,\n  fill: PropTypes.string,\n  fillRule: PropTypes.string,\n  size: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]),\n  stroke: PropTypes.string,\n  style: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n  svgFill: PropTypes.string,\n  viewBox: PropTypes.string,\n}\n\nexport * from 'react-native-svg'\n"],"names":["useClassName","className","noPropObj","SvgIcon","React","forwardRef","props","ref","clipRule","delta","fill","fillRule","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","style","svgFill","viewBox","width","children","attrs","classProps","Svg"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,SAAS,EAAI;AAChC,EAAY,OAAOC,SAAP;AAeb,CAhBD;IAsCaC,OAAO,GAAGC,cAAK,CAACC,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACtD,EAiBID,KAjBJ,CACEL,SADF;AAAA,UAEEO,QAFF,GAiBIF,KAjBJ,CAEEE,QAFF;AAAA,MAGEC,KAHF,GAiBIH,KAjBJ,CAGEG,KAHF;AAAA,MAIEC,IAJF,GAiBIJ,KAjBJ,CAIEI,IAJF;AAAA,MAKEC,QALF,GAiBIL,KAjBJ,CAKEK,QALF;AAAA,MAMEC,MANF,GAiBIN,KAjBJ,CAMEM,MANF;AAAA,MAOEC,MAPF,GAiBIP,KAjBJ,CAOEO,MAPF;AAAA,MAQEC,WARF,GAiBIR,KAjBJ,CAQEQ,WARF;AAAA,MASEC,aATF,GAiBIT,KAjBJ,CASES,aATF;AAAA,MAUEC,cAVF,GAiBIV,KAjBJ,CAUEU,cAVF;AAAA,qBAiBIV,KAjBJ,CAWEW,KAXF;AAAA,MAWEA,KAXF,6BAWUf,SAXV;AAAA,MAYEgB,OAZF,GAiBIZ,KAjBJ,CAYEY,OAZF;AAAA,MAaEC,OAbF,GAiBIb,KAjBJ,CAaEa,OAbF;AAAA,MAcEC,KAdF,GAiBId,KAjBJ,CAcEc,KAdF;AAAA,MAeEC,QAfF,GAiBIf,KAjBJ,CAeEe,QAfF;AAAA,MAgBKC,KAhBL,4BAiBIhB,KAjBJ;AAmBA,MAAMiB,UAAU,GAAGvB,YAAY,CAAA,CAA/B;AAEA,SACEI,6BAACoB,YAAD,eACMF,KADN,EAEMC,UAFN;AAGE,IAAA,MAAM,EAAEX,MAHV;AAIE,IAAA,KAAK,EAAEQ,KAJT;AAKE,IAAA,IAAI,EAAEF,OALR;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,KAAK,EAAEF;AAPT,MASIR,KAAK,IACLL,6BAAC,IAAD;AACE,IAAA,QAAQ,EAAEI,QADZ;AAEE,IAAA,CAAC,EAAEC,KAFL;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,MAAM,EAAEE,MALV;AAME,IAAA,WAAW,EAAEC,WANf;AAOE,IAAA,aAAa,EAAEC,aAPjB;AAQE,IAAA,cAAc,EAAEC;AARlB,IAVJ,EAqBIK,QArBJ,CADF;AAyBD,CA/CsB;;;;;;;;;"}