{"version":3,"file":"container.js","sources":["../../../src/components/layout/container.js"],"sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }]*/\n\nimport React, { useMemo } from 'react'\nimport { View } from 'KegView'\nimport PropTypes from 'prop-types'\nimport { useStyle } from '@keg-hub/re-theme'\nimport { getPlatform, getPressHandler } from '../../utils'\nimport { pickKeys, ensureArr, noOpObj } from '@keg-hub/jsutils'\n\n/**\n * Checks the for width styles in the props styles object\n * @param {Object} style - passed in styles for the Container\n *\n * @return {boolean} - If a width style rule exists\n */\nconst useContainerStyle = (styles, flexDir, size) => {\n  const flexStyle = useMemo(() => {\n    const hasWidth =\n      styles\n        .map(style => {\n          return Boolean(\n            Object.keys(pickKeys(style, [ 'width', 'minWidth', 'maxWidth' ]))\n              .length\n          )\n        })\n        .indexOf(true) !== -1\n    // Get flex type based on size or style\n    return (\n      flexDir === 'row' && {\n        flexDirection: flexDir,\n        flex: size ? size : hasWidth ? 0 : 1,\n      }\n    )\n  }, [ ...styles, flexDir, size ])\n\n  return useStyle(flexStyle, ...styles)\n}\n\n// const style = useStyle(flexStyle, ...containerStyles)\n/**\n * Container\n * General Wrapper component that's use to build the Grid / Row / Column components\n * @param {Object} props - see PropTypes below\n *\n */\nexport const Container = ({\n  onPress,\n  onClick,\n  children,\n  flexDir,\n  size,\n  style = noOpObj,\n  ...props\n}) => {\n  const containerStyle = useContainerStyle(ensureArr(style), flexDir, size)\n\n  return (\n    <View\n      {...props}\n      style={containerStyle}\n      {...getPressHandler(getPlatform(), onClick || onPress)}\n    >\n      { children }\n    </View>\n  )\n}\n\nContainer.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.func,\n  ]),\n  flexDir: PropTypes.string,\n  onPress: PropTypes.func,\n  onClick: PropTypes.func,\n  size: PropTypes.number,\n  style: PropTypes.oneOfType([ PropTypes.object, PropTypes.array ]),\n}\n"],"names":["useContainerStyle","styles","flexDir","size","flexStyle","useMemo","hasWidth","map","style","Boolean","Object","keys","pickKeys","length","indexOf","flexDirection","flex","useStyle","Container","onPress","onClick","children","noOpObj","props","containerStyle","ensureArr","React","getPressHandler","getPlatform"],"mappings":";;;;;;;;;;;;;;;;;AAeA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAASC,OAAT,EAAkBC,IAAlB,EAA2B;AACnD,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAM;AAC9B,QAAMC,QAAQ,GACZL,MAAM,CACHM,GADH,CACO,UAAAC,KAAK,EAAI;AACZ,aAAOC,OAAO,CACZC,MAAM,CAACC,IAAP,CAAYC,QAAQ,CAACJ,KAAD,EAAQ,CAAE,OAAF,EAAW,UAAX,EAAuB,UAAvB,CAAR,CAApB,EACGK,MAFS,CAAd;AAID,KANH,EAOGC,OAPH,CAOW,IAPX,MAOqB,CAAC,CARxB,CAD8B;AAW9B,WACEZ,OAAO,KAAK,KAAZ,IAAqB;AACnBa,MAAAA,aAAa,EAAEb,OADI;AAEnBc,MAAAA,IAAI,EAAEb,IAAI,GAAGA,IAAH,GAAUG,QAAQ,GAAG,CAAH,GAAO;AAFhB,KADvB;AAMD,GAjBwB,+BAiBjBL,MAjBiB,IAiBTC,OAjBS,EAiBAC,IAjBA,GAAzB;AAmBA,SAAOc,QAAQ,MAAR,UAASb,SAAT,4BAAuBH,MAAvB,GAAP;AACD,CArBD;IA8BaiB,SAAS,GAAG,SAAZA,SAAY,OAQnB;AAAA,MAPJC,OAOI,QAPJA,OAOI;AAAA,MANJC,OAMI,QANJA,OAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJnB,OAII,QAJJA,OAII;AAAA,MAHJC,IAGI,QAHJA,IAGI;AAAA,wBAFJK,KAEI;AAAA,MAFJA,KAEI,2BAFIc,OAEJ;AAAA,MADDC,KACC;AACJ,MAAMC,cAAc,GAAGxB,iBAAiB,CAACyB,SAAS,CAACjB,KAAD,CAAV,EAAmBN,OAAnB,EAA4BC,IAA5B,CAAxC;AAEA,SACEuB,6BAAC,IAAD,eACMH,KADN;AAEE,IAAA,KAAK,EAAEC;AAFT,KAGMG,eAAe,CAACC,WAAW,EAAZ,EAAgBR,OAAO,IAAID,OAA3B,CAHrB,GAKIE,QALJ,CADF;AASD;;;;"}