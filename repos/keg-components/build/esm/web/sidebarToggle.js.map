{"version":3,"file":"sidebarToggle.js","sources":["../../../src/hooks/useWindowClick/useWindowClick.js","../../../src/components/sidebar/sidebarToggle.js"],"sourcesContent":["import { useCallback, useEffect } from 'react'\n\n/**\n * Helper to listen for click events\n * @function\n * @private\n * <br/>Checks if the sidebar should be closed based on click location\n * @param {boolean} toggled - Is the sidebar toggled open\n * @param {function} setIsToggled - Toggle the state of the sidebar open or closed\n * @param {Object} event - Native dom event\n *\n * @returns {void}\n */\nexport const useWindowClick = (cb, ...args) => {\n  const onWindowClick = useCallback(cb.bind(window, ...args), [ cb, ...args ])\n\n  useEffect(() => {\n    window.addEventListener('click', onWindowClick)\n    return () => window.removeEventListener('click', onWindowClick)\n  }, [onWindowClick])\n}\n","import React, { useMemo } from 'react'\nimport { View } from 'KegView'\nimport { Text } from '../typography/text'\nimport { useWindowClick } from 'KegUseWindowClick'\nimport { useStyle, useTheme } from '@keg-hub/re-theme'\nimport { useToggledStyles } from '../../hooks/useToggledStyles'\nimport { ToggleMain, ToggleAction, ToggleIcon } from './sidebar.restyle'\n\n/**\n * Helper to listen for click events\n * @function\n * @private\n * <br/>Checks if the sidebar should be closed based on click location\n * @param {boolean} toggled - Is the sidebar toggled open\n * @param {function} setIsToggled - Toggle the state of the sidebar open or closed\n * @param {Object} event - Native dom event\n *\n * @returns {void}\n */\nconst onWindowClick = (toggled, setIsToggled, event) => {\n  if (!toggled) return\n\n  const sideBarEl = event && event.target.closest('.sidebar-main')\n  !sideBarEl && setIsToggled(false)\n}\n\n/**\n * Styles to rotate the Icon. Defined outside the component to keep reference identity\n * @type {Object}\n */\nconst iconRotateOptions = {\n  left: {\n    on: { transform: 'rotate(90deg)' },\n    off: { transform: 'rotate(270deg)' },\n  },\n  right: {\n    on: { transform: 'rotate(270deg)' },\n    off: { transform: 'rotate(90deg)' },\n  },\n}\n\n/**\n * Helper hook to memoize the props for the Icon\n * @function\n * @private\n * @param {boolean} toggled - Is the sidebar toggled open\n * @param {Object} themeStyles - Styles built from the theme and passed in style object\n *\n * @returns {Object} - Memoized Icon props\n */\nconst useIconProps = (toggled, themeStyles, location = 'left') => {\n  const theme = useTheme()\n  const iconRotate = iconRotateOptions[location]\n  const iconStyle = useStyle(\n    themeStyles.icon,\n    toggled ? iconRotate.on : iconRotate.off\n  )\n\n  return useMemo(() => {\n    return {\n      styles: { main: iconStyle },\n      size: themeStyles?.icon?.fontSize || theme?.typography?.default?.fontSize,\n      stroke:\n        themeStyles?.icon?.c ||\n        themeStyles?.icon?.color ||\n        theme.colors.palette.white01,\n    }\n  }, [ theme, themeStyles, iconStyle ])\n}\n\n/**\n * ToggleContainer\n * @type {React.Component}\n * @param {Object} props\n * @param {string} props.text - Text to display when no icon is shown\n * @param {Object} props.styles - Defines how the component should look\n * @param {boolean} props.toggled - State of the sidebar, true if sidebar is open\n * @param {function} props.onPress - Method called when the component is pressed\n * @param {function} props.setIsToggled - Method to switch the toggled state when called\n * @param {number} props.sidebarWidth - Width of the sideBar component\n * @param {React.Component} props.Icon - Overrides the default Icon Component\n *\n */\nconst ToggleContainer = props => {\n  const {\n    to,\n    text,\n    styles,\n    initial,\n    toggled,\n    onPress,\n    location,\n    setIsToggled,\n    sidebarWidth,\n    Icon = ToggleIcon,\n    onOffClick = onWindowClick,\n  } = props\n\n  const iconProps = useIconProps(toggled, styles, location)\n  useWindowClick(onOffClick, toggled, setIsToggled)\n\n  return (\n    <ToggleAction\n      to={to}\n      initial={initial}\n      onPress={onPress}\n      location={location}\n      styles={styles?.action}\n      sidebarWidth={sidebarWidth}\n      className={`sidebar-toggle-action`}\n    >\n      { ({ hovered }) => (\n        <View\n          className={`sidebar-toggle-content`}\n          style={styles?.content}\n        >\n          { !text ? (\n            <Icon\n              {...iconProps}\n              hovered={hovered}\n            />\n          ) : (\n            <Text\n              className={`sidebar-toggle-text`}\n              style={styles?.text}\n            >\n              { text }\n            </Text>\n          ) }\n        </View>\n      ) }\n    </ToggleAction>\n  )\n}\n\n/**\n * SidebarToggle\n * @type {React.Component}\n * @param {Object} props - see Sidebar PropTypes below\n * @param {function} props.onPress - Method called when the component is pressed\n * @param {boolean} props.toggled - State of the sidebar, true if sidebar is open\n * @param {Object} props.styles - Defines how the component should look\n * @param {string} props.text - Text to display when no icon is shown\n * @param {React.Component} props.children - Components to be render as Children of this component\n * @param {function} props.setIsToggled - Method to switch the toggled state when called\n * @param {number} props.sidebarWidth - Width of the sideBar component\n *\n */\nexport const SidebarToggle = props => {\n  const {\n    to,\n    text,\n    styles,\n    initial,\n    onPress,\n    toggled,\n    location,\n    children,\n    setIsToggled,\n    sidebarWidth,\n  } = props\n\n  const joinedStyles = useStyle('sidebar.toggle', styles)\n  const toggleStyles = useToggledStyles(toggled, joinedStyles)\n\n  return (\n    <ToggleMain\n      className={`sidebar-toggle-main`}\n      style={toggleStyles?.main}\n    >\n      { children || (\n        <ToggleContainer\n          to={to}\n          text={text}\n          onPress={onPress}\n          initial={initial}\n          toggled={toggled}\n          location={location}\n          styles={toggleStyles}\n          sidebarWidth={sidebarWidth}\n          setIsToggled={setIsToggled}\n        />\n      ) }\n    </ToggleMain>\n  )\n}\n"],"names":["useWindowClick","cb","args","onWindowClick","useCallback","bind","window","useEffect","addEventListener","removeEventListener","toggled","setIsToggled","event","sideBarEl","target","closest","iconRotateOptions","left","on","transform","off","right","useIconProps","themeStyles","location","theme","useTheme","iconRotate","iconStyle","useStyle","icon","useMemo","styles","main","size","fontSize","typography","default","stroke","c","color","colors","palette","white01","ToggleContainer","props","to","text","initial","onPress","sidebarWidth","Icon","ToggleIcon","onOffClick","iconProps","React","action","hovered","content","SidebarToggle","children","joinedStyles","toggleStyles","useToggledStyles"],"mappings":"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"}