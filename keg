#!/bin/bash

# Check if the keg root dir has been set. If not, then set it
if [[ -z "$KEG_ROOT_DIR" ]]; then
  export KEG_ROOT_DIR=$HOME/keg
fi

# Set the KEG-CLI path based on the keg root directory
export KEG_CLI_PATH=$KEG_ROOT_DIR/keg-cli

# Prints message to stderr so we can do returns with echo to stdout
keg_message(){
  echo "[ KEG CLI ] $@" >&2
  return
}

# Checks if VBoxManage cli exists, and it so loads docker-machine
# Otherwise shows warning that virtual-box is not installed
keg_cli_init_docker_machine(){

  if [[ -x "$(command -v VBoxManage)" ]]; then

    local KEG_STATUS="$(timeout 10s docker-machine status $KEG_DOCKER_NAME)"

    # Ensure docker-machine is running
    if [[ "$KEG_STATUS" != "Running" ]]; then
      keg_message "Docker-machine status is $KEG_STATUS"
      keg_message "Starting docker-machine $KEG_DOCKER_NAME"
      docker-machine start $KEG_DOCKER_NAME
    fi

    # Load the docker machine env, pipe to dev/null so we don't see the output
    eval "$(docker-machine env $KEG_DOCKER_NAME)" >/dev/null 2>&1

  else
    keg_message "Error loading 'docker-machine', VBoxManage not installed!"

  fi
}

# Exports the stored GIT_KEY from the globalConfig
# First calls the getGitKey method then sets as an ENV with export
keg_export_git_key(){
  local CMD_OUTPUT="$(node $KEG_CLI_PATH/scripts/cli/getGitKey.js)"
  if [[ "$CMD_OUTPUT" ]]; then
    if [[ -z "$1" ]]; then
      keg_message "Setting GIT_KEY env!"
    fi
    export GIT_KEY=$CMD_OUTPUT
  else
    if [[ -z "$1" ]]; then
      keg_message "Could not add GIT_KEY to the current environment!"
    fi
  fi
}

# Navigates to a directory based on the passed in params
keg_cli_move_directory(){

  local CMD_OUTPUT

  # If no arguments, then $KEG_DOCKER_NAME to keg path
  if [[ "$#" == "0" ]]; then
    CMD_OUTPUT="$(node $KEG_CLI_PATH/scripts/cli/getConfigPath.js keg)"
  else
    CMD_OUTPUT="$(node $KEG_CLI_PATH/scripts/cli/getConfigPath.js $@)"
  fi

  # Convert the ouput to an array
  IFS=$'\n'
  local OUTPUT_ARR=($CMD_OUTPUT)
  unset IFS

  # Get the second line containing the path to move to
  local MOVE_TO_PATH="${OUTPUT_ARR[1]}"

  if [[ "$MOVE_TO_PATH" ]]; then
    echo "${OUTPUT_ARR[0]}"
    cd $MOVE_TO_PATH
    echo ""
    return 0
  fi

  return 1
}

# Opening to the keg cli
# For navigation commands, calls keg_cli_move_directory
# All other commands call keg-cli node script
keg(){

  # Check if reloading the bash portion of the keg cli
  if [[ "$1" == "reload" || "$1" == "rl" || "$1" == "src" ]]; then

    # Reload this bash script
    keg_message "Reloading Keg CLI..."
    source $KEG_CLI_PATH/keg
    return

  # Run the keg-cli bash script
  elif [[ "$1" == "init" ]]; then
    keg_message "Running init scrpt"
    /bin/bash $KEG_CLI_PATH/scripts/setup/mac-init.sh "${@:2}"
    return

  # export the git key for the current terminal session
  elif [[ "$1" == "key" && "$2" == "export" ]]; then
    keg_export_git_key
    return

  # Ensure docker machine is loaded
  elif [[ "$1" == "docker_machine" || "$1" == "docm" || "$1" == "dcm" ]]; then
    keg_auto_load_envs
    keg_cli_init_docker_machine
    return

  # Check if this is a move directory command
  elif [[ "$#" == "0" || "$#" == "1" ]]; then

    # # Check if this is a change dir command
    keg_cli_move_directory $@
    # Get the return code from the move dir command
    local KEG_MOVE_DIR=$?

    # If 0 is returned, then we changed dirs, so check and exit
    if [[ "$KEG_MOVE_DIR" == 0 ]]; then
      return 0
    fi
  fi

  # All other commands get passed on to the node keg-cli script
  node $KEG_CLI_PATH/keg-cli $@

}


# Call the auto load envs so we can use the environment
keg_auto_load_envs
